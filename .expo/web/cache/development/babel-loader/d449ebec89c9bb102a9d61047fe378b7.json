{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ansari\\\\Documents\\\\Github\\\\Mercy-USA-App\\\\node_modules\\\\react-native-calendars\\\\src\\\\expandableCalendar\\\\calendarProvider.js\";\nimport _ from 'lodash';\nimport React, { Component } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport PropTypes from 'prop-types';\nimport XDate from 'xdate';\nimport dateutils from \"../dateutils\";\nimport { xdateToData } from \"../interface\";\nimport styleConstructor from \"./style\";\nimport CalendarContext from \"./calendarContext\";\n\nvar commons = require(\"./commons\");\n\nvar UPDATE_SOURCES = commons.UPDATE_SOURCES;\n\nvar iconDown = require(\"../img/down.png\");\n\nvar iconUp = require(\"../img/up.png\");\n\nvar TOP_POSITION = 65;\n\nclass CalendarProvider extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getProviderContextValue = () => {\n      return {\n        setDate: this.setDate,\n        date: this.state.date,\n        updateSource: this.state.updateSource,\n        setDisabled: this.setDisabled\n      };\n    };\n\n    this.setDate = (date, updateSource) => {\n      var sameMonth = dateutils.sameMonth(XDate(date), XDate(this.state.date));\n      this.setState({\n        date,\n        updateSource,\n        buttonIcon: this.getButtonIcon(date)\n      }, () => {\n        this.animateTodayButton(date);\n      });\n\n      _.invoke(this.props, 'onDateChanged', date, updateSource);\n\n      if (!sameMonth) {\n        _.invoke(this.props, 'onMonthChange', xdateToData(XDate(date)), updateSource);\n      }\n    };\n\n    this.setDisabled = disabled => {\n      if (this.props.showTodayButton && disabled !== this.state.disabled) {\n        this.setState({\n          disabled\n        });\n        this.animateOpacity(disabled);\n      }\n    };\n\n    this.onTodayPress = () => {\n      var today = XDate().toString('yyyy-MM-dd');\n      this.setDate(today, UPDATE_SOURCES.TODAY_PRESS);\n    };\n\n    this.style = styleConstructor(props.theme);\n    this.state = {\n      date: this.props.date || XDate().toString('yyyy-MM-dd'),\n      updateSource: UPDATE_SOURCES.CALENDAR_INIT,\n      buttonY: new Animated.Value(-props.todayBottomMargin || -TOP_POSITION),\n      buttonIcon: this.getButtonIcon(props.date),\n      disabled: false,\n      opacity: new Animated.Value(1)\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.date !== this.props.date) {\n      this.setDate(this.props.date, UPDATE_SOURCES.PROP_UPDATE);\n    }\n  }\n\n  getButtonIcon(date) {\n    if (!this.props.showTodayButton) {\n      return;\n    }\n\n    var isPastDate = this.isPastDate(date);\n    return isPastDate ? iconDown : iconUp;\n  }\n\n  isPastDate(date) {\n    var today = XDate();\n    var d = XDate(date);\n\n    if (today.getFullYear() > d.getFullYear()) {\n      return true;\n    }\n\n    if (today.getFullYear() === d.getFullYear()) {\n      if (today.getMonth() > d.getMonth()) {\n        return true;\n      }\n\n      if (today.getMonth() === d.getMonth()) {\n        if (today.getDate() > d.getDate()) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  animateTodayButton(date) {\n    if (this.props.showTodayButton) {\n      var today = XDate().toString('yyyy-MM-dd');\n      var isToday = today === date;\n      Animated.spring(this.state.buttonY, {\n        toValue: isToday ? TOP_POSITION : -this.props.todayBottomMargin || -TOP_POSITION,\n        tension: 30,\n        friction: 8,\n        useNativeDriver: true\n      }).start();\n    }\n  }\n\n  animateOpacity(disabled) {\n    var {\n      disabledOpacity\n    } = this.props;\n\n    if (disabledOpacity) {\n      Animated.timing(this.state.opacity, {\n        toValue: disabled ? disabledOpacity : 1,\n        duration: 500\n      }).start();\n    }\n  }\n\n  renderTodayButton() {\n    var {\n      disabled,\n      opacity,\n      buttonY,\n      buttonIcon\n    } = this.state;\n    var todayString = XDate.locales[XDate.defaultLocale].today || commons.todayString;\n    var today = todayString.charAt(0).toUpperCase() + todayString.slice(1);\n    return React.createElement(Animated.View, {\n      style: [this.style.todayButtonContainer, {\n        transform: [{\n          translateY: buttonY\n        }]\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      }\n    }, React.createElement(TouchableOpacity, {\n      style: [this.style.todayButton, this.props.todayButtonStyle],\n      onPress: this.onTodayPress,\n      disabled: disabled,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      }\n    }, React.createElement(Animated.Image, {\n      style: [this.style.todayButtonImage, {\n        opacity\n      }],\n      source: buttonIcon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      }\n    }), React.createElement(Animated.Text, {\n      allowFontScaling: false,\n      style: [this.style.todayButtonText, {\n        opacity\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      }\n    }, today)));\n  }\n\n  render() {\n    return React.createElement(CalendarContext.Provider, {\n      value: this.getProviderContextValue(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      }\n    }, React.createElement(View, {\n      style: [{\n        flex: 1\n      }, this.props.style],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      }\n    }, this.props.children), this.props.showTodayButton && this.renderTodayButton());\n  }\n\n}\n\nCalendarProvider.displayName = 'CalendarProvider';\nCalendarProvider.propTypes = {\n  date: PropTypes.any.isRequired,\n  onDateChanged: PropTypes.func,\n  onMonthChange: PropTypes.func,\n  showTodayButton: PropTypes.bool,\n  todayBottomMargin: PropTypes.number,\n  todayButtonStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array]),\n  disabledOpacity: PropTypes.number\n};\nexport default CalendarProvider;","map":{"version":3,"sources":["C:\\Users\\Ansari\\Documents\\Github\\Mercy-USA-App\\node_modules\\react-native-calendars\\src\\expandableCalendar\\calendarProvider.js"],"names":["_","React","Component","PropTypes","XDate","dateutils","xdateToData","styleConstructor","CalendarContext","commons","require","UPDATE_SOURCES","iconDown","iconUp","TOP_POSITION","CalendarProvider","constructor","props","getProviderContextValue","setDate","date","state","updateSource","setDisabled","sameMonth","setState","buttonIcon","getButtonIcon","animateTodayButton","invoke","disabled","showTodayButton","animateOpacity","onTodayPress","today","toString","TODAY_PRESS","style","theme","CALENDAR_INIT","buttonY","Animated","Value","todayBottomMargin","opacity","componentDidUpdate","prevProps","PROP_UPDATE","isPastDate","d","getFullYear","getMonth","getDate","isToday","spring","toValue","tension","friction","useNativeDriver","start","disabledOpacity","timing","duration","renderTodayButton","todayString","locales","defaultLocale","charAt","toUpperCase","slice","todayButtonContainer","transform","translateY","todayButton","todayButtonStyle","todayButtonImage","todayButtonText","render","flex","children","displayName","propTypes","any","isRequired","onDateChanged","func","onMonthChange","bool","number","oneOfType","object","array"],"mappings":"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","sourcesContent":["import _ from 'lodash';\r\nimport React, {Component} from 'react';\r\nimport {Animated, TouchableOpacity, View} from 'react-native';\r\nimport PropTypes from 'prop-types';\r\nimport XDate from 'xdate';\r\n\r\nimport dateutils from '../dateutils';\r\nimport {xdateToData} from '../interface';\r\nimport styleConstructor from './style';\r\nimport CalendarContext from './calendarContext';\r\n\r\n\r\nconst commons = require('./commons');\r\nconst UPDATE_SOURCES = commons.UPDATE_SOURCES;\r\nconst iconDown = require('../img/down.png');\r\nconst iconUp = require('../img/up.png');\r\nconst TOP_POSITION = 65;\r\n\r\n/**\r\n * @description: Calendar context provider component\r\n * @example: https://github.com/wix/react-native-calendars/blob/master/example/src/screens/expandableCalendar.js\r\n */\r\nclass CalendarProvider extends Component {\r\n  static displayName = 'CalendarProvider';\r\n\r\n  static propTypes = {\r\n    /** Initial date in 'yyyy-MM-dd' format. Default = Date() */\r\n    date: PropTypes.any.isRequired,\r\n    /** Callback for date change event */\r\n    onDateChanged: PropTypes.func,\r\n    /** Callback for month change event */\r\n    onMonthChange: PropTypes.func,\r\n    /** Whether to show the today button */\r\n    showTodayButton: PropTypes.bool,\r\n    /** Today button's top position */\r\n    todayBottomMargin: PropTypes.number,\r\n    /** Today button's style */\r\n    todayButtonStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array]),\r\n    /** The opacity for the disabled today button (0-1) */\r\n    disabledOpacity: PropTypes.number\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.style = styleConstructor(props.theme);\r\n\r\n    this.state = {\r\n      date: this.props.date || XDate().toString('yyyy-MM-dd'),\r\n      updateSource: UPDATE_SOURCES.CALENDAR_INIT,\r\n      buttonY: new Animated.Value(-props.todayBottomMargin || -TOP_POSITION),\r\n      buttonIcon: this.getButtonIcon(props.date),\r\n      disabled: false,\r\n      opacity: new Animated.Value(1)\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.date !== this.props.date) {\r\n      this.setDate(this.props.date, UPDATE_SOURCES.PROP_UPDATE);\r\n    }\r\n  }\r\n  \r\n  getProviderContextValue = () => {\r\n    return {\r\n      setDate: this.setDate,\r\n      date: this.state.date,\r\n      updateSource: this.state.updateSource,\r\n      setDisabled: this.setDisabled\r\n    };\r\n  };\r\n\r\n  setDate = (date, updateSource) => {\r\n    const sameMonth = dateutils.sameMonth(XDate(date), XDate(this.state.date));\r\n\r\n    this.setState({date, updateSource, buttonIcon: this.getButtonIcon(date)}, () => {\r\n      this.animateTodayButton(date);\r\n    });\r\n\r\n    _.invoke(this.props, 'onDateChanged', date, updateSource);\r\n    \r\n    if (!sameMonth) {\r\n      _.invoke(this.props, 'onMonthChange', xdateToData(XDate(date)), updateSource);\r\n    }\r\n  }\r\n\r\n  setDisabled = (disabled) => {\r\n    if (this.props.showTodayButton && disabled !== this.state.disabled) {\r\n      this.setState({disabled});\r\n      this.animateOpacity(disabled);\r\n    }\r\n  }\r\n\r\n  getButtonIcon(date) {\r\n    if (!this.props.showTodayButton) {\r\n      return;\r\n    }\r\n    const isPastDate = this.isPastDate(date);\r\n    return isPastDate ? iconDown : iconUp;\r\n  }\r\n\r\n  isPastDate(date) {\r\n    const today = XDate();\r\n    const d = XDate(date);\r\n\r\n    if (today.getFullYear() > d.getFullYear()) {\r\n      return true;\r\n    }\r\n    if (today.getFullYear() === d.getFullYear()) {\r\n      if (today.getMonth() > d.getMonth()) {\r\n        return true;\r\n      }\r\n      if (today.getMonth() === d.getMonth()) {\r\n        if (today.getDate() > d.getDate()) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  animateTodayButton(date) {\r\n    if (this.props.showTodayButton) {\r\n      const today = XDate().toString('yyyy-MM-dd');\r\n      const isToday = today === date;\r\n      \r\n      Animated.spring(this.state.buttonY, {\r\n        toValue: isToday ? TOP_POSITION : -this.props.todayBottomMargin || -TOP_POSITION,\r\n        tension: 30,\r\n        friction: 8,\r\n        useNativeDriver: true\r\n      }).start();\r\n    }\r\n  }\r\n\r\n  animateOpacity(disabled) {\r\n    const {disabledOpacity} = this.props;\r\n    if (disabledOpacity) {\r\n      Animated.timing(this.state.opacity, {\r\n        toValue: disabled ? disabledOpacity : 1, \r\n        duration: 500\r\n      }).start();\r\n    }\r\n  }\r\n\r\n  onTodayPress = () => {\r\n    const today = XDate().toString('yyyy-MM-dd');\r\n    this.setDate(today, UPDATE_SOURCES.TODAY_PRESS);\r\n  }\r\n\r\n  renderTodayButton() {\r\n    const {disabled, opacity, buttonY, buttonIcon} = this.state;\r\n    const todayString = XDate.locales[XDate.defaultLocale].today || commons.todayString;\r\n    const today = todayString.charAt(0).toUpperCase() + todayString.slice(1);\r\n    \r\n    return (\r\n      <Animated.View style={[this.style.todayButtonContainer, {transform: [{translateY: buttonY}]}]}>\r\n        <TouchableOpacity style={[this.style.todayButton, this.props.todayButtonStyle]} onPress={this.onTodayPress} disabled={disabled}>\r\n          <Animated.Image style={[this.style.todayButtonImage, {opacity}]} source={buttonIcon}/>\r\n          <Animated.Text allowFontScaling={false} style={[this.style.todayButtonText, {opacity}]}>{today}</Animated.Text>\r\n        </TouchableOpacity>\r\n      </Animated.View>\r\n    );\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <CalendarContext.Provider value={this.getProviderContextValue()}>\r\n        <View style={[{flex: 1}, this.props.style]}>\r\n          {this.props.children}\r\n        </View>\r\n        {this.props.showTodayButton && this.renderTodayButton()}\r\n      </CalendarContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CalendarProvider;\r\n"]},"metadata":{},"sourceType":"module"}