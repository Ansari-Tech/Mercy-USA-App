{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ansari\\\\Documents\\\\Github\\\\Mercy-USA-App\\\\node_modules\\\\react-native-material-kit\\\\lib\\\\mdl\\\\RadioButton.js\";\n\nfunction _objectSpread2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport MKColor from \"../MKColor\";\nimport Ripple from \"./Ripple\";\nimport * as utils from \"../utils\";\nimport { getTheme } from \"../theme\";\nvar DEFAULT_EXTRA_RIPPLE_RADII = 16;\n\nclass RadioButton extends Component {\n  constructor(props) {\n    super(props);\n\n    this._onLayout = (_ref) => {\n      var {\n        nativeEvent: {\n          layout: {\n            width,\n            height\n          }\n        }\n      } = _ref;\n\n      if (width === this.state.width && height === this.state.height) {\n        return;\n      }\n\n      var padding = this.props.extraRippleRadius || DEFAULT_EXTRA_RIPPLE_RADII;\n      this.setState({\n        width: width + padding,\n        height: height + padding\n      });\n    };\n\n    this._onTouch = evt => {\n      if (evt.type === 'TOUCH_UP') {\n        if (!this.state.checked) {\n          this.confirmToggle();\n        }\n      }\n    };\n\n    this.theme = getTheme();\n    this._animatedSize = new Animated.Value(0);\n    this._animatedRadius = new Animated.Value(0);\n    this._group = null;\n    this.state = {\n      checked: false,\n      width: 0,\n      height: 0\n    };\n  }\n\n  componentWillMount() {\n    this.group = this.props.group;\n\n    this._initView(this.props.checked);\n\n    if (this.group && this.group.add instanceof Function) this.group.add(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.group !== nextProps.group) {\n      if (this.group && this.group.remove instanceof Function) this.group.remove(this);\n      this.group = nextProps.group;\n      if (this.group && this.group.add instanceof Function) this.group.add(this);\n    }\n\n    if (nextProps.checked !== this.props.checked) {\n      this._initView(nextProps.checked);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.group && this.group.remove instanceof Function) this.group.remove(this);\n  }\n\n  _initView(checked) {\n    this.setState({\n      checked\n    });\n\n    this._aniChecked(checked);\n  }\n\n  confirmToggle() {\n    var prevState = this.state.checked;\n    var newState = !prevState;\n    this.setState({\n      checked: newState\n    }, () => {\n      this._emitCheckedChange(newState);\n    });\n\n    if (this.group) {\n      this.group.onChecked(this, newState);\n    }\n\n    this._aniChecked(newState);\n  }\n\n  confirmUncheck() {\n    this.setState({\n      checked: false\n    }, () => {\n      this._emitCheckedChange(false);\n    });\n\n    this._aniChecked(false);\n  }\n\n  _emitCheckedChange(checked) {\n    if (this.props.onCheckedChange) {\n      this.props.onCheckedChange({\n        checked\n      });\n    }\n  }\n\n  _aniChecked(checked) {\n    Animated.parallel([Animated.timing(this._animatedRadius, {\n      toValue: checked ? 5 : 0,\n      duration: 220\n    }), Animated.timing(this._animatedSize, {\n      toValue: checked ? 10 : 0,\n      duration: 220\n    })]).start();\n  }\n\n  render() {\n    var defaultStyle = this.theme.radioStyle;\n\n    var mergedStyle = _extends({}, defaultStyle, utils.extractProps(this, ['borderOnColor', 'borderOffColor', 'fillColor', 'rippleColor']));\n\n    var borderColor = this.state.checked ? mergedStyle.borderOnColor : mergedStyle.borderOffColor;\n    return React.createElement(TouchableWithoutFeedback, _extends({}, utils.extractTouchableProps(this), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      }\n    }), React.createElement(Ripple, _extends({}, this.props, {\n      maskBorderRadiusInPercent: 50,\n      rippleLocation: \"center\",\n      rippleColor: mergedStyle.rippleColor,\n      onTouch: this._onTouch,\n      style: {\n        justifyContent: 'center',\n        alignItems: 'center',\n        width: this.state.width,\n        height: this.state.height\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      }\n    }), React.createElement(View, {\n      ref: \"outerCircle\",\n      style: [RadioButton.defaultProps.style, {\n        borderColor\n      }, this.props.style],\n      onLayout: this._onLayout,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      }\n    }, React.createElement(Animated.View, {\n      ref: \"innerCircle\",\n      style: {\n        backgroundColor: mergedStyle.fillColor,\n        width: this._animatedSize,\n        height: this._animatedSize,\n        borderRadius: this._animatedRadius\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      }\n    }))));\n  }\n\n}\n\nRadioButton.propTypes = _objectSpread2({}, Ripple.propTypes, {}, TouchableWithoutFeedback.propTypes, {\n  borderOnColor: PropTypes.string,\n  borderOffColor: PropTypes.string,\n  fillColor: PropTypes.string,\n  checked: PropTypes.bool,\n  group: PropTypes.object,\n  onCheckedChange: PropTypes.func,\n  extraRippleRadius: PropTypes.number\n});\nRadioButton.defaultProps = {\n  pointerEvents: 'box-only',\n  maskColor: MKColor.Transparent,\n  style: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: 20,\n    height: 20,\n    borderWidth: 2,\n    borderRadius: 10\n  }\n};\n\nclass Group {\n  constructor(onAdd, onRemove) {\n    this.buttons = [];\n    this.onAdd = onAdd;\n    this.onRemove = onRemove;\n  }\n\n  add(btn) {\n    if (this.onAdd instanceof Function && this.onAdd(btn) === false) return;\n    if (this.buttons.indexOf(btn) < 0) this.buttons.push(btn);\n  }\n\n  remove(btn) {\n    if (this.onRemove instanceof Function && this.onRemove(btn) === false) return;\n    var index = this.buttons.indexOf(btn);\n    if (index >= 0) this.buttons.splice(index, 1);\n  }\n\n  onChecked(btn, checked) {\n    if (checked) this.buttons.forEach(it => it !== btn && it.confirmUncheck());\n  }\n\n}\n\nmodule.exports = RadioButton;\nRadioButton.Group = Group;","map":{"version":3,"sources":["C:\\Users\\Ansari\\Documents\\Github\\Mercy-USA-App\\node_modules\\react-native-material-kit\\lib\\mdl\\RadioButton.js"],"names":["React","Component","PropTypes","MKColor","Ripple","utils","getTheme","DEFAULT_EXTRA_RIPPLE_RADII","RadioButton","constructor","props","_onLayout","nativeEvent","layout","width","height","state","padding","extraRippleRadius","setState","_onTouch","evt","type","checked","confirmToggle","theme","_animatedSize","Animated","Value","_animatedRadius","_group","componentWillMount","group","_initView","add","Function","componentWillReceiveProps","nextProps","remove","componentWillUnmount","_aniChecked","prevState","newState","_emitCheckedChange","onChecked","confirmUncheck","onCheckedChange","parallel","timing","toValue","duration","start","render","defaultStyle","radioStyle","mergedStyle","extractProps","borderColor","borderOnColor","borderOffColor","extractTouchableProps","rippleColor","justifyContent","alignItems","defaultProps","style","backgroundColor","fillColor","borderRadius","propTypes","TouchableWithoutFeedback","string","bool","object","func","number","pointerEvents","maskColor","Transparent","borderWidth","Group","onAdd","onRemove","buttons","btn","indexOf","push","index","splice","forEach","it","module","exports"],"mappings":"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","sourcesContent":["//\n// MDL-style Radio button component.\n//\n// - @see [MDL Radio Button](http://www.getmdl.io/components/index.html#toggles-section/radio)\n// - [Props](#props)\n// - [Defaults](#defaults)\n//\n// Created by ywu on 15/10/12.\n//\n\nimport React, {\n  Component,\n} from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Animated,\n  TouchableWithoutFeedback,\n  View,\n} from 'react-native';\n\nimport MKColor from '../MKColor';\nimport Ripple from './Ripple';\nimport * as utils from '../utils';\nimport { getTheme } from '../theme';\n\nconst DEFAULT_EXTRA_RIPPLE_RADII = 16;\n\n//\n// ## <section id='RadioButton'>RadioButton</section>\n// The `RadioButton` component.\nclass RadioButton extends Component {\n  // ## <section id='props'>Props</section>\n  static propTypes = {\n    // [Ripple Props](Ripple.html#props)...\n    ...Ripple.propTypes,\n\n    // Touchable...\n    ...TouchableWithoutFeedback.propTypes,\n\n    // Color of the border (outer circle), when checked\n    borderOnColor: PropTypes.string,\n\n    // Color of the border (outer circle), when unchecked\n    borderOffColor: PropTypes.string,\n\n    // Color of the inner circle, when checked\n    fillColor: PropTypes.string,\n\n    // Toggle status\n    checked: PropTypes.bool,\n\n    // Group to which the Radio button belongs\n    group: PropTypes.object,\n\n    // Callback when the toggle status is changed\n    onCheckedChange: PropTypes.func,\n\n    // How far the ripple can extend outside the RadioButton's border,\n    // default is 16\n    extraRippleRadius: PropTypes.number,\n  };\n\n  // ## <section id='defaults'>Defaults</section>\n  static defaultProps = {\n    pointerEvents: 'box-only',\n    maskColor: MKColor.Transparent,\n    style: {\n      justifyContent: 'center',\n      alignItems: 'center',\n      width: 20,\n      height: 20,\n      borderWidth: 2,\n      borderRadius: 10,\n    },\n  };\n\n  constructor(props) {\n    super(props);\n    this.theme = getTheme();\n    this._animatedSize = new Animated.Value(0);\n    this._animatedRadius = new Animated.Value(0);\n    this._group = null;\n    this.state = {\n      checked: false,\n      width: 0,\n      height: 0,\n    };\n  }\n\n  componentWillMount() {\n    this.group = this.props.group;\n    this._initView(this.props.checked);\n\n    if (this.group && this.group.add instanceof Function)\n      this.group.add(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.group !== nextProps.group) {\n      if (this.group && this.group.remove instanceof Function)\n        this.group.remove(this);\n      \n      this.group = nextProps.group;\n\n      if (this.group && this.group.add instanceof Function)\n        this.group.add(this);\n    }\n\n    if (nextProps.checked !== this.props.checked) {\n      this._initView(nextProps.checked);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.group && this.group.remove instanceof Function)\n      this.group.remove(this);\n  }\n\n  _initView(checked) {\n    this.setState({ checked });\n    this._aniChecked(checked);\n  }\n\n  // property initializers begin\n  _onLayout = ({ nativeEvent: { layout: { width, height } } }) => {\n    if (width === this.state.width && height === this.state.height) {\n      return;\n    }\n\n    const padding = this.props.extraRippleRadius || DEFAULT_EXTRA_RIPPLE_RADII;\n    this.setState({\n      width: width + padding,\n      height: height + padding,\n    });\n  };\n\n  // Touch events handling\n  _onTouch = (evt) => {\n    if (evt.type === 'TOUCH_UP') {\n      if (!this.state.checked) {\n        this.confirmToggle();\n      }\n    }\n  };\n  // property initializers end\n\n  // When a toggle action (from the given state) is confirmed.\n  confirmToggle() {\n    const prevState = this.state.checked;\n    const newState = !prevState;\n\n    this.setState({ checked: newState }, () => {\n      this._emitCheckedChange(newState);\n    });\n\n    // update state of the other buttons in the group\n    if (this.group) {\n      this.group.onChecked(this, newState);\n    }\n\n    this._aniChecked(newState);\n  }\n\n  confirmUncheck() {\n    this.setState({ checked: false }, () => {\n      this._emitCheckedChange(false);\n    });\n\n    this._aniChecked(false);\n  }\n\n  _emitCheckedChange(checked) {\n    if (this.props.onCheckedChange) {\n      this.props.onCheckedChange({ checked });\n    }\n  }\n\n  // animate the checked state, by scaling the inner circle\n  _aniChecked(checked) {\n    Animated.parallel([\n      Animated.timing(this._animatedRadius, {\n        toValue: checked ? 5 : 0,\n        duration: 220,\n      }),\n      Animated.timing(this._animatedSize, {\n        toValue: checked ? 10 : 0,\n        duration: 220,\n      }),\n    ]).start();\n  }\n\n  render() {\n    const defaultStyle = this.theme.radioStyle;\n    const mergedStyle = Object.assign({}, defaultStyle, utils.extractProps(this, [\n      'borderOnColor',\n      'borderOffColor',\n      'fillColor',\n      'rippleColor',\n    ]));\n    const borderColor = this.state.checked ? mergedStyle.borderOnColor : mergedStyle.borderOffColor;\n\n    return (\n      <TouchableWithoutFeedback {...utils.extractTouchableProps(this)} >\n        <Ripple\n          {...this.props}\n          maskBorderRadiusInPercent={50}\n          rippleLocation=\"center\"\n          rippleColor={mergedStyle.rippleColor}\n          onTouch={this._onTouch}\n          style={{\n            justifyContent: 'center',\n            alignItems: 'center',\n            width: this.state.width,\n            height: this.state.height,\n          }}\n        >\n          <View ref=\"outerCircle\"\n            style={[\n              RadioButton.defaultProps.style,\n              { borderColor },\n              this.props.style,\n            ]}\n            onLayout={this._onLayout}\n          >\n            <Animated.View\n              ref=\"innerCircle\"\n              style={{\n                backgroundColor: mergedStyle.fillColor,\n                width: this._animatedSize,\n                height: this._animatedSize,\n                borderRadius: this._animatedRadius,\n              }}\n            />\n          </View>\n        </Ripple>\n      </TouchableWithoutFeedback>\n    );\n  }\n}\n\n//\n// ## <section id='Group'>Group</section>\n// Managing a group of radio buttons.\nclass Group {\n  constructor(onAdd, onRemove) {\n    this.buttons = [];\n    this.onAdd = onAdd;\n    this.onRemove = onRemove;\n  }\n\n  add(btn) {\n    if (this.onAdd instanceof Function && this.onAdd(btn) === false)\n      return;\n\n    if (this.buttons.indexOf(btn) < 0)\n      this.buttons.push(btn);\n  }\n\n  remove(btn) {\n    if (this.onRemove instanceof Function && this.onRemove(btn) === false)\n      return;\n\n    var index = this.buttons.indexOf(btn);\n    if (index >= 0)\n      this.buttons.splice(index, 1);\n  }\n\n  onChecked(btn, checked) {\n    if (checked)\n      this.buttons.forEach((it) => (it !== btn) && it.confirmUncheck());\n  }\n}\n\n\n// ## Public interface\nmodule.exports = RadioButton;\nRadioButton.Group = Group;\n"]},"metadata":{},"sourceType":"module"}