{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ansari\\\\Documents\\\\Github\\\\Mercy-USA-App\\\\node_modules\\\\react-native-material-kit\\\\lib\\\\internal\\\\Thumb.js\";\n\nfunction _objectSpread2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { ViewPropTypes } from \"../utils\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport View from \"react-native-web/dist/exports/View\";\nvar DEFAULT_UPPER_TRACK_COLOR = '#cccccc';\nvar LOWEST_VALUE_THUMB_COLOR = 'white';\nvar THUMB_SCALE_RATIO = 1.3;\nvar THUMB_BORDER_WIDTH = 2;\nvar TRACK_EXTRA_MARGIN_H = 5;\n\nclass Thumb extends Component {\n  constructor(props) {\n    super(props);\n    this.x = 0;\n    this._trackMarginH = (props.radius + THUMB_BORDER_WIDTH) * THUMB_SCALE_RATIO + TRACK_EXTRA_MARGIN_H;\n    this._panResponder = {};\n    this._animatedLeft = new Animated.Value(0);\n    this._animatedScale = new Animated.Value(1);\n    this.state = {\n      color: LOWEST_VALUE_THUMB_COLOR,\n      borderColor: DEFAULT_UPPER_TRACK_COLOR\n    };\n  }\n\n  componentWillMount() {\n    this._panResponder = PanResponder.create({\n      onStartShouldSetPanResponder: () => true,\n      onStartShouldSetPanResponderCapture: () => true,\n      onMoveShouldSetPanResponder: () => true,\n      onMoveShouldSetPanResponderCapture: () => true,\n      onPanResponderTerminationRequest: () => false,\n      onShouldBlockNativeResponder: () => true,\n      onPanResponderGrant: evt => {\n        this.props.onGrant(this, evt);\n      },\n      onPanResponderMove: evt => {\n        this.props.onMove(this, evt);\n      },\n      onPanResponderRelease: evt => {\n        this.props.onEnd(this, evt);\n      },\n      onPanResponderTerminate: evt => {\n        this.props.onEnd(this, evt);\n      }\n    });\n\n    this._onRadiiUpdate(this.props);\n\n    this.setState({\n      borderColor: this.props.disabledColor\n    });\n  }\n\n  componentDidMount() {\n    this._animatedLeft.addListener(this._getOnSliding());\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this._onRadiiUpdate(nextProps);\n  }\n\n  componentWillUnmount() {\n    this._animatedLeft.removeAllListeners();\n  }\n\n  _onRadiiUpdate(props) {\n    this._radii = props.radius;\n    this._dia = this._radii * 2;\n    this._containerRadii = this._radii + THUMB_BORDER_WIDTH;\n    this._containerDia = this._containerRadii * 2;\n  }\n\n  _getOnSliding() {\n    var prevX = this.x;\n    return (_ref) => {\n      var {\n        value\n      } = _ref;\n      var x = value + this._containerRadii - this._trackMarginH;\n\n      if (prevX <= 0 && x > 0) {\n        this._onExplode();\n      } else if (prevX > 0 && x <= 0) {\n        this._onCollapse();\n      }\n\n      prevX = x;\n    };\n  }\n\n  moveTo(x) {\n    this.x = x;\n    var x0 = this.x + this._trackMarginH;\n    Animated.parallel([Animated.timing(this._animatedScale, {\n      toValue: THUMB_SCALE_RATIO,\n      duration: 100\n    }), Animated.timing(this._animatedLeft, {\n      toValue: x0 - this._containerRadii,\n      duration: 0\n    })]).start();\n  }\n\n  confirmMoveTo() {\n    Animated.timing(this._animatedScale, {\n      toValue: 1,\n      duration: 100\n    }).start();\n  }\n\n  _onExplode() {\n    this.setState({\n      borderColor: this.props.enabledColor,\n      color: this.props.enabledColor\n    });\n  }\n\n  _onCollapse() {\n    this.setState({\n      borderColor: this.props.disabledColor,\n      color: LOWEST_VALUE_THUMB_COLOR\n    });\n  }\n\n  render() {\n    return React.createElement(Animated.View, _extends({\n      style: [this.props.style, {\n        width: this._containerDia,\n        height: this._containerDia,\n        backgroundColor: this.state.borderColor,\n        borderRadius: this._containerRadii,\n        position: 'absolute',\n        left: this._animatedLeft,\n        transform: [{\n          scale: this._animatedScale\n        }]\n      }]\n    }, this._panResponder.panHandlers, {\n      hitSlop: {\n        top: this.props.touchPadding,\n        left: this.props.touchPadding,\n        bottom: this.props.touchPadding,\n        right: this.props.touchPadding\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      }\n    }), React.createElement(View, {\n      style: {\n        width: this._dia,\n        height: this._dia,\n        backgroundColor: this.state.color,\n        borderRadius: this._radii,\n        top: THUMB_BORDER_WIDTH,\n        left: THUMB_BORDER_WIDTH\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      }\n    }));\n  }\n\n}\n\nThumb.propTypes = _objectSpread2({}, ViewPropTypes || View.propTypes, {\n  onGrant: PropTypes.func,\n  onMove: PropTypes.func,\n  onEnd: PropTypes.func,\n  disabledColor: PropTypes.string,\n  enabledColor: PropTypes.string,\n  radius: PropTypes.number,\n  touchPadding: PropTypes.number\n});\nThumb.defaultProps = {\n  radius: 6,\n  disabledColor: DEFAULT_UPPER_TRACK_COLOR,\n  touchPadding: 0\n};\nmodule.exports = Thumb;","map":{"version":3,"sources":["C:\\Users\\Ansari\\Documents\\Github\\Mercy-USA-App\\node_modules\\react-native-material-kit\\lib\\internal\\Thumb.js"],"names":["React","Component","PropTypes","ViewPropTypes","DEFAULT_UPPER_TRACK_COLOR","LOWEST_VALUE_THUMB_COLOR","THUMB_SCALE_RATIO","THUMB_BORDER_WIDTH","TRACK_EXTRA_MARGIN_H","Thumb","constructor","props","x","_trackMarginH","radius","_panResponder","_animatedLeft","Animated","Value","_animatedScale","state","color","borderColor","componentWillMount","PanResponder","create","onStartShouldSetPanResponder","onStartShouldSetPanResponderCapture","onMoveShouldSetPanResponder","onMoveShouldSetPanResponderCapture","onPanResponderTerminationRequest","onShouldBlockNativeResponder","onPanResponderGrant","evt","onGrant","onPanResponderMove","onMove","onPanResponderRelease","onEnd","onPanResponderTerminate","_onRadiiUpdate","setState","disabledColor","componentDidMount","addListener","_getOnSliding","componentWillReceiveProps","nextProps","componentWillUnmount","removeAllListeners","_radii","_dia","_containerRadii","_containerDia","prevX","value","_onExplode","_onCollapse","moveTo","x0","parallel","timing","toValue","duration","start","confirmMoveTo","enabledColor","render","style","width","height","backgroundColor","borderRadius","position","left","transform","scale","panHandlers","top","touchPadding","bottom","right","propTypes","View","func","string","number","defaultProps","module","exports"],"mappings":"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","sourcesContent":["//\n// RangeSlider component.\n//\n// - [Props](#props)\n// - [Defaults](#defaults)\n// - [Built-in builders](#builders)\n//\n// Created by awaidman on 16/1/21.\n//\n\nimport React, {\n  Component,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport { ViewPropTypes } from '../utils';\n\nimport {\n  Animated,\n  PanResponder,\n  View,\n} from 'react-native';\n\n// Default color of the upper part of the track\nconst DEFAULT_UPPER_TRACK_COLOR = '#cccccc';\n\n// Color of the thumb when lowest value is chosen\nconst LOWEST_VALUE_THUMB_COLOR = 'white';\n\n// The max scale of the thumb\nconst THUMB_SCALE_RATIO = 1.3;\n\n// Width of the thumb border\nconst THUMB_BORDER_WIDTH = 2;\n\n// extra spacing enlarging the touchable area\nconst TRACK_EXTRA_MARGIN_H = 5;\n\n// ## <section id='Thumb'>Thumb</section>\n// `Thumb` component of the [`Slider`](#Slider).\nclass Thumb extends Component {\n  constructor(props) {\n    super(props);\n    this.x = 0;  // current x-axis position\n\n    this._trackMarginH = (props.radius + THUMB_BORDER_WIDTH) * THUMB_SCALE_RATIO +\n      TRACK_EXTRA_MARGIN_H;\n    this._panResponder = {};\n    this._animatedLeft = new Animated.Value(0);\n    this._animatedScale = new Animated.Value(1);\n    this.state = {\n      color: LOWEST_VALUE_THUMB_COLOR,\n      borderColor: DEFAULT_UPPER_TRACK_COLOR,\n    };\n  }\n\n  componentWillMount() {\n    this._panResponder = PanResponder.create({\n      onStartShouldSetPanResponder: () => true,\n      onStartShouldSetPanResponderCapture: () => true,\n      onMoveShouldSetPanResponder: () => true,\n      onMoveShouldSetPanResponderCapture: () => true,\n      onPanResponderTerminationRequest: () => false,\n      onShouldBlockNativeResponder: () => true,\n\n      onPanResponderGrant: (evt) => { this.props.onGrant(this, evt); },\n      onPanResponderMove: (evt) => { this.props.onMove(this, evt); },\n      onPanResponderRelease: (evt) => { this.props.onEnd(this, evt); },\n      onPanResponderTerminate: (evt) => { this.props.onEnd(this, evt); },\n    });\n\n    this._onRadiiUpdate(this.props);\n    this.setState({\n      borderColor: this.props.disabledColor,\n    });\n  }\n\n  componentDidMount() {\n    this._animatedLeft.addListener(this._getOnSliding());\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this._onRadiiUpdate(nextProps);\n  }\n\n  componentWillUnmount() {\n    this._animatedLeft.removeAllListeners();\n  }\n\n  // when thumb radii updated, re-calc the dimens\n  _onRadiiUpdate(props) {\n    this._radii = props.radius;\n    this._dia = this._radii * 2;\n    this._containerRadii = this._radii + THUMB_BORDER_WIDTH;\n    this._containerDia = this._containerRadii * 2;\n  }\n\n  // return a memoized function to handle sliding animation events\n  _getOnSliding() {\n    let prevX = this.x;  // memorize the previous x\n\n    // on sliding of the thumb\n    // `value` - the `left` of the thumb, relative to the container\n    return ({ value }) => {\n      // convert to value relative to the track\n      const x = value + this._containerRadii - this._trackMarginH;\n\n      if (prevX <= 0 && x > 0) {\n        // leaving the lowest value, scale up the thumb\n        this._onExplode();\n      } else if (prevX > 0 && x <= 0) {\n        // at lowest value, scale down the thumb\n        this._onCollapse();\n      }\n\n      prevX = x;\n    };\n  }\n\n  // animate the sliding\n  // `x` - target position, relative to the track\n  moveTo(x) {\n    this.x = x;\n    const x0 = this.x + this._trackMarginH;\n\n    Animated.parallel([\n      Animated.timing(this._animatedScale, {\n        toValue: THUMB_SCALE_RATIO,\n        duration: 100,\n      }),\n      Animated.timing(this._animatedLeft, {\n        toValue: x0 - this._containerRadii,\n        duration: 0,\n      }),\n    ]).start();\n  }\n\n  // stop sliding\n  confirmMoveTo() {\n    Animated.timing(this._animatedScale, {\n      toValue: 1,\n      duration: 100,\n    }).start();\n  }\n\n  // from 'lowest' to 'non-lowest'\n  _onExplode() {\n    this.setState({\n      borderColor: this.props.enabledColor,\n      color: this.props.enabledColor,\n    });\n  }\n\n  // from 'non-lowest' to 'lowest'\n  _onCollapse() {\n    this.setState({\n      borderColor: this.props.disabledColor,\n      color: LOWEST_VALUE_THUMB_COLOR,\n    });\n  }\n\n  // Rendering the `Thumb`\n  render() {\n    return (\n      <Animated.View\n        style={[  // the outer circle to draw the border\n          this.props.style,\n          {\n            width: this._containerDia,\n            height: this._containerDia,\n            backgroundColor: this.state.borderColor,\n            borderRadius: this._containerRadii,\n            position: 'absolute',\n            left: this._animatedLeft,\n            transform: [\n              { scale: this._animatedScale },\n            ],\n          },\n        ]}\n        { ...this._panResponder.panHandlers }\n        hitSlop={{\n          top: this.props.touchPadding,\n          left: this.props.touchPadding,\n          bottom: this.props.touchPadding,\n          right: this.props.touchPadding,\n        }}\n      >\n        <View\n          style={{  // the inner circle\n            width: this._dia,\n            height: this._dia,\n            backgroundColor: this.state.color,\n            borderRadius: this._radii,\n            top: THUMB_BORDER_WIDTH,\n            left: THUMB_BORDER_WIDTH,\n          }}\n        />\n      </Animated.View>\n    );\n  }\n}\n\nThumb.propTypes = {\n  // [RN.View Props](https://facebook.github.io/react-native/docs/view.html#props)...\n  ...(ViewPropTypes || View.propTypes),\n\n  // Callback to handle onPanResponderGrant gesture\n  onGrant: PropTypes.func,\n\n  // Callback to handle onPanResponderMove gesture\n  onMove: PropTypes.func,\n\n  // Callback to handle onPanResponderRelease/Terminate gesture\n  onEnd: PropTypes.func,\n\n  // Color when thumb has no value\n  disabledColor: PropTypes.string,\n\n  // Color when thumb has value\n  enabledColor: PropTypes.string,\n\n  // Radius of thumb component\n  radius: PropTypes.number,\n\n  // Padding for the hitSlop on the Thumb component\n  touchPadding: PropTypes.number,\n};\n\n// ## <section id='defaults'>Defaults</section>\nThumb.defaultProps = {\n  radius: 6,\n  disabledColor: DEFAULT_UPPER_TRACK_COLOR,\n  touchPadding: 0,\n};\n\n// ## Public interface\nmodule.exports = Thumb;\n"]},"metadata":{},"sourceType":"module"}