{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ansari\\\\Documents\\\\Github\\\\Mercy-USA-App\\\\node_modules\\\\react-native-super-grid\\\\SectionGrid.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectSpread2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ViewPropTypes from \"react-native-web/dist/exports/ViewPropTypes\";\nimport SectionList from \"react-native-web/dist/exports/SectionList\";\nimport PropTypes from 'prop-types';\nimport { generateStyles, calculateDimensions, chunkArray } from \"./utils\";\n\nclass SectionGrid extends Component {\n  constructor(props) {\n    super(props);\n    this.onLayout = this.onLayout.bind(this);\n    this.renderRow = this.renderRow.bind(this);\n    var {\n      staticDimension\n    } = props;\n    var totalDimension = staticDimension;\n\n    if (!staticDimension) {\n      totalDimension = Dimensions.get('window').width;\n    }\n\n    this.state = {\n      totalDimension\n    };\n  }\n\n  onLayout(e) {\n    var {\n      staticDimension,\n      onLayout\n    } = this.props;\n    var {\n      totalDimension\n    } = this.state;\n\n    if (!staticDimension) {\n      var {\n        width: newTotalDimension\n      } = e.nativeEvent.layout || {};\n\n      if (totalDimension !== newTotalDimension) {\n        this.setState({\n          totalDimension: newTotalDimension\n        });\n      }\n    }\n\n    if (onLayout) {\n      onLayout(e);\n    }\n  }\n\n  renderRow(_ref) {\n    var {\n      renderItem,\n      rowItems,\n      rowIndex,\n      section,\n      itemsPerRow,\n      rowStyle,\n      separators,\n      isFirstRow,\n      containerStyle\n    } = _ref;\n    var {\n      spacing,\n      itemContainerStyle,\n      keyExtractor\n    } = this.props;\n    var additionalRowStyle = {};\n\n    if (isFirstRow) {\n      additionalRowStyle = {\n        marginTop: spacing\n      };\n    }\n\n    return React.createElement(View, {\n      style: [rowStyle, additionalRowStyle],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      }\n    }, rowItems.map((item, i) => React.createElement(View, {\n      key: keyExtractor ? keyExtractor(item, i) : \"item_\".concat(rowIndex * itemsPerRow + i),\n      style: [containerStyle, itemContainerStyle],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      }\n    }, renderItem({\n      item,\n      index: rowIndex * itemsPerRow + i,\n      section,\n      separators,\n      rowIndex\n    }))));\n  }\n\n  render() {\n    var _this$props = this.props,\n        {\n      sections,\n      style,\n      spacing,\n      fixed,\n      itemDimension,\n      staticDimension,\n      renderItem: originalRenderItem,\n      onLayout,\n      keyExtractor: _keyExtractor\n    } = _this$props,\n        restProps = _objectWithoutProperties(_this$props, [\"sections\", \"style\", \"spacing\", \"fixed\", \"itemDimension\", \"staticDimension\", \"renderItem\", \"onLayout\", \"keyExtractor\"]);\n\n    var {\n      totalDimension\n    } = this.state;\n    var {\n      containerDimension,\n      itemsPerRow,\n      fixedSpacing\n    } = calculateDimensions({\n      itemDimension,\n      staticDimension,\n      totalDimension,\n      spacing,\n      fixed\n    });\n    var {\n      containerStyle,\n      rowStyle\n    } = generateStyles({\n      itemDimension,\n      containerDimension,\n      spacing,\n      fixedSpacing,\n      fixed\n    });\n    var groupedSections = sections.map(section => {\n      var chunkedData = chunkArray(section.data, itemsPerRow);\n\n      var _renderItem = section.renderItem || originalRenderItem;\n\n      return _objectSpread2({}, section, {\n        renderItem: (_ref2) => {\n          var {\n            item,\n            index,\n            section\n          } = _ref2;\n          return this.renderRow({\n            renderItem: _renderItem,\n            rowItems: item,\n            rowIndex: index,\n            section,\n            isFirstRow: index === 0,\n            itemsPerRow,\n            rowStyle,\n            containerStyle\n          });\n        },\n        data: chunkedData,\n        originalData: section.data\n      });\n    });\n    return React.createElement(SectionList, _extends({\n      sections: groupedSections,\n      keyExtractor: (rowItems, index) => {\n        if (_keyExtractor) {\n          return rowItems.map((rowItem, rowItemIndex) => {\n            return _keyExtractor(rowItem, rowItemIndex);\n          }).join('_');\n        } else {\n          return \"row_\".concat(index);\n        }\n      },\n      style: style,\n      onLayout: this.onLayout,\n      ref: sectionList => {\n        this.sectionList = sectionList;\n      }\n    }, restProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      }\n    }));\n  }\n\n}\n\nSectionGrid.propTypes = {\n  renderItem: PropTypes.func,\n  sections: PropTypes.arrayOf(PropTypes.any).isRequired,\n  itemDimension: PropTypes.number,\n  fixed: PropTypes.bool,\n  spacing: PropTypes.number,\n  style: ViewPropTypes.style,\n  itemContainerStyle: ViewPropTypes.style,\n  staticDimension: PropTypes.number,\n  onLayout: PropTypes.func,\n  listKey: PropTypes.string\n};\nSectionGrid.defaultProps = {\n  fixed: false,\n  itemDimension: 120,\n  spacing: 10,\n  style: {},\n  itemContainerStyle: undefined,\n  staticDimension: undefined,\n  onLayout: null,\n  listKey: undefined\n};\nexport default SectionGrid;","map":{"version":3,"sources":["C:\\Users\\Ansari\\Documents\\Github\\Mercy-USA-App\\node_modules\\react-native-super-grid\\SectionGrid.js"],"names":["React","Component","PropTypes","generateStyles","calculateDimensions","chunkArray","SectionGrid","constructor","props","onLayout","bind","renderRow","staticDimension","totalDimension","Dimensions","get","width","state","e","newTotalDimension","nativeEvent","layout","setState","renderItem","rowItems","rowIndex","section","itemsPerRow","rowStyle","separators","isFirstRow","containerStyle","spacing","itemContainerStyle","keyExtractor","additionalRowStyle","marginTop","map","item","i","index","render","sections","style","fixed","itemDimension","originalRenderItem","restProps","containerDimension","fixedSpacing","groupedSections","chunkedData","data","originalData","rowItem","rowItemIndex","join","sectionList","propTypes","func","arrayOf","any","isRequired","number","bool","ViewPropTypes","listKey","string","defaultProps","undefined"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {\n  View, Dimensions, ViewPropTypes, SectionList\n} from 'react-native';\nimport PropTypes from 'prop-types';\nimport { generateStyles, calculateDimensions, chunkArray } from './utils';\n\nclass SectionGrid extends Component {\n  constructor(props) {\n    super(props);\n    this.onLayout = this.onLayout.bind(this);\n    this.renderRow = this.renderRow.bind(this);\n\n    const { staticDimension } = props;\n\n    // Calculate total dimensions and set to state\n    let totalDimension = staticDimension;\n    if (!staticDimension) {\n      totalDimension = Dimensions.get('window').width;\n    }\n\n    this.state = {\n      totalDimension,\n    };\n  }\n\n  onLayout(e) {\n    const { staticDimension, onLayout } = this.props;\n    const { totalDimension } = this.state;\n\n    if (!staticDimension) {\n      const { width: newTotalDimension } = e.nativeEvent.layout || {};\n\n      if (totalDimension !== newTotalDimension) {\n        this.setState({\n          totalDimension: newTotalDimension,\n        });\n      }\n    }\n\n    // call onLayout prop if passed\n    if (onLayout) {\n      onLayout(e);\n    }\n  }\n\n  renderRow({\n    renderItem,\n    rowItems,\n    rowIndex,\n    section,\n    itemsPerRow,\n    rowStyle,\n    separators,\n    isFirstRow,\n    containerStyle,\n  }) {\n    const { spacing, itemContainerStyle, keyExtractor } = this.props;\n\n    // Add spacing below section header\n    let additionalRowStyle = {};\n    if (isFirstRow) {\n      additionalRowStyle = {\n        marginTop: spacing,\n      };\n    }\n\n    return (\n      <View style={[rowStyle, additionalRowStyle]}>\n        {rowItems.map((item, i) => (\n          <View\n            key={keyExtractor ? keyExtractor(item, i) : `item_${(rowIndex * itemsPerRow) + i}`}\n            style={[containerStyle, itemContainerStyle]}\n          >\n            {renderItem({\n              item,\n              index: (rowIndex * itemsPerRow) + i,\n              section,\n              separators,\n              rowIndex,\n            })}\n          </View>\n        ))}\n      </View>\n    );\n  }\n\n  render() {\n    const {\n      sections,\n      style,\n      spacing,\n      fixed,\n      itemDimension,\n      staticDimension,\n      renderItem: originalRenderItem,\n      onLayout,\n      keyExtractor,\n      ...restProps\n    } = this.props;\n\n    const { totalDimension } = this.state;\n\n    const { containerDimension, itemsPerRow, fixedSpacing } = calculateDimensions({\n      itemDimension,\n      staticDimension,\n      totalDimension,\n      spacing,\n      fixed,\n    });\n\n    const { containerStyle, rowStyle } = generateStyles({\n      itemDimension,\n      containerDimension,\n      spacing,\n      fixedSpacing,\n      fixed,\n    });\n\n    const groupedSections = sections.map((section) => {\n      const chunkedData = chunkArray(section.data, itemsPerRow);\n      const renderItem = section.renderItem || originalRenderItem;\n      return {\n        ...section,\n        renderItem: ({ item, index, section }) => this.renderRow({\n          renderItem,\n          rowItems: item,\n          rowIndex: index,\n          section,\n          isFirstRow: index === 0,\n          itemsPerRow,\n          rowStyle,\n          containerStyle,\n        }),\n        data: chunkedData,\n        originalData: section.data,\n      };\n    });\n\n    return (\n      <SectionList\n        sections={groupedSections}\n        keyExtractor={(rowItems, index) => {\n          if (keyExtractor) {\n            return rowItems.map((rowItem, rowItemIndex) => {\n              return keyExtractor(rowItem, rowItemIndex)\n            }).join('_')\n          } else {\n            return `row_${index}`\n          }\n        }}\n        style={style}\n        onLayout={this.onLayout}\n        ref={(sectionList) => { this.sectionList = sectionList; }}\n        {...restProps}\n      />\n    );\n  }\n}\n\nSectionGrid.propTypes = {\n  renderItem: PropTypes.func,\n  sections: PropTypes.arrayOf(PropTypes.any).isRequired,\n  itemDimension: PropTypes.number,\n  fixed: PropTypes.bool,\n  spacing: PropTypes.number,\n  style: ViewPropTypes.style,\n  itemContainerStyle: ViewPropTypes.style,\n  staticDimension: PropTypes.number,\n  onLayout: PropTypes.func,\n  listKey: PropTypes.string,\n};\n\nSectionGrid.defaultProps = {\n  fixed: false,\n  itemDimension: 120,\n  spacing: 10,\n  style: {},\n  itemContainerStyle: undefined,\n  staticDimension: undefined,\n  onLayout: null,\n  listKey: undefined,\n};\n\nexport default SectionGrid;\n"]},"metadata":{},"sourceType":"module"}