{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ansari\\\\Documents\\\\Github\\\\Mercy-USA-App\\\\screens\\\\Measurements.js\";\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Picker from \"react-native-web/dist/exports/Picker\";\nimport NavigationService from \"../NavigationService\";\n\nvar convert = require('convert-units');\n\nexport default class Measurements extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fromValue: 1,\n      toValue: 2.54,\n      fromUnit: \"in\",\n      toUnit: \"mm\"\n    };\n  }\n\n  render() {\n    var unitList = {\n      inch: \"in\",\n      foot: \"ft-us\",\n      yard: \"yd\",\n      mile: \"mi\",\n      millimeter: \"mm\",\n      centimeter: \"cm\",\n      meter: \"m\",\n      kilometer: \"km\"\n    };\n    return React.createElement(View, {\n      style: styles.mainView,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      }\n    }, React.createElement(View, {\n      style: styles.fromToView,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      }\n    }, React.createElement(TextInput, {\n      style: {\n        height: 40,\n        borderColor: \"gray\",\n        borderWidth: 1\n      },\n      keyboardType: \"numeric\",\n      autoFocus: true,\n      onChangeText: fromValue => {\n        var convertedVal = convert(fromValue).from(this.state.fromUnit).to(this.state.toUnit);\n        this.setState({\n          toValue: convertedVal,\n          fromValue: fromValue\n        });\n      },\n      value: this.state.fromValue.toString(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      }\n    }), React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      }\n    }, \"From\"), React.createElement(Picker, {\n      mode: \"dropdown\",\n      selectedValue: this.state.fromUnit,\n      onValueChange: (fromUnit, unit) => {\n        this.setState({\n          fromUnit: fromUnit\n        });\n        var convertedVal = convert(this.state.fromValue).from(fromUnit).to(this.state.toUnit);\n        this.setState({\n          toValue: convertedVal\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      }\n    }, Object.keys(unitList).map(key => {\n      return React.createElement(Picker.Item, {\n        label: key,\n        value: unitList[key],\n        key: key,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        }\n      });\n    }))), React.createElement(View, {\n      style: styles.fromToView,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      }\n    }, React.createElement(TextInput, {\n      editable: false,\n      style: {\n        height: 40,\n        borderColor: \"gray\",\n        borderWidth: 1\n      },\n      value: this.state.toValue.toFixed(3),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      }\n    }), React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      }\n    }, \"To\"), React.createElement(Picker, {\n      mode: \"dropdown\",\n      selectedValue: this.state.toUnit,\n      onValueChange: (toUnit, unit) => {\n        this.setState({\n          toUnit: toUnit\n        });\n        var convertedVal = convert(this.state.fromValue).from(this.state.fromUnit).to(toUnit);\n        this.setState({\n          toValue: convertedVal\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      }\n    }, Object.keys(unitList).map(key => {\n      return React.createElement(Picker.Item, {\n        label: key,\n        value: unitList[key],\n        key: key,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        }\n      });\n    }))));\n  }\n\n}\nvar styles = StyleSheet.create({\n  mainView: {\n    flex: 1,\n    flexDirection: \"row\"\n  },\n  fromToView: {\n    minWidth: 200,\n    padding: 20\n  }\n});","map":{"version":3,"sources":["C:\\Users\\Ansari\\Documents\\Github\\Mercy-USA-App\\screens\\Measurements.js"],"names":["React","NavigationService","convert","require","Measurements","Component","constructor","props","state","fromValue","toValue","fromUnit","toUnit","render","unitList","inch","foot","yard","mile","millimeter","centimeter","meter","kilometer","styles","mainView","fromToView","height","borderColor","borderWidth","convertedVal","from","to","setState","toString","unit","Object","keys","map","key","toFixed","StyleSheet","create","flex","flexDirection","minWidth","padding"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { View, Text, StyleSheet, TextInput, Picker } from \"react-native\";\r\nimport NavigationService from \"../NavigationService\";\r\nvar convert = require('convert-units');\r\n\r\nexport default class Measurements extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      fromValue: 1,\r\n      toValue: 2.54,\r\n      fromUnit: \"in\",\r\n      toUnit: \"mm\"\r\n    };\r\n  }\r\n  render() {\r\n    const unitList = {\r\n      inch: \"in\",\r\n      foot: \"ft-us\",\r\n      yard: \"yd\",\r\n      mile: \"mi\",\r\n      millimeter: \"mm\",\r\n      centimeter: \"cm\",\r\n      meter: \"m\",\r\n      kilometer: \"km\"\r\n    };\r\n\r\n    return (\r\n      <View style={styles.mainView}>\r\n        <View style={styles.fromToView}>\r\n          <TextInput\r\n            style={{ height: 40, borderColor: \"gray\", borderWidth: 1 }}\r\n            keyboardType=\"numeric\"\r\n            autoFocus={true}\r\n            onChangeText={fromValue => {\r\n              let convertedVal = convert(fromValue).from(this.state.fromUnit).to(this.state.toUnit);\r\n              this.setState({ toValue: convertedVal, fromValue: fromValue });\r\n            }}\r\n            value={this.state.fromValue.toString()}\r\n          />\r\n          <Text>From</Text>\r\n\r\n          <Picker\r\n            mode=\"dropdown\"\r\n            selectedValue={this.state.fromUnit}\r\n            onValueChange={(fromUnit, unit) => {\r\n              this.setState({ fromUnit: fromUnit });\r\n              let convertedVal = convert(this.state.fromValue).from(fromUnit).to(this.state.toUnit);\r\n              this.setState({ toValue: convertedVal });\r\n            }}\r\n          >\r\n            {Object.keys(unitList).map(key => {\r\n              return (\r\n                <Picker.Item label={key} value={unitList[key]} key={key} />\r\n              );\r\n            })}\r\n          </Picker>\r\n        </View>\r\n        <View style={styles.fromToView}>\r\n          <TextInput\r\n            editable={false}\r\n            style={{ height: 40, borderColor: \"gray\", borderWidth: 1 }}\r\n            value={this.state.toValue.toFixed(3)}\r\n          />\r\n          <Text>To</Text>\r\n          <Picker\r\n            mode=\"dropdown\"\r\n            selectedValue={this.state.toUnit}\r\n            onValueChange={(toUnit, unit) => {\r\n              this.setState({ toUnit: toUnit });\r\n              let convertedVal = convert(this.state.fromValue).from(this.state.fromUnit).to(toUnit);\r\n              this.setState({ toValue: convertedVal });\r\n            }}\r\n          >\r\n            {Object.keys(unitList).map(key => {\r\n              return (\r\n                <Picker.Item label={key} value={unitList[key]} key={key} />\r\n              );\r\n            })}\r\n          </Picker>\r\n        </View>\r\n      </View>\r\n    );\r\n  }\r\n}\r\nconst styles = StyleSheet.create({\r\n  mainView: {\r\n    flex: 1,\r\n    flexDirection: \"row\"\r\n  },\r\n  fromToView: {\r\n    minWidth: 200,\r\n    padding: 20\r\n  }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}