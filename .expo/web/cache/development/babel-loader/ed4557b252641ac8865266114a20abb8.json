{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ansari\\\\Documents\\\\Github\\\\Mercy-USA-App\\\\node_modules\\\\react-native-material-kit\\\\lib\\\\internal\\\\MKTouchable.js\";\n\nfunction _objectSpread2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { requireNativeComponent } from \"react-native-web/dist/index\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport View from \"react-native-web/dist/exports/View\";\nvar UIManager = NativeModules.UIManager;\nimport { convertCoordinate, ViewPropTypes } from \"../utils\";\n\nclass MKTouchable extends Component {\n  constructor() {\n    super(...arguments);\n\n    this._onTouchEvent = event => {\n      if (this.props.onTouch) {\n        var evt = event.nativeEvent;\n        evt.x = convertCoordinate(evt.x);\n        evt.y = convertCoordinate(evt.y);\n        this.props.onTouch(evt);\n      }\n    };\n  }\n\n  measure(cb) {\n    return this.refs.node && UIManager.measure(findNodeHandle(this.refs.node), cb);\n  }\n\n  render() {\n    return React.createElement(NativeTouchable, _extends({\n      ref: \"node\"\n    }, this.props, {\n      style: this.props.style,\n      onChange: this._onTouchEvent,\n      onLayout: this.props.onLayout,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      }\n    }), this.props.children);\n  }\n\n}\n\nMKTouchable.propTypes = _objectSpread2({}, ViewPropTypes || View.propTypes, {\n  onTouch: PropTypes.func\n});\nvar NativeTouchable = requireNativeComponent('MKTouchable', {\n  name: 'MKTouchable',\n  propTypes: MKTouchable.propTypes\n}, {\n  nativeOnly: {\n    nativeBackgroundAndroid: true,\n    nativeForegroundAndroid: true\n  }\n});\nmodule.exports = MKTouchable;","map":{"version":3,"sources":["C:\\Users\\Ansari\\Documents\\Github\\Mercy-USA-App\\node_modules\\react-native-material-kit\\lib\\internal\\MKTouchable.js"],"names":["React","Component","PropTypes","requireNativeComponent","UIManager","NativeModules","convertCoordinate","ViewPropTypes","MKTouchable","_onTouchEvent","event","props","onTouch","evt","nativeEvent","x","y","measure","cb","refs","node","findNodeHandle","render","style","onLayout","children","propTypes","View","func","NativeTouchable","name","nativeOnly","nativeBackgroundAndroid","nativeForegroundAndroid","module","exports"],"mappings":";;;;;;;;AAMA,OAAOA,KAAP,IACEC,SADF,QAEO,OAFP;AAGA,OAAOC,SAAP,MAAsB,YAAtB;SAGEC,sB;;;;AAKF,IAAMC,SAAS,GAAGC,aAAa,CAACD,SAAhC;AAEA,SAASE,iBAAT,EAA4BC,aAA5B;;AAKA,MAAMC,WAAN,SAA0BP,SAA1B,CAAoC;AAAA;AAAA;;AAAA,SAGlCQ,aAHkC,GAGjBC,KAAD,IAAW;AACzB,UAAI,KAAKC,KAAL,CAAWC,OAAf,EAAwB;AACtB,YAAMC,GAAG,GAAGH,KAAK,CAACI,WAAlB;AACAD,QAAAA,GAAG,CAACE,CAAJ,GAAQT,iBAAiB,CAACO,GAAG,CAACE,CAAL,CAAzB;AACAF,QAAAA,GAAG,CAACG,CAAJ,GAAQV,iBAAiB,CAACO,GAAG,CAACG,CAAL,CAAzB;AACA,aAAKL,KAAL,CAAWC,OAAX,CAAmBC,GAAnB;AACD;AACF,KAViC;AAAA;;AAalCI,EAAAA,OAAO,CAACC,EAAD,EAAK;AACV,WAAO,KAAKC,IAAL,CAAUC,IAAV,IAAkBhB,SAAS,CAACa,OAAV,CAAkBI,cAAc,CAAC,KAAKF,IAAL,CAAUC,IAAX,CAAhC,EAAkDF,EAAlD,CAAzB;AACD;;AAEDI,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,eAAD;AACE,MAAA,GAAG,EAAC;AADN,OAEM,KAAKX,KAFX;AAGE,MAAA,KAAK,EAAE,KAAKA,KAAL,CAAWY,KAHpB;AAIE,MAAA,QAAQ,EAAE,KAAKd,aAJjB;AAKE,MAAA,QAAQ,EAAE,KAAKE,KAAL,CAAWa,QALvB;AAAA;AAAA;AAAA;AAAA;AAAA,QAOG,KAAKb,KAAL,CAAWc,QAPd,CADF;AAWD;;AA7BiC;;AAiCpCjB,WAAW,CAACkB,SAAZ,sBAEMnB,aAAa,IAAIoB,IAAI,CAACD,SAF5B;AAKEd,EAAAA,OAAO,EAAEV,SAAS,CAAC0B;AALrB;AAQA,IAAMC,eAAe,GAAG1B,sBAAsB,CAAC,aAAD,EAAgB;AAC5D2B,EAAAA,IAAI,EAAE,aADsD;AAE5DJ,EAAAA,SAAS,EAAElB,WAAW,CAACkB;AAFqC,CAAhB,EAG3C;AACDK,EAAAA,UAAU,EAAE;AACVC,IAAAA,uBAAuB,EAAE,IADf;AAEVC,IAAAA,uBAAuB,EAAE;AAFf;AADX,CAH2C,CAA9C;AAWAC,MAAM,CAACC,OAAP,GAAiB3B,WAAjB","sourcesContent":["//\n// Touchable view, for listening to touch events, but not intercept them.\n//\n// Created by ywu on 15/9/22.\n//\n\nimport React, {\n  Component,\n} from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  requireNativeComponent,\n  NativeModules,\n  findNodeHandle,\n  View\n} from 'react-native';\nconst UIManager = NativeModules.UIManager;\n\nimport { convertCoordinate, ViewPropTypes } from '../utils';\n\n//\n// ## <section id='MKTouchable'>MKTouchable</section>\n//\nclass MKTouchable extends Component {\n\n  // region property initializers\n  _onTouchEvent = (event) => {\n    if (this.props.onTouch) {\n      const evt = event.nativeEvent;\n      evt.x = convertCoordinate(evt.x);\n      evt.y = convertCoordinate(evt.y);\n      this.props.onTouch(evt);\n    }\n  };\n  // endregion\n\n  measure(cb) {\n    return this.refs.node && UIManager.measure(findNodeHandle(this.refs.node), cb);\n  }\n\n  render() {\n    return (\n      <NativeTouchable\n        ref=\"node\"\n        {...this.props}\n        style={this.props.style}\n        onChange={this._onTouchEvent}\n        onLayout={this.props.onLayout}\n      >\n        {this.props.children}\n      </NativeTouchable>\n    );\n  }\n}\n\n// ## <section id='props'>Props</section>\nMKTouchable.propTypes = {\n  // [RN.View Props](https://facebook.github.io/react-native/docs/view.html#props)...\n  ...(ViewPropTypes || View.propTypes),\n\n  // Touch events callback\n  onTouch: PropTypes.func,\n};\n\nconst NativeTouchable = requireNativeComponent('MKTouchable', {\n  name: 'MKTouchable',\n  propTypes: MKTouchable.propTypes,\n}, {\n  nativeOnly: {\n    nativeBackgroundAndroid: true,\n    nativeForegroundAndroid: true,\n  },\n});\n\n// ## Public interface\nmodule.exports = MKTouchable;\n"]},"metadata":{},"sourceType":"module"}