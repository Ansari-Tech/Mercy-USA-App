{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ansari\\\\Documents\\\\Github\\\\Mercy-USA-App\\\\node_modules\\\\react-native-super-grid\\\\FlatGrid.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _objectSpread2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ViewPropTypes from \"react-native-web/dist/exports/ViewPropTypes\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport PropTypes from 'prop-types';\nimport { chunkArray, calculateDimensions, generateStyles } from \"./utils\";\n\nclass FlatGrid extends React.Component {\n  constructor(props) {\n    super(props);\n    this.renderRow = this.renderRow.bind(this);\n    this.onLayout = this.onLayout.bind(this);\n    var {\n      staticDimension,\n      horizontal\n    } = props;\n    var totalDimension = staticDimension;\n\n    if (!staticDimension) {\n      var dimension = horizontal ? 'height' : 'width';\n      totalDimension = Dimensions.get('window')[dimension];\n    }\n\n    this.state = {\n      totalDimension\n    };\n  }\n\n  onLayout(e) {\n    var {\n      staticDimension,\n      horizontal,\n      onLayout\n    } = this.props;\n    var {\n      totalDimension\n    } = this.state;\n\n    if (!staticDimension) {\n      var {\n        width,\n        height\n      } = e.nativeEvent.layout || {};\n      var newTotalDimension = horizontal ? height : width;\n\n      if (totalDimension !== newTotalDimension) {\n        this.setState({\n          totalDimension: newTotalDimension\n        });\n      }\n    }\n\n    if (onLayout) {\n      onLayout(e);\n    }\n  }\n\n  renderRow(_ref) {\n    var {\n      rowItems,\n      rowIndex,\n      separators,\n      isLastRow,\n      itemsPerRow,\n      rowStyle,\n      containerStyle\n    } = _ref;\n    var {\n      spacing,\n      horizontal,\n      itemContainerStyle,\n      renderItem,\n      keyExtractor\n    } = this.props;\n    var additionalRowStyle = {};\n\n    if (isLastRow) {\n      additionalRowStyle = _objectSpread2({}, !horizontal ? {\n        marginBottom: spacing\n      } : {}, {}, horizontal ? {\n        marginRight: spacing\n      } : {});\n    }\n\n    return React.createElement(View, {\n      style: [rowStyle, additionalRowStyle],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      }\n    }, rowItems.map((item, i) => React.createElement(View, {\n      key: keyExtractor ? keyExtractor(item, i) : \"item_\".concat(rowIndex * itemsPerRow + i),\n      style: [containerStyle, itemContainerStyle],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      }\n    }, renderItem({\n      item,\n      index: rowIndex * itemsPerRow + i,\n      separators,\n      rowIndex\n    }))));\n  }\n\n  render() {\n    var _this$props = this.props,\n        {\n      items,\n      style,\n      spacing,\n      fixed,\n      itemDimension,\n      renderItem,\n      horizontal,\n      onLayout,\n      staticDimension,\n      itemContainerStyle,\n      keyExtractor: _keyExtractor\n    } = _this$props,\n        restProps = _objectWithoutProperties(_this$props, [\"items\", \"style\", \"spacing\", \"fixed\", \"itemDimension\", \"renderItem\", \"horizontal\", \"onLayout\", \"staticDimension\", \"itemContainerStyle\", \"keyExtractor\"]);\n\n    var {\n      totalDimension\n    } = this.state;\n    var {\n      containerDimension,\n      itemsPerRow,\n      fixedSpacing\n    } = calculateDimensions({\n      itemDimension,\n      staticDimension,\n      totalDimension,\n      spacing,\n      fixed\n    });\n    var {\n      containerStyle,\n      rowStyle\n    } = generateStyles({\n      horizontal,\n      itemDimension,\n      containerDimension,\n      spacing,\n      fixedSpacing,\n      fixed\n    });\n    var rows = chunkArray(items, itemsPerRow);\n    return React.createElement(FlatList, _extends({\n      data: rows,\n      renderItem: (_ref2) => {\n        var {\n          item,\n          index\n        } = _ref2;\n        return this.renderRow({\n          rowItems: item,\n          rowIndex: index,\n          isLastRow: index === rows.length - 1,\n          itemsPerRow,\n          rowStyle,\n          containerStyle\n        });\n      },\n      style: [_objectSpread2({}, horizontal ? {\n        paddingLeft: spacing\n      } : {\n        paddingTop: spacing\n      }), style],\n      onLayout: this.onLayout,\n      keyExtractor: (rowItems, index) => {\n        if (_keyExtractor) {\n          return rowItems.map((rowItem, rowItemIndex) => {\n            return _keyExtractor(rowItem, rowItemIndex);\n          }).join('_');\n        } else {\n          return \"row_\".concat(index);\n        }\n      }\n    }, restProps, {\n      horizontal: horizontal,\n      ref: flatList => {\n        this.flatList = flatList;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      }\n    }));\n  }\n\n}\n\nFlatGrid.propTypes = {\n  renderItem: PropTypes.func.isRequired,\n  items: PropTypes.arrayOf(PropTypes.any).isRequired,\n  itemDimension: PropTypes.number,\n  fixed: PropTypes.bool,\n  spacing: PropTypes.number,\n  style: ViewPropTypes.style,\n  itemContainerStyle: ViewPropTypes.style,\n  staticDimension: PropTypes.number,\n  horizontal: PropTypes.bool,\n  onLayout: PropTypes.func,\n  listKey: PropTypes.string\n};\nFlatGrid.defaultProps = {\n  fixed: false,\n  itemDimension: 120,\n  spacing: 10,\n  style: {},\n  itemContainerStyle: undefined,\n  staticDimension: undefined,\n  horizontal: false,\n  onLayout: null,\n  listKey: undefined\n};\nexport default FlatGrid;","map":{"version":3,"sources":["C:\\Users\\Ansari\\Documents\\Github\\Mercy-USA-App\\node_modules\\react-native-super-grid\\FlatGrid.js"],"names":["React","PropTypes","chunkArray","calculateDimensions","generateStyles","FlatGrid","Component","constructor","props","renderRow","bind","onLayout","staticDimension","horizontal","totalDimension","dimension","Dimensions","get","state","e","width","height","nativeEvent","layout","newTotalDimension","setState","rowItems","rowIndex","separators","isLastRow","itemsPerRow","rowStyle","containerStyle","spacing","itemContainerStyle","renderItem","keyExtractor","additionalRowStyle","marginBottom","marginRight","map","item","i","index","render","items","style","fixed","itemDimension","restProps","containerDimension","fixedSpacing","rows","length","paddingLeft","paddingTop","rowItem","rowItemIndex","join","flatList","propTypes","func","isRequired","arrayOf","any","number","bool","ViewPropTypes","listKey","string","defaultProps","undefined"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;AAIA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,UAAT,EAAqBC,mBAArB,EAA0CC,cAA1C;;AAGA,MAAMC,QAAN,SAAuBL,KAAK,CAACM,SAA7B,CAAuC;AACrCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcD,IAAd,CAAmB,IAAnB,CAAhB;AAEA,QAAM;AAAEE,MAAAA,eAAF;AAAmBC,MAAAA;AAAnB,QAAkCL,KAAxC;AAGA,QAAIM,cAAc,GAAGF,eAArB;;AAEA,QAAI,CAACA,eAAL,EAAsB;AACpB,UAAMG,SAAS,GAAGF,UAAU,GAAG,QAAH,GAAc,OAA1C;AACAC,MAAAA,cAAc,GAAGE,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBF,SAAzB,CAAjB;AACD;;AAED,SAAKG,KAAL,GAAa;AACXJ,MAAAA;AADW,KAAb;AAGD;;AAEDH,EAAAA,QAAQ,CAACQ,CAAD,EAAI;AACV,QAAM;AAAEP,MAAAA,eAAF;AAAmBC,MAAAA,UAAnB;AAA+BF,MAAAA;AAA/B,QAA4C,KAAKH,KAAvD;AACA,QAAM;AAAEM,MAAAA;AAAF,QAAqB,KAAKI,KAAhC;;AAEA,QAAI,CAACN,eAAL,EAAsB;AACpB,UAAM;AAAEQ,QAAAA,KAAF;AAASC,QAAAA;AAAT,UAAoBF,CAAC,CAACG,WAAF,CAAcC,MAAd,IAAwB,EAAlD;AACA,UAAMC,iBAAiB,GAAGX,UAAU,GAAGQ,MAAH,GAAYD,KAAhD;;AAEA,UAAIN,cAAc,KAAKU,iBAAvB,EAA0C;AACxC,aAAKC,QAAL,CAAc;AACZX,UAAAA,cAAc,EAAEU;AADJ,SAAd;AAGD;AACF;;AAGD,QAAIb,QAAJ,EAAc;AACZA,MAAAA,QAAQ,CAACQ,CAAD,CAAR;AACD;AACF;;AAEDV,EAAAA,SAAS,OAQN;AAAA,QARO;AACRiB,MAAAA,QADQ;AAERC,MAAAA,QAFQ;AAGRC,MAAAA,UAHQ;AAIRC,MAAAA,SAJQ;AAKRC,MAAAA,WALQ;AAMRC,MAAAA,QANQ;AAORC,MAAAA;AAPQ,KAQP;AACD,QAAM;AACJC,MAAAA,OADI;AACKpB,MAAAA,UADL;AACiBqB,MAAAA,kBADjB;AACqCC,MAAAA,UADrC;AACiDC,MAAAA;AADjD,QAEF,KAAK5B,KAFT;AAKA,QAAI6B,kBAAkB,GAAG,EAAzB;;AACA,QAAIR,SAAJ,EAAe;AACbQ,MAAAA,kBAAkB,sBACZ,CAACxB,UAAD,GAAc;AAAEyB,QAAAA,YAAY,EAAEL;AAAhB,OAAd,GAA0C,EAD9B,MAEZpB,UAAU,GAAG;AAAE0B,QAAAA,WAAW,EAAEN;AAAf,OAAH,GAA8B,EAF5B,CAAlB;AAID;;AAED,WACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE,CAACF,QAAD,EAAWM,kBAAX,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA,OACGX,QAAQ,CAACc,GAAT,CAAa,CAACC,IAAD,EAAOC,CAAP,KACZ,oBAAC,IAAD;AACE,MAAA,GAAG,EAAEN,YAAY,GAAGA,YAAY,CAACK,IAAD,EAAOC,CAAP,CAAf,kBAAoCf,QAAQ,GAAGG,WAAZ,GAA2BY,CAA9D,CADnB;AAEE,MAAA,KAAK,EAAE,CAACV,cAAD,EAAiBE,kBAAjB,CAFT;AAAA;AAAA;AAAA;AAAA;AAAA,OAIGC,UAAU,CAAC;AACVM,MAAAA,IADU;AAEVE,MAAAA,KAAK,EAAGhB,QAAQ,GAAGG,WAAZ,GAA2BY,CAFxB;AAGVd,MAAAA,UAHU;AAIVD,MAAAA;AAJU,KAAD,CAJb,CADD,CADH,CADF;AAiBD;;AAEDiB,EAAAA,MAAM,GAAG;AACP,sBAaI,KAAKpC,KAbT;AAAA,QAAM;AACJqC,MAAAA,KADI;AAEJC,MAAAA,KAFI;AAGJb,MAAAA,OAHI;AAIJc,MAAAA,KAJI;AAKJC,MAAAA,aALI;AAMJb,MAAAA,UANI;AAOJtB,MAAAA,UAPI;AAQJF,MAAAA,QARI;AASJC,MAAAA,eATI;AAUJsB,MAAAA,kBAVI;AAWJE,MAAAA,YAAY,EAAZA;AAXI,KAAN;AAAA,QAYKa,SAZL;;AAeA,QAAM;AAAEnC,MAAAA;AAAF,QAAqB,KAAKI,KAAhC;AAEA,QAAM;AAAEgC,MAAAA,kBAAF;AAAsBpB,MAAAA,WAAtB;AAAmCqB,MAAAA;AAAnC,QAAoDhD,mBAAmB,CAAC;AAC5E6C,MAAAA,aAD4E;AAE5EpC,MAAAA,eAF4E;AAG5EE,MAAAA,cAH4E;AAI5EmB,MAAAA,OAJ4E;AAK5Ec,MAAAA;AAL4E,KAAD,CAA7E;AAQA,QAAM;AAAEf,MAAAA,cAAF;AAAkBD,MAAAA;AAAlB,QAA+B3B,cAAc,CAAC;AAClDS,MAAAA,UADkD;AAElDmC,MAAAA,aAFkD;AAGlDE,MAAAA,kBAHkD;AAIlDjB,MAAAA,OAJkD;AAKlDkB,MAAAA,YALkD;AAMlDJ,MAAAA;AANkD,KAAD,CAAnD;AASA,QAAMK,IAAI,GAAGlD,UAAU,CAAC2C,KAAD,EAAQf,WAAR,CAAvB;AAEA,WACE,oBAAC,QAAD;AACE,MAAA,IAAI,EAAEsB,IADR;AAEE,MAAA,UAAU,EAAE;AAAA,YAAC;AAAEX,UAAAA,IAAF;AAAQE,UAAAA;AAAR,SAAD;AAAA,eAAqB,KAAKlC,SAAL,CAAe;AAC9CiB,UAAAA,QAAQ,EAAEe,IADoC;AAE9Cd,UAAAA,QAAQ,EAAEgB,KAFoC;AAG9Cd,UAAAA,SAAS,EAAEc,KAAK,KAAKS,IAAI,CAACC,MAAL,GAAc,CAHW;AAI9CvB,UAAAA,WAJ8C;AAK9CC,UAAAA,QAL8C;AAM9CC,UAAAA;AAN8C,SAAf,CAArB;AAAA,OAFd;AAWE,MAAA,KAAK,EAAE,oBAECnB,UAAU,GAAG;AAAEyC,QAAAA,WAAW,EAAErB;AAAf,OAAH,GAA8B;AAAEsB,QAAAA,UAAU,EAAEtB;AAAd,OAFzC,GAILa,KAJK,CAXT;AAiBE,MAAA,QAAQ,EAAE,KAAKnC,QAjBjB;AAkBE,MAAA,YAAY,EAAE,CAACe,QAAD,EAAWiB,KAAX,KAAqB;AACjC,YAAIP,aAAJ,EAAkB;AAChB,iBAAOV,QAAQ,CAACc,GAAT,CAAa,CAACgB,OAAD,EAAUC,YAAV,KAA2B;AAC7C,mBAAOrB,aAAY,CAACoB,OAAD,EAAUC,YAAV,CAAnB;AACD,WAFM,EAEJC,IAFI,CAEC,GAFD,CAAP;AAGD,SAJD,MAIO;AACL,+BAAcf,KAAd;AACD;AACF;AA1BH,OA2BMM,SA3BN;AA4BE,MAAA,UAAU,EAAEpC,UA5Bd;AA6BE,MAAA,GAAG,EAAG8C,QAAD,IAAc;AAAE,aAAKA,QAAL,GAAgBA,QAAhB;AAA2B,OA7BlD;AAAA;AAAA;AAAA;AAAA;AAAA,OADF;AAiCD;;AA1JoC;;AA6JvCtD,QAAQ,CAACuD,SAAT,GAAqB;AACnBzB,EAAAA,UAAU,EAAElC,SAAS,CAAC4D,IAAV,CAAeC,UADR;AAEnBjB,EAAAA,KAAK,EAAE5C,SAAS,CAAC8D,OAAV,CAAkB9D,SAAS,CAAC+D,GAA5B,EAAiCF,UAFrB;AAGnBd,EAAAA,aAAa,EAAE/C,SAAS,CAACgE,MAHN;AAInBlB,EAAAA,KAAK,EAAE9C,SAAS,CAACiE,IAJE;AAKnBjC,EAAAA,OAAO,EAAEhC,SAAS,CAACgE,MALA;AAMnBnB,EAAAA,KAAK,EAAEqB,aAAa,CAACrB,KANF;AAOnBZ,EAAAA,kBAAkB,EAAEiC,aAAa,CAACrB,KAPf;AAQnBlC,EAAAA,eAAe,EAAEX,SAAS,CAACgE,MARR;AASnBpD,EAAAA,UAAU,EAAEZ,SAAS,CAACiE,IATH;AAUnBvD,EAAAA,QAAQ,EAAEV,SAAS,CAAC4D,IAVD;AAWnBO,EAAAA,OAAO,EAAEnE,SAAS,CAACoE;AAXA,CAArB;AAcAhE,QAAQ,CAACiE,YAAT,GAAwB;AACtBvB,EAAAA,KAAK,EAAE,KADe;AAEtBC,EAAAA,aAAa,EAAE,GAFO;AAGtBf,EAAAA,OAAO,EAAE,EAHa;AAItBa,EAAAA,KAAK,EAAE,EAJe;AAKtBZ,EAAAA,kBAAkB,EAAEqC,SALE;AAMtB3D,EAAAA,eAAe,EAAE2D,SANK;AAOtB1D,EAAAA,UAAU,EAAE,KAPU;AAQtBF,EAAAA,QAAQ,EAAE,IARY;AAStByD,EAAAA,OAAO,EAAEG;AATa,CAAxB;AAYA,eAAelE,QAAf","sourcesContent":["import React from 'react';\nimport {\n  View, Dimensions, ViewPropTypes, FlatList,\n} from 'react-native';\nimport PropTypes from 'prop-types';\nimport { chunkArray, calculateDimensions, generateStyles } from './utils';\n\n\nclass FlatGrid extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.renderRow = this.renderRow.bind(this);\n    this.onLayout = this.onLayout.bind(this);\n\n    const { staticDimension, horizontal } = props;\n\n    // Calculate total dimensions and set to state\n    let totalDimension = staticDimension;\n\n    if (!staticDimension) {\n      const dimension = horizontal ? 'height' : 'width';\n      totalDimension = Dimensions.get('window')[dimension];\n    }\n\n    this.state = {\n      totalDimension,\n    };\n  }\n\n  onLayout(e) {\n    const { staticDimension, horizontal, onLayout } = this.props;\n    const { totalDimension } = this.state;\n\n    if (!staticDimension) {\n      const { width, height } = e.nativeEvent.layout || {};\n      const newTotalDimension = horizontal ? height : width;\n\n      if (totalDimension !== newTotalDimension) {\n        this.setState({\n          totalDimension: newTotalDimension,\n        });\n      }\n    }\n\n    // call onLayout prop if passed\n    if (onLayout) {\n      onLayout(e);\n    }\n  }\n\n  renderRow({\n    rowItems,\n    rowIndex,\n    separators,\n    isLastRow,\n    itemsPerRow,\n    rowStyle,\n    containerStyle,\n  }) {\n    const {\n      spacing, horizontal, itemContainerStyle, renderItem, keyExtractor,\n    } = this.props;\n\n    // To make up for the top padding\n    let additionalRowStyle = {};\n    if (isLastRow) {\n      additionalRowStyle = {\n        ...(!horizontal ? { marginBottom: spacing } : {}),\n        ...(horizontal ? { marginRight: spacing } : {}),\n      };\n    }\n\n    return (\n      <View style={[rowStyle, additionalRowStyle]}>\n        {rowItems.map((item, i) => (\n          <View\n            key={keyExtractor ? keyExtractor(item, i) : `item_${(rowIndex * itemsPerRow) + i}`}\n            style={[containerStyle, itemContainerStyle]}\n          >\n            {renderItem({\n              item,\n              index: (rowIndex * itemsPerRow) + i,\n              separators,\n              rowIndex,\n            })}\n          </View>\n        ))}\n      </View>\n    );\n  }\n\n  render() {\n    const {\n      items,\n      style,\n      spacing,\n      fixed,\n      itemDimension,\n      renderItem,\n      horizontal,\n      onLayout,\n      staticDimension,\n      itemContainerStyle,\n      keyExtractor,\n      ...restProps\n    } = this.props;\n\n    const { totalDimension } = this.state;\n\n    const { containerDimension, itemsPerRow, fixedSpacing } = calculateDimensions({\n      itemDimension,\n      staticDimension,\n      totalDimension,\n      spacing,\n      fixed,\n    });\n\n    const { containerStyle, rowStyle } = generateStyles({\n      horizontal,\n      itemDimension,\n      containerDimension,\n      spacing,\n      fixedSpacing,\n      fixed,\n    });\n\n    const rows = chunkArray(items, itemsPerRow); // Splitting the data into rows\n\n    return (\n      <FlatList\n        data={rows}\n        renderItem={({ item, index }) => this.renderRow({\n          rowItems: item,\n          rowIndex: index,\n          isLastRow: index === rows.length - 1,\n          itemsPerRow,\n          rowStyle,\n          containerStyle,\n        })\n        }\n        style={[\n          {\n            ...(horizontal ? { paddingLeft: spacing } : { paddingTop: spacing }),\n          },\n          style,\n        ]}\n        onLayout={this.onLayout}\n        keyExtractor={(rowItems, index) => {\n          if (keyExtractor) {\n            return rowItems.map((rowItem, rowItemIndex) => {\n              return keyExtractor(rowItem, rowItemIndex)\n            }).join('_')\n          } else {\n            return `row_${index}`\n          }\n        }}\n        {...restProps}\n        horizontal={horizontal}\n        ref={(flatList) => { this.flatList = flatList; }}\n      />\n    );\n  }\n}\n\nFlatGrid.propTypes = {\n  renderItem: PropTypes.func.isRequired,\n  items: PropTypes.arrayOf(PropTypes.any).isRequired,\n  itemDimension: PropTypes.number,\n  fixed: PropTypes.bool,\n  spacing: PropTypes.number,\n  style: ViewPropTypes.style,\n  itemContainerStyle: ViewPropTypes.style,\n  staticDimension: PropTypes.number,\n  horizontal: PropTypes.bool,\n  onLayout: PropTypes.func,\n  listKey: PropTypes.string,\n};\n\nFlatGrid.defaultProps = {\n  fixed: false,\n  itemDimension: 120,\n  spacing: 10,\n  style: {},\n  itemContainerStyle: undefined,\n  staticDimension: undefined,\n  horizontal: false,\n  onLayout: null,\n  listKey: undefined,\n};\n\nexport default FlatGrid;\n"]},"metadata":{},"sourceType":"module"}