{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ansari\\\\Documents\\\\Github\\\\Mercy-USA-App\\\\node_modules\\\\react-native-material-kit\\\\lib\\\\mdl\\\\Slider.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectSpread2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { ViewPropTypes } from \"../utils\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { getTheme } from \"../theme\";\nimport Thumb from \"../internal/Thumb\";\nvar THUMB_SCALE_RATIO = 1.3;\nvar THUMB_BORDER_WIDTH = 2;\nvar TRACK_EXTRA_MARGIN_V = 5;\nvar TRACK_EXTRA_MARGIN_H = 5;\n\nclass Slider extends Component {\n  constructor(props) {\n    var _this;\n\n    super(props);\n    _this = this;\n\n    this._onTrackLayout = (_ref) => {\n      var {\n        nativeEvent: {\n          layout: {\n            width\n          }\n        }\n      } = _ref;\n\n      if (this._trackTotalLength !== width) {\n        this._trackTotalLength = width;\n\n        this._aniUpdateValue(this.value);\n      }\n    };\n\n    this._snap = function (val) {\n      var inc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this._defaultStepIncrement();\n      var current = Math.round(val);\n      var half = inc * 0.5;\n      var diff = current % inc;\n\n      if (diff >= half) {\n        var multiplier = Math.round(current / inc);\n        return inc * multiplier;\n      }\n\n      return current - diff;\n    };\n\n    this._defaultStepIncrement = () => this._toPixelScale(this.props.max) / ((this.props.max - this.props.min) / this.props.step);\n\n    this.theme = getTheme();\n    this._value = 0;\n    this._trackTotalLength = 0;\n    this._prevPointerX = 0;\n    this._animatedTrackLength = new Animated.Value(0);\n    this._panResponder = PanResponder.create({\n      onStartShouldSetPanResponder: () => true,\n      onStartShouldSetPanResponderCapture: () => true,\n      onMoveShouldSetPanResponder: () => true,\n      onMoveShouldSetPanResponderCapture: () => true,\n      onPanResponderGrant: evt => {\n        this._prevPointerX = evt.nativeEvent.locationX;\n\n        this._onTouchEvent({\n          type: 'TOUCH_DOWN',\n          x: this._prevPointerX\n        });\n      },\n      onPanResponderMove: (evt, gestureState) => {\n        this._onTouchEvent({\n          type: 'TOUCH_MOVE',\n          x: this._prevPointerX + gestureState.dx\n        });\n      },\n      onPanResponderTerminationRequest: () => false,\n      onPanResponderRelease: (evt, gestureState) => {\n        this._onPanResponderEnd(gestureState);\n      },\n      onPanResponderTerminate: (evt, gestureState) => {\n        this._onPanResponderEnd(gestureState, true);\n      },\n      onShouldBlockNativeResponder: () => true\n    });\n  }\n\n  componentWillMount() {\n    this._onThumbRadiiUpdate(this.props);\n\n    this._internalSetValue(this.props.value, false);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this._onThumbRadiiUpdate(nextProps);\n\n    this._internalSetValue(nextProps.value, false);\n\n    this._aniUpdateValue(nextProps.value);\n  }\n\n  _internalSetValue(value) {\n    var fireChange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    if (this._value === value) return;\n    this._value = value;\n\n    if (fireChange) {\n      this._emitChange(value);\n    }\n  }\n\n  _emitChange(newValue) {\n    if (this.props.onChange) {\n      this.props.onChange(newValue);\n    }\n  }\n\n  _emitOnPressIn() {\n    if (this.props.onPressIn) {\n      this.props.onPressIn();\n    }\n  }\n\n  _emitOnPressOut() {\n    if (this.props.onPressOut) {\n      this.props.onPressOut();\n    }\n  }\n\n  _emitConfirm() {\n    if (this.props.onConfirm) {\n      this.props.onConfirm(this._value);\n    }\n  }\n\n  _aniUpdateValue(value) {\n    if (!this._trackTotalLength) {\n      return;\n    }\n\n    var ratio = (value - this.props.min) / (this.props.max - this.props.min);\n    var x = ratio * this._trackTotalLength;\n\n    this._moveThumb(x);\n\n    this._confirmMoveThumb(x);\n  }\n\n  _onPanResponderEnd(gestureState, cancelled) {\n    if (!cancelled) {\n      this._prevPointerX = this._prevPointerX + gestureState.dx;\n    }\n\n    this._onTouchEvent({\n      type: cancelled ? 'TOUCH_CANCEL' : 'TOUCH_UP',\n      x: this._prevPointerX\n    });\n  }\n\n  _onTouchEvent(evt) {\n    switch (evt.type) {\n      case 'TOUCH_DOWN':\n        this._emitOnPressIn();\n\n        this._updateValueByTouch(evt);\n\n        break;\n\n      case 'TOUCH_MOVE':\n        this._updateValueByTouch(evt);\n\n        break;\n\n      case 'TOUCH_UP':\n        this._emitOnPressOut();\n\n        this._confirmUpdateValueByTouch(evt);\n\n        break;\n\n      case 'TOUCH_CANCEL':\n        this._emitOnPressOut();\n\n        this._confirmUpdateValueByTouch();\n\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  _getTouchOnTrack(evt) {\n    var x = Math.max(evt.x - this._trackMarginH, 0);\n    x = this._snap(Math.min(x, this._trackTotalLength));\n    var ratio = x / this._trackTotalLength;\n    return {\n      x,\n      ratio\n    };\n  }\n\n  _updateValueByTouch(evt) {\n    var {\n      x,\n      ratio\n    } = this._getTouchOnTrack(evt);\n\n    var _value = ratio * (this.props.max - this.props.min) + this.props.min;\n\n    this._internalSetValue(_value);\n\n    this._moveThumb(x);\n  }\n\n  _toSliderScale(value) {\n    var trackToRange = (this.props.max - this.props.min) / this._trackTotalLength;\n    return value * trackToRange + this.props.min;\n  }\n\n  _toPixelScale(value) {\n    var rangeToTrack = this._trackTotalLength / (this.props.max - this.props.min);\n    return (value - this.props.min) * rangeToTrack;\n  }\n\n  _confirmUpdateValueByTouch(evt) {\n    if (evt) {\n      var {\n        x\n      } = this._getTouchOnTrack(evt);\n\n      this._confirmMoveThumb(x);\n    } else {\n      this._confirmMoveThumb();\n    }\n\n    this._emitConfirm();\n  }\n\n  _moveThumb(x) {\n    this.refs.thumb.moveTo(x);\n    Animated.timing(this._animatedTrackLength, {\n      toValue: x,\n      duration: 0\n    }).start();\n  }\n\n  _confirmMoveThumb(x) {\n    this.refs.thumb.confirmMoveTo(x);\n  }\n\n  _onThumbRadiiUpdate(props) {\n    this._thumbRadii = props.thumbRadius;\n    this._thumbRadiiWithBorder = this._thumbRadii + THUMB_BORDER_WIDTH;\n    this._trackMarginV = this._thumbRadiiWithBorder * THUMB_SCALE_RATIO + TRACK_EXTRA_MARGIN_V - this.props.trackSize / 2;\n    this._trackMarginH = this._thumbRadiiWithBorder * THUMB_SCALE_RATIO + TRACK_EXTRA_MARGIN_H;\n  }\n\n  _verifyStep() {\n    var divisor = this.props.max / this.props.step;\n\n    if (divisor % 1 !== 0) {\n      throw new Error(\"Given step ( \".concat(this.props.step, \" ) must be a divisor of max ( \").concat(this.props.max, \" )\"));\n    }\n  }\n\n  render() {\n    this._verifyStep();\n\n    var trackMargin = {\n      marginLeft: this._trackMarginH,\n      marginRight: this._trackMarginH,\n      marginTop: this._trackMarginV,\n      marginBottom: this._trackMarginV\n    };\n    var sliderStyle = this.theme.sliderStyle;\n    var lowerTrackColor = this.props.lowerTrackColor || sliderStyle.lowerTrackColor;\n    var upperTrackColor = this.props.upperTrackColor || sliderStyle.upperTrackColor;\n    return React.createElement(View, _extends({\n      ref: \"container\",\n      style: [this.props.style, {\n        padding: 0,\n        paddingTop: 0,\n        paddingBottom: 0,\n        paddingLeft: 0,\n        paddingRight: 0\n      }],\n      pointerEvents: \"box-only\"\n    }, this._panResponder.panHandlers, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      }\n    }), React.createElement(View, {\n      ref: \"track\",\n      style: _objectSpread2({\n        height: this.props.trackSize,\n        backgroundColor: upperTrackColor\n      }, trackMargin),\n      onLayout: this._onTrackLayout,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      }\n    }, React.createElement(Animated.View, {\n      ref: \"lowerTrack\",\n      style: {\n        position: 'absolute',\n        width: this._animatedTrackLength,\n        height: this.props.trackSize,\n        backgroundColor: lowerTrackColor\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      }\n    })), React.createElement(Thumb, {\n      ref: \"thumb\",\n      radius: this.props.thumbRadius,\n      trackSize: this.props.trackSize,\n      trackMarginH: this._trackMarginH,\n      enabledColor: lowerTrackColor,\n      disabledColor: upperTrackColor,\n      touchPadding: this.props.thumbPadding,\n      style: {\n        top: this._thumbRadiiWithBorder * (THUMB_SCALE_RATIO - 1) + TRACK_EXTRA_MARGIN_V\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      }\n    }));\n  }\n\n}\n\nSlider.propTypes = _objectSpread2({}, ViewPropTypes || View.propTypes, {\n  min: PropTypes.number,\n  max: PropTypes.number,\n  value: PropTypes.number,\n  trackSize: PropTypes.number,\n  thumbRadius: PropTypes.number,\n  thumbPadding: PropTypes.number,\n  lowerTrackColor: PropTypes.string,\n  upperTrackColor: PropTypes.string,\n  onChange: PropTypes.func,\n  onPressIn: PropTypes.func,\n  onPressOut: PropTypes.func,\n  onConfirm: PropTypes.func,\n  step: PropTypes.number\n});\nSlider.defaultProps = {\n  thumbPadding: 0,\n  thumbRadius: 6,\n  trackSize: 2,\n  min: 0,\n  max: 100,\n  step: 1\n};\nObject.defineProperty(Slider.prototype, 'value', {\n  set(value) {\n    this._internalSetValue(value);\n\n    this._aniUpdateValue(value);\n  },\n\n  get() {\n    return this._value;\n  },\n\n  enumerable: true\n});\nmodule.exports = Slider;","map":{"version":3,"sources":["C:\\Users\\Ansari\\Documents\\Github\\Mercy-USA-App\\node_modules\\react-native-material-kit\\lib\\mdl\\Slider.js"],"names":["React","Component","PropTypes","ViewPropTypes","getTheme","Thumb","THUMB_SCALE_RATIO","THUMB_BORDER_WIDTH","TRACK_EXTRA_MARGIN_V","TRACK_EXTRA_MARGIN_H","Slider","constructor","props","_onTrackLayout","nativeEvent","layout","width","_trackTotalLength","_aniUpdateValue","value","_snap","val","inc","_defaultStepIncrement","current","Math","round","half","diff","multiplier","_toPixelScale","max","min","step","theme","_value","_prevPointerX","_animatedTrackLength","Animated","Value","_panResponder","PanResponder","create","onStartShouldSetPanResponder","onStartShouldSetPanResponderCapture","onMoveShouldSetPanResponder","onMoveShouldSetPanResponderCapture","onPanResponderGrant","evt","locationX","_onTouchEvent","type","x","onPanResponderMove","gestureState","dx","onPanResponderTerminationRequest","onPanResponderRelease","_onPanResponderEnd","onPanResponderTerminate","onShouldBlockNativeResponder","componentWillMount","_onThumbRadiiUpdate","_internalSetValue","componentWillReceiveProps","nextProps","fireChange","_emitChange","newValue","onChange","_emitOnPressIn","onPressIn","_emitOnPressOut","onPressOut","_emitConfirm","onConfirm","ratio","_moveThumb","_confirmMoveThumb","cancelled","_updateValueByTouch","_confirmUpdateValueByTouch","_getTouchOnTrack","_trackMarginH","_toSliderScale","trackToRange","rangeToTrack","refs","thumb","moveTo","timing","toValue","duration","start","confirmMoveTo","_thumbRadii","thumbRadius","_thumbRadiiWithBorder","_trackMarginV","trackSize","_verifyStep","divisor","Error","render","trackMargin","marginLeft","marginRight","marginTop","marginBottom","sliderStyle","lowerTrackColor","upperTrackColor","style","padding","paddingTop","paddingBottom","paddingLeft","paddingRight","panHandlers","height","backgroundColor","position","thumbPadding","top","propTypes","View","number","string","func","defaultProps","Object","defineProperty","prototype","set","get","enumerable","module","exports"],"mappings":"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","sourcesContent":["//\n// MDL style Slider component.\n//\n// - @see [MDL Slider](http://www.getmdl.io/components/index.html#sliders-section)\n// - [Props](#props)\n// - [Defaults](#defaults)\n//\n// Created by ywu on 15/8/23.\n//\n\nimport React, {\n  Component,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport { ViewPropTypes } from '../utils';\n\nimport {\n  Animated,\n  PanResponder,\n  View\n} from 'react-native';\n\nimport { getTheme } from '../theme';\nimport Thumb from '../internal/Thumb';\n\n// The max scale of the thumb\nconst THUMB_SCALE_RATIO = 1.3;\n\n// Width of the thumb border\nconst THUMB_BORDER_WIDTH = 2;\n\n// extra spacing enlarging the touchable area\nconst TRACK_EXTRA_MARGIN_V = 5;\nconst TRACK_EXTRA_MARGIN_H = 5;\n\n\n// ## <section id='Slider'>Slider</section>\nclass Slider extends Component {\n  // region Static property initializers\n  // ## <section id='props'>Props</section>\n  static propTypes = {\n    // [RN.View Props](https://facebook.github.io/react-native/docs/view.html#props)...\n    ...(ViewPropTypes || View.propTypes),\n\n    // Minimum value of the range, default is `0`\n    min: PropTypes.number,\n\n    // Maximum value of the range, default is `100`\n    max: PropTypes.number,\n\n    // Current value\n    value: PropTypes.number,\n\n    // The thickness of the Slider track\n    trackSize: PropTypes.number,\n\n    // Radius of the thumb of the Slider\n    thumbRadius: PropTypes.number,\n\n    // Padding for the hitSlop on the Slider thumb\n    thumbPadding: PropTypes.number,\n\n    // Color of the lower part of the track, it's also the color of the thumb\n    lowerTrackColor: PropTypes.string,\n\n    // Color of the upper part of the track\n    upperTrackColor: PropTypes.string,\n\n    // Callback when value changed\n    onChange: PropTypes.func,\n\n    // Callback when slider is pressed anywhere\n    onPressIn: PropTypes.func,\n\n    // Callback when slider stops being pressed\n    onPressOut: PropTypes.func,\n\n    // Callback when the value is confirmed\n    onConfirm: PropTypes.func,\n\n    // Step value of the RangeSlider, must be a divisor of max\n    step: PropTypes.number,\n  };\n\n  // ## <section id='defaults'>Defaults</section>\n  static defaultProps = {\n    thumbPadding: 0,\n    thumbRadius: 6,\n    trackSize: 2,\n    min: 0,\n    max: 100,\n    step: 1,\n  };\n  // endregion\n\n  constructor(props) {\n    super(props);\n    this.theme = getTheme();\n    this._value = 0;\n    this._trackTotalLength = 0;\n    this._prevPointerX = 0;\n    this._animatedTrackLength = new Animated.Value(0);\n    this._panResponder = PanResponder.create({\n      onStartShouldSetPanResponder: () => true,\n      onStartShouldSetPanResponderCapture: () => true,\n      onMoveShouldSetPanResponder: () => true,\n      onMoveShouldSetPanResponderCapture: () => true,\n      onPanResponderGrant: (evt) => {\n        this._prevPointerX = evt.nativeEvent.locationX;\n        this._onTouchEvent({\n          type: 'TOUCH_DOWN',\n          x: this._prevPointerX,\n        });\n      },\n      onPanResponderMove: (evt, gestureState) => {\n        this._onTouchEvent({\n          type: 'TOUCH_MOVE',\n          x: this._prevPointerX + gestureState.dx,\n        });\n      },\n      onPanResponderTerminationRequest: () => false,\n      onPanResponderRelease: (evt, gestureState) => {\n        this._onPanResponderEnd(gestureState);\n      },\n      onPanResponderTerminate: (evt, gestureState) => {\n        this._onPanResponderEnd(gestureState, true);\n      },\n      onShouldBlockNativeResponder: () => true,\n    });\n  }\n\n  componentWillMount() {\n    this._onThumbRadiiUpdate(this.props);\n    this._internalSetValue(this.props.value, false);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this._onThumbRadiiUpdate(nextProps);\n    this._internalSetValue(nextProps.value, false);\n    this._aniUpdateValue(nextProps.value);\n  }\n\n  // region Property initializers\n  _onTrackLayout = ({ nativeEvent: { layout: { width } } }) => {\n    if (this._trackTotalLength !== width) {\n      this._trackTotalLength = width;\n      this._aniUpdateValue(this.value);\n    }\n  };\n  // endregion\n\n  _internalSetValue(value, fireChange = true) {\n    if (this._value === value) return;\n    this._value = value;\n    if (fireChange) {\n      this._emitChange(value);\n    }\n  }\n\n  _emitChange(newValue) {\n    if (this.props.onChange) {\n      this.props.onChange(newValue);\n    }\n  }\n\n  _emitOnPressIn() {\n    if (this.props.onPressIn) {\n      this.props.onPressIn();\n    }\n  }\n\n  _emitOnPressOut() {\n    if (this.props.onPressOut) {\n      this.props.onPressOut();\n    }\n  }\n\n  _emitConfirm() {\n    if (this.props.onConfirm) {\n      this.props.onConfirm(this._value);\n    }\n  }\n\n  _aniUpdateValue(value) {\n    if (!this._trackTotalLength) {\n      return;\n    }\n\n    const ratio = (value - this.props.min) / (this.props.max - this.props.min);\n    const x = ratio * this._trackTotalLength;\n    this._moveThumb(x);\n    this._confirmMoveThumb(x);\n  }\n\n  _onPanResponderEnd(gestureState, cancelled) {\n    if (!cancelled) {\n      this._prevPointerX = this._prevPointerX + gestureState.dx;\n    }\n\n    this._onTouchEvent({\n      type: cancelled ? 'TOUCH_CANCEL' : 'TOUCH_UP',\n      x: this._prevPointerX,\n    });\n  }\n\n  // Touch events handling\n  _onTouchEvent(evt) {\n    switch (evt.type) {\n      case 'TOUCH_DOWN':\n        this._emitOnPressIn();\n        this._updateValueByTouch(evt);\n        break;\n      case 'TOUCH_MOVE':\n        this._updateValueByTouch(evt);\n        break;\n      case 'TOUCH_UP':\n        this._emitOnPressOut();\n        this._confirmUpdateValueByTouch(evt);\n        break;\n      case 'TOUCH_CANCEL':\n        // should not use the coordination inside a cancelled event\n        this._emitOnPressOut();\n        this._confirmUpdateValueByTouch();\n        break;\n      default:\n        break;\n    }\n  }\n\n  // get touch position relative to the track\n  _getTouchOnTrack(evt) {\n    // touch location relative to the track\n    let x = Math.max(evt.x - this._trackMarginH, 0);\n    x = this._snap(Math.min(x, this._trackTotalLength));\n\n    const ratio = x / this._trackTotalLength;\n\n    return { x, ratio };\n  }\n\n  _updateValueByTouch(evt) {\n    const { x, ratio } = this._getTouchOnTrack(evt);\n    const _value = ratio * (this.props.max - this.props.min) + this.props.min;\n    this._internalSetValue(_value);  // report changes in 'real-time'\n    this._moveThumb(x);\n  }\n\n  // Scale global xy coordinate values to track values\n  _toSliderScale(value) {\n    const trackToRange = (this.props.max - this.props.min) / this._trackTotalLength;\n    return (value * trackToRange) + this.props.min;\n  }\n\n  // Scale track values to global xy coordinate system\n  _toPixelScale(value) {\n    const rangeToTrack = this._trackTotalLength / (this.props.max - this.props.min);\n    return (value - this.props.min) * rangeToTrack;\n  }\n\n  // Snap thumb by step, default step = 1\n  _snap = (val, inc = this._defaultStepIncrement()) => {\n    const current = Math.round(val);\n    const half = inc * 0.5;\n    const diff = current % inc;\n\n    if (diff >= half) {\n      const multiplier = Math.round(current / inc);\n      return (inc * multiplier);\n    }\n\n    return (current - diff);\n  }\n\n  _defaultStepIncrement = () =>\n    this._toPixelScale(this.props.max) / ((this.props.max - this.props.min) / (this.props.step));\n\n  _confirmUpdateValueByTouch(evt) {\n    if (evt) {\n      const { x } = this._getTouchOnTrack(evt);\n      this._confirmMoveThumb(x);\n    } else {\n      this._confirmMoveThumb();\n    }\n    this._emitConfirm();\n  }\n\n  _moveThumb(x) {\n    this.refs.thumb.moveTo(x);\n\n    Animated.timing(this._animatedTrackLength, {\n      toValue: x,\n      duration: 0,\n    }).start();\n  }\n\n  _confirmMoveThumb(x) {\n    this.refs.thumb.confirmMoveTo(x);\n  }\n\n  // when thumb radii updated, re-calc the dimens\n  _onThumbRadiiUpdate(props) {\n    this._thumbRadii = props.thumbRadius;\n    this._thumbRadiiWithBorder = this._thumbRadii + THUMB_BORDER_WIDTH;\n    this._trackMarginV = this._thumbRadiiWithBorder * THUMB_SCALE_RATIO +\n      TRACK_EXTRA_MARGIN_V - this.props.trackSize / 2;\n    this._trackMarginH = this._thumbRadiiWithBorder * THUMB_SCALE_RATIO +\n      TRACK_EXTRA_MARGIN_H;\n  }\n\n  _verifyStep() {\n    const divisor = this.props.max / this.props.step;\n    if (divisor % 1 !== 0) {\n      throw new Error(\n        `Given step ( ${this.props.step} ) must be a divisor of max ( ${this.props.max} )`\n      );\n    }\n  }\n\n  render() {\n    this._verifyStep();\n    // making room for the Thumb, cause's Android doesn't support `overflow: visible`\n    // - @see http://bit.ly/1Fzr5SE\n    const trackMargin = {\n      marginLeft: this._trackMarginH,\n      marginRight: this._trackMarginH,\n      marginTop: this._trackMarginV,\n      marginBottom: this._trackMarginV,\n    };\n\n    const sliderStyle = this.theme.sliderStyle;\n    const lowerTrackColor = this.props.lowerTrackColor || sliderStyle.lowerTrackColor;\n    const upperTrackColor = this.props.upperTrackColor || sliderStyle.upperTrackColor;\n\n    return (\n      <View ref=\"container\"\n        style={[this.props.style, {\n          padding: 0,\n          paddingTop: 0,\n          paddingBottom: 0,\n          paddingLeft: 0,\n          paddingRight: 0,\n        }]}\n        pointerEvents=\"box-only\"\n        {...this._panResponder.panHandlers}\n      >\n        <View ref=\"track\"\n          style={{\n            height: this.props.trackSize,\n            backgroundColor: upperTrackColor,\n            ...trackMargin,\n          }}\n          onLayout={this._onTrackLayout}\n        >\n          <Animated.View\n            ref=\"lowerTrack\"\n            style={{\n              position: 'absolute',\n              width: this._animatedTrackLength,\n              height: this.props.trackSize,\n              backgroundColor: lowerTrackColor,\n            }}\n          />\n        </View>\n        <Thumb\n          ref=\"thumb\"\n          radius={this.props.thumbRadius}\n          trackSize={this.props.trackSize}\n          trackMarginH={this._trackMarginH}\n          enabledColor={lowerTrackColor}\n          disabledColor={upperTrackColor}\n          touchPadding={this.props.thumbPadding}\n          style={{\n            top: this._thumbRadiiWithBorder * (THUMB_SCALE_RATIO - 1) + TRACK_EXTRA_MARGIN_V,\n          }}\n        />\n      </View>\n    );\n  }\n}\n\n// Public api to update the current value\nObject.defineProperty(Slider.prototype, 'value', {\n  set(value) {\n    this._internalSetValue(value);\n    this._aniUpdateValue(value);\n  },\n  get() {\n    return this._value;\n  },\n  enumerable: true,\n});\n\n\n// ## Public interface\nmodule.exports = Slider;\n"]},"metadata":{},"sourceType":"module"}