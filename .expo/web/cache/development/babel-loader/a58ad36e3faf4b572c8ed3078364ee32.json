{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ansari\\\\Documents\\\\Github\\\\Mercy-USA-App\\\\node_modules\\\\react-native-material-kit\\\\lib\\\\mdl\\\\Checkbox.js\";\n\nfunction _objectSpread2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport MKColor from \"../MKColor\";\nimport Ripple from \"./Ripple\";\nimport Tick from \"../internal/Tick\";\nimport * as utils from \"../utils\";\nimport { getTheme } from \"../theme\";\nvar DEFAULT_EXTRA_RIPPLE_RADII = 5;\n\nclass Checkbox extends Component {\n  constructor(props) {\n    super(props);\n\n    this._onLayout = (_ref) => {\n      var {\n        nativeEvent: {\n          layout: {\n            width,\n            height\n          }\n        }\n      } = _ref;\n\n      if (width === this.state.width && height === this.state.height) {\n        return;\n      }\n\n      var size = Math.min(width, height);\n      var rippleRadii = size * Math.SQRT2 / 2 + (this.props.extraRippleRadius || DEFAULT_EXTRA_RIPPLE_RADII);\n      this.setState({\n        rippleRadii,\n        width: rippleRadii * 2,\n        height: rippleRadii * 2\n      });\n    };\n\n    this._onTouch = evt => {\n      if (evt.type === 'TOUCH_UP' && this.props.editable) {\n        this.confirmToggle();\n      }\n    };\n\n    this.theme = getTheme();\n    this._animatedTickAlpha = new Animated.Value(0);\n    this.state = {\n      checked: false,\n      width: 0,\n      height: 0,\n      rippleRadii: 0\n    };\n  }\n\n  componentWillMount() {\n    this._initView(this.props.checked);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.checked !== this.props.checked) {\n      this._initView(nextProps.checked);\n    }\n  }\n\n  _initView(checked) {\n    this.setState({\n      checked\n    });\n\n    this._aniToggle(checked);\n  }\n\n  confirmToggle() {\n    var prevState = this.state.checked;\n    var newState = !prevState;\n    this.setState({\n      checked: newState\n    }, () => {\n      if (this.props.onCheckedChange) {\n        this.props.onCheckedChange({\n          checked: this.state.checked\n        });\n      }\n    });\n\n    this._aniToggle(newState);\n  }\n\n  _aniToggle(checked) {\n    Animated.timing(this._animatedTickAlpha, {\n      toValue: checked ? 1 : 0,\n      duration: 220\n    }).start();\n  }\n\n  render() {\n    var defaultStyle = this.theme.checkboxStyle;\n\n    var mergedStyle = _extends({}, defaultStyle, utils.extractProps(this, ['borderOnColor', 'borderOffColor', 'fillColor', 'rippleColor', 'inset']));\n\n    var borderColor = this.state.checked ? mergedStyle.borderOnColor : mergedStyle.borderOffColor;\n    return React.createElement(TouchableWithoutFeedback, _extends({}, utils.extractTouchableProps(this), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      }\n    }), React.createElement(Ripple, _extends({}, this.props, {\n      maskBorderRadiusInPercent: 50,\n      rippleLocation: \"center\",\n      rippleColor: mergedStyle.rippleColor,\n      onTouch: this._onTouch,\n      style: {\n        justifyContent: 'center',\n        alignItems: 'center',\n        width: this.state.width,\n        height: this.state.height\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      }\n    }), React.createElement(View, {\n      ref: \"container\",\n      style: [Checkbox.defaultProps.style, this.props.style, {\n        borderColor,\n        alignItems: 'stretch'\n      }],\n      onLayout: this._onLayout,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      }\n    }, React.createElement(Tick.animated, {\n      ref: \"tick\",\n      inset: mergedStyle.inset,\n      fillColor: mergedStyle.fillColor,\n      style: {\n        flex: 1,\n        opacity: this._animatedTickAlpha\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      }\n    }))));\n  }\n\n}\n\nCheckbox.propTypes = _objectSpread2({}, Ripple.propTypes, {}, Tick.propTypes, {}, TouchableWithoutFeedback.propTypes, {\n  borderOnColor: PropTypes.string,\n  borderOffColor: PropTypes.string,\n  fillColor: PropTypes.string,\n  checked: PropTypes.bool,\n  onCheckedChange: PropTypes.func,\n  extraRippleRadius: PropTypes.number,\n  editable: PropTypes.bool\n});\nCheckbox.defaultProps = {\n  pointerEvents: 'box-only',\n  maskColor: MKColor.Transparent,\n  editable: true,\n  style: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: 20,\n    height: 20,\n    borderWidth: 2,\n    borderRadius: 1\n  }\n};\nmodule.exports = Checkbox;","map":{"version":3,"sources":["C:\\Users\\Ansari\\Documents\\Github\\Mercy-USA-App\\node_modules\\react-native-material-kit\\lib\\mdl\\Checkbox.js"],"names":["React","Component","PropTypes","MKColor","Ripple","Tick","utils","getTheme","DEFAULT_EXTRA_RIPPLE_RADII","Checkbox","constructor","props","_onLayout","nativeEvent","layout","width","height","state","size","Math","min","rippleRadii","SQRT2","extraRippleRadius","setState","_onTouch","evt","type","editable","confirmToggle","theme","_animatedTickAlpha","Animated","Value","checked","componentWillMount","_initView","componentWillReceiveProps","nextProps","_aniToggle","prevState","newState","onCheckedChange","timing","toValue","duration","start","render","defaultStyle","checkboxStyle","mergedStyle","extractProps","borderColor","borderOnColor","borderOffColor","extractTouchableProps","rippleColor","justifyContent","alignItems","defaultProps","style","inset","fillColor","flex","opacity","propTypes","TouchableWithoutFeedback","string","bool","func","number","pointerEvents","maskColor","Transparent","borderWidth","borderRadius","module","exports"],"mappings":"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","sourcesContent":["//\n// MDL-style Checkbox component.\n//\n// - @see [MDL Checkbox](http://www.getmdl.io/components/index.html#toggles-section/checkbox)\n// - [Props](#props)\n// - [Defaults](#defaults)\n//\n// Created by ywu on 15/12/13.\n//\n\nimport React, {\n  Component,\n} from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Animated,\n  TouchableWithoutFeedback,\n  View,\n} from 'react-native';\n\nimport MKColor from '../MKColor';\nimport Ripple from './Ripple';\nimport Tick from '../internal/Tick';\nimport * as utils from '../utils';\nimport { getTheme } from '../theme';\n\nconst DEFAULT_EXTRA_RIPPLE_RADII = 5;\n\n//\n// ## <section id='Checkbox'>Checkbox</section>\n// The `Checkbox` component.\nclass Checkbox extends Component {\n\n  // ## <section id='props'>Props</section>\n  static propTypes = {\n    // [Ripple Props](Ripple.html#props)...\n    ...Ripple.propTypes,\n\n    // [Tick Props](../internal/Tick.html#props)...\n    ...Tick.propTypes,\n\n    // Touchable...\n    ...TouchableWithoutFeedback.propTypes,\n\n    // Color of the border (outer circle), when checked\n    borderOnColor: PropTypes.string,\n\n    // Color of the border (outer circle), when unchecked\n    borderOffColor: PropTypes.string,\n\n    // Color of the inner circle, when checked\n    fillColor: PropTypes.string,\n\n    // Toggle status\n    checked: PropTypes.bool,\n\n    // Callback when the toggle status is changed\n    onCheckedChange: PropTypes.func,\n\n    // How far the ripple can extend outside the Checkbox's border,\n    // default is 5\n    extraRippleRadius: PropTypes.number,\n\n    // Toggle Editable\n    editable: PropTypes.bool,\n  };\n\n  // ## <section id='defaults'>Defaults</section>\n  static defaultProps = {\n    pointerEvents: 'box-only',\n    maskColor: MKColor.Transparent,\n    editable: true,\n    style: {\n      justifyContent: 'center',\n      alignItems: 'center',\n      width: 20,\n      height: 20,\n      borderWidth: 2,\n      borderRadius: 1,\n    },\n  };\n\n  constructor(props) {\n    super(props);\n    this.theme = getTheme();\n    this._animatedTickAlpha = new Animated.Value(0);\n    this.state = {\n      checked: false,\n      width: 0,\n      height: 0,\n      rippleRadii: 0,\n    };\n  }\n\n  componentWillMount() {\n    this._initView(this.props.checked);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.checked !== this.props.checked) {\n      this._initView(nextProps.checked);\n    }\n  }\n\n  // property initializers begin\n  _onLayout = ({ nativeEvent: { layout: { width, height } } }) => {\n    if (width === this.state.width && height === this.state.height) {\n      return;\n    }\n\n    const size = Math.min(width, height);\n    const rippleRadii = size * Math.SQRT2 / 2 + (this.props.extraRippleRadius ||\n      DEFAULT_EXTRA_RIPPLE_RADII);\n    this.setState({\n      rippleRadii,\n      width: rippleRadii * 2,\n      height: rippleRadii * 2,\n    });\n  };\n\n  // Touch events handling\n  _onTouch = (evt) => {\n    if (evt.type === 'TOUCH_UP' && this.props.editable) {\n      this.confirmToggle();\n    }\n  };\n  // property initializers end\n\n  _initView(checked) {\n    this.setState({ checked });\n    this._aniToggle(checked);\n  }\n\n  // When a toggle action (from the given state) is confirmed.\n  confirmToggle() {\n    const prevState = this.state.checked;\n    const newState = !prevState;\n\n    this.setState({ checked: newState }, () => {\n      if (this.props.onCheckedChange) {\n        this.props.onCheckedChange({ checked: this.state.checked });\n      }\n    });\n\n    this._aniToggle(newState);\n  }\n\n  // animate the checked state, by scaling the inner circle\n  _aniToggle(checked) {\n    Animated.timing(this._animatedTickAlpha, {\n      toValue: checked ? 1 : 0,\n      duration: 220,\n    }).start();\n  }\n\n  render() {\n    const defaultStyle = this.theme.checkboxStyle;\n    const mergedStyle = Object.assign({}, defaultStyle, utils.extractProps(this, [\n      'borderOnColor',\n      'borderOffColor',\n      'fillColor',\n      'rippleColor',\n      'inset',\n    ]));\n    const borderColor = this.state.checked ? mergedStyle.borderOnColor : mergedStyle.borderOffColor;\n\n    return (\n      <TouchableWithoutFeedback {...utils.extractTouchableProps(this)} >\n        <Ripple\n          {...this.props}\n          maskBorderRadiusInPercent={50}\n          rippleLocation=\"center\"\n          rippleColor={mergedStyle.rippleColor}\n          onTouch={this._onTouch}\n          style={{\n            justifyContent: 'center',\n            alignItems: 'center',\n            width: this.state.width,\n            height: this.state.height,\n          }}\n        >\n          <View ref=\"container\"\n            style={[\n              Checkbox.defaultProps.style,\n              this.props.style, {\n                borderColor,\n                alignItems: 'stretch',\n              },\n            ]}\n            onLayout={this._onLayout}\n          >\n            <Tick.animated ref=\"tick\"\n              inset={mergedStyle.inset}\n              fillColor={mergedStyle.fillColor}\n              style={{\n                flex: 1,\n                opacity: this._animatedTickAlpha,\n              }}\n            />\n          </View>\n        </Ripple>\n      </TouchableWithoutFeedback>\n    );\n  }\n}\n\n\n// ## Public interface\nmodule.exports = Checkbox;\n"]},"metadata":{},"sourceType":"module"}