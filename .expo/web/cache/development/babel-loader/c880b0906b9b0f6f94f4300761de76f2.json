{"ast":null,"code":"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactNative from \"react-native-web/dist/index\";\nimport DeviceEventEmitter from \"react-native-web/dist/exports/DeviceEventEmitter\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nvar ScrollViewManager = NativeModules.ScrollViewManager;\nexport default class KeyboardAwareBase extends Component {\n  constructor(props) {\n    super(props);\n\n    this._bind('_onKeyboardWillShow', '_onKeyboardWillHide', '_addKeyboardEventListeners', '_removeKeyboardListeners', '_scrollToFocusedTextInput', '_onKeyboardAwareViewLayout', 'scrollToBottom', 'scrollBottomOnNextSizeChange');\n\n    this.state = {\n      keyboardHeight: 0\n    };\n\n    this._addKeyboardEventListeners();\n  }\n\n  _bind() {\n    for (var _len = arguments.length, methods = new Array(_len), _key = 0; _key < _len; _key++) {\n      methods[_key] = arguments[_key];\n    }\n\n    methods.forEach(method => {\n      this[method] = this[method].bind(this);\n    });\n  }\n\n  _addKeyboardEventListeners() {\n    var KeyboardEventsObj = Keyboard || DeviceEventEmitter;\n    this.keyboardEventListeners = [KeyboardEventsObj.addListener('keyboardWillShow', this._onKeyboardWillShow), KeyboardEventsObj.addListener('keyboardWillHide', this._onKeyboardWillHide)];\n  }\n\n  _removeKeyboardListeners() {\n    this.keyboardEventListeners.forEach(eventListener => eventListener.remove());\n  }\n\n  componentDidMount() {\n    if (this._keyboardAwareView && this.props.startScrolledToBottom) {\n      this.scrollToBottom(false);\n      setTimeout(() => this._keyboardAwareView.setNativeProps({\n        opacity: 1\n      }), 100);\n    }\n  }\n\n  _onKeyboardAwareViewLayout(layout) {\n    this._keyboardAwareView.layout = layout;\n    this._keyboardAwareView.contentOffset = {\n      x: 0,\n      y: 0\n    };\n\n    this._updateKeyboardAwareViewContentSize();\n  }\n\n  _onKeyboardAwareViewScroll(contentOffset) {\n    this._keyboardAwareView.contentOffset = contentOffset;\n\n    this._updateKeyboardAwareViewContentSize();\n  }\n\n  _updateKeyboardAwareViewContentSize() {\n    if (ScrollViewManager && ScrollViewManager.getContentSize) {\n      ScrollViewManager.getContentSize(ReactNative.findNodeHandle(this._keyboardAwareView), res => {\n        if (this._keyboardAwareView) {\n          this._keyboardAwareView.contentSize = res;\n\n          if (this.state.scrollBottomOnNextSizeChange) {\n            this.scrollToBottom();\n            this.state.scrollBottomOnNextSizeChange = false;\n          }\n        }\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this._removeKeyboardListeners();\n  }\n\n  _scrollToFocusedTextInput() {\n    if (this.props.getTextInputRefs) {\n      var textInputRefs = this.props.getTextInputRefs();\n      textInputRefs.some((textInputRef, index, array) => {\n        var isFocusedFunc = textInputRef.isFocused();\n        var isFocused = isFocusedFunc && typeof isFocusedFunc === \"function\" ? isFocusedFunc() : isFocusedFunc;\n\n        if (isFocused) {\n          setTimeout(() => {\n            this._keyboardAwareView.getScrollResponder().scrollResponderScrollNativeHandleToKeyboard(ReactNative.findNodeHandle(textInputRef), this.props.scrollToInputAdditionalOffset, true);\n          }, 0);\n        }\n\n        return isFocused;\n      });\n    }\n  }\n\n  _onKeyboardWillShow(event) {\n    this._scrollToFocusedTextInput();\n\n    var newKeyboardHeight = event.endCoordinates.height;\n\n    if (this.state.keyboardHeight === newKeyboardHeight) {\n      return;\n    }\n\n    this.setState({\n      keyboardHeight: newKeyboardHeight\n    });\n\n    if (this.props.scrollToBottomOnKBShow) {\n      this.scrollToBottom();\n    }\n  }\n\n  _onKeyboardWillHide(event) {\n    var keyboardHeight = this.state.keyboardHeight;\n    this.setState({\n      keyboardHeight: 0\n    });\n    var hasYOffset = this._keyboardAwareView && this._keyboardAwareView.contentOffset && this._keyboardAwareView.contentOffset.y !== undefined;\n    var yOffset = hasYOffset ? Math.max(this._keyboardAwareView.contentOffset.y - keyboardHeight, 0) : 0;\n\n    this._keyboardAwareView.scrollTo({\n      x: 0,\n      y: yOffset,\n      animated: true\n    });\n  }\n\n  scrollBottomOnNextSizeChange() {\n    this.state.scrollBottomOnNextSizeChange = true;\n  }\n\n  scrollToBottom() {\n    var scrollAnimated = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n    if (this._keyboardAwareView) {\n      if (!this._keyboardAwareView.contentSize) {\n        setTimeout(() => this.scrollToBottom(scrollAnimated), 50);\n        return;\n      }\n\n      var bottomYOffset = this._keyboardAwareView.contentSize.height - this._keyboardAwareView.layout.height + this._keyboardAwareView.props.contentInset.bottom;\n\n      this._keyboardAwareView.scrollTo({\n        x: 0,\n        y: bottomYOffset,\n        animated: scrollAnimated\n      });\n    }\n  }\n\n  scrollTo(options) {\n    if (this._keyboardAwareView) this._keyboardAwareView.scrollTo(options);\n  }\n\n}\nKeyboardAwareBase.propTypes = {\n  startScrolledToBottom: PropTypes.bool,\n  scrollToBottomOnKBShow: PropTypes.bool,\n  scrollToInputAdditionalOffset: PropTypes.number\n};\nKeyboardAwareBase.defaultProps = {\n  startScrolledToBottom: false,\n  scrollToBottomOnKBShow: false,\n  scrollToInputAdditionalOffset: 75\n};","map":{"version":3,"sources":["C:\\Users\\Ansari\\Documents\\Github\\Mercy-USA-App\\node_modules\\react-native-keyboard-aware-scrollview\\src\\KeyboardAwareBase.js"],"names":["React","Component","PropTypes","ReactNative","ScrollViewManager","NativeModules","KeyboardAwareBase","constructor","props","_bind","state","keyboardHeight","_addKeyboardEventListeners","methods","forEach","method","bind","KeyboardEventsObj","Keyboard","DeviceEventEmitter","keyboardEventListeners","addListener","_onKeyboardWillShow","_onKeyboardWillHide","_removeKeyboardListeners","eventListener","remove","componentDidMount","_keyboardAwareView","startScrolledToBottom","scrollToBottom","setTimeout","setNativeProps","opacity","_onKeyboardAwareViewLayout","layout","contentOffset","x","y","_updateKeyboardAwareViewContentSize","_onKeyboardAwareViewScroll","getContentSize","findNodeHandle","res","contentSize","scrollBottomOnNextSizeChange","componentWillUnmount","_scrollToFocusedTextInput","getTextInputRefs","textInputRefs","some","textInputRef","index","array","isFocusedFunc","isFocused","getScrollResponder","scrollResponderScrollNativeHandleToKeyboard","scrollToInputAdditionalOffset","event","newKeyboardHeight","endCoordinates","height","setState","scrollToBottomOnKBShow","hasYOffset","undefined","yOffset","Math","max","scrollTo","animated","scrollAnimated","bottomYOffset","contentInset","bottom","options","propTypes","bool","number","defaultProps"],"mappings":"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","sourcesContent":["\nimport React , { Component } from 'react';\nimport PropTypes from 'prop-types';\n\n\nimport ReactNative, {\n  DeviceEventEmitter,\n  Keyboard,\n  NativeModules,\n} from 'react-native';\n\nconst ScrollViewManager = NativeModules.ScrollViewManager;\n\nexport default class KeyboardAwareBase extends Component {\n  constructor(props) {\n    super(props);\n    this._bind('_onKeyboardWillShow', '_onKeyboardWillHide', '_addKeyboardEventListeners', '_removeKeyboardListeners', '_scrollToFocusedTextInput', '_onKeyboardAwareViewLayout', 'scrollToBottom', 'scrollBottomOnNextSizeChange');\n    this.state = {keyboardHeight: 0};\n    this._addKeyboardEventListeners();\n  }\n  \n  _bind(...methods) {\n    methods.forEach((method) => {\n      this[method] = this[method].bind(this);\n    });\n  }\n  \n  _addKeyboardEventListeners() {\n    const KeyboardEventsObj = Keyboard || DeviceEventEmitter;\n    this.keyboardEventListeners = [\n      KeyboardEventsObj.addListener('keyboardWillShow', this._onKeyboardWillShow),\n      KeyboardEventsObj.addListener('keyboardWillHide', this._onKeyboardWillHide)\n    ];\n  }\n  \n  _removeKeyboardListeners() {\n    this.keyboardEventListeners.forEach((eventListener) => eventListener.remove());\n  }\n\n  componentDidMount() {\n    if(this._keyboardAwareView && this.props.startScrolledToBottom) {\n      this.scrollToBottom(false);\n      setTimeout(() => this._keyboardAwareView.setNativeProps({ opacity: 1 }), 100);\n    }\n  }\n\n  _onKeyboardAwareViewLayout(layout) {\n    this._keyboardAwareView.layout = layout;\n    this._keyboardAwareView.contentOffset = {x: 0, y: 0};\n    this._updateKeyboardAwareViewContentSize();\n  }\n\n  _onKeyboardAwareViewScroll(contentOffset) {\n    this._keyboardAwareView.contentOffset = contentOffset;\n    this._updateKeyboardAwareViewContentSize();\n  }\n\n  _updateKeyboardAwareViewContentSize() {\n    if(ScrollViewManager && ScrollViewManager.getContentSize) {\n      ScrollViewManager.getContentSize(ReactNative.findNodeHandle(this._keyboardAwareView), (res)=> {\n        if(this._keyboardAwareView) {\n          this._keyboardAwareView.contentSize = res;\n          if(this.state.scrollBottomOnNextSizeChange) {\n            this.scrollToBottom();\n            this.state.scrollBottomOnNextSizeChange = false;\n          }\n        }\n      })\n    }\n  }\n\n  componentWillUnmount() {\n    this._removeKeyboardListeners();\n  }\n  \n  _scrollToFocusedTextInput() {\n    if (this.props.getTextInputRefs) {\n      const textInputRefs = this.props.getTextInputRefs();\n      textInputRefs.some((textInputRef, index, array) => {\n        const isFocusedFunc = textInputRef.isFocused();\n        const isFocused = isFocusedFunc && (typeof isFocusedFunc === \"function\") ? isFocusedFunc() : isFocusedFunc;\n        if (isFocused) {\n          setTimeout(() => {\n            this._keyboardAwareView.getScrollResponder().scrollResponderScrollNativeHandleToKeyboard(\n              ReactNative.findNodeHandle(textInputRef), this.props.scrollToInputAdditionalOffset, true);\n          }, 0);\n        }\n        return isFocused;\n      });\n    }\n  }\n  \n  _onKeyboardWillShow(event) {\n    this._scrollToFocusedTextInput();\n    \n    const newKeyboardHeight = event.endCoordinates.height;\n    if (this.state.keyboardHeight === newKeyboardHeight) {\n      return;\n    }\n    \n    this.setState({keyboardHeight: newKeyboardHeight});\n\n    if(this.props.scrollToBottomOnKBShow) {\n      this.scrollToBottom();\n    }\n  }\n\n  _onKeyboardWillHide(event) {\n    const keyboardHeight = this.state.keyboardHeight;\n    this.setState({keyboardHeight: 0});\n\n    const hasYOffset = this._keyboardAwareView && this._keyboardAwareView.contentOffset && this._keyboardAwareView.contentOffset.y !== undefined;\n    const yOffset = hasYOffset ? Math.max(this._keyboardAwareView.contentOffset.y - keyboardHeight, 0) : 0;\n    this._keyboardAwareView.scrollTo({x: 0, y: yOffset, animated: true});\n  }\n\n  scrollBottomOnNextSizeChange() {\n    this.state.scrollBottomOnNextSizeChange = true;\n  }\n\n  scrollToBottom(scrollAnimated = true) {\n    if (this._keyboardAwareView) {\n\n      if(!this._keyboardAwareView.contentSize) {\n        setTimeout(() => this.scrollToBottom(scrollAnimated), 50);\n        return;\n      }\n\n      const bottomYOffset = this._keyboardAwareView.contentSize.height - this._keyboardAwareView.layout.height + this._keyboardAwareView.props.contentInset.bottom;\n      this._keyboardAwareView.scrollTo({x: 0, y: bottomYOffset, animated: scrollAnimated});\n    }\n  }\n  scrollTo(options) {\n    if (this._keyboardAwareView) this._keyboardAwareView.scrollTo(options);\n  }\n}\n\nKeyboardAwareBase.propTypes = {\n  startScrolledToBottom: PropTypes.bool,\n  scrollToBottomOnKBShow: PropTypes.bool,\n  scrollToInputAdditionalOffset: PropTypes.number\n};\nKeyboardAwareBase.defaultProps = {\n  startScrolledToBottom: false,\n  scrollToBottomOnKBShow: false,\n  scrollToInputAdditionalOffset: 75\n};\n"]},"metadata":{},"sourceType":"module"}