{"ast":null,"code":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { getTheme } from \"./theme\";\n\nfunction capitalize(str) {\n  return str.substring(0, 1).toUpperCase() + str.substring(1);\n}\n\nclass Builder {\n  static defineProp(name) {\n    var methodName = \"with\".concat(capitalize(name));\n\n    if (this.prototype[methodName]) {\n      return;\n    }\n\n    Object.defineProperty(this.prototype, methodName, {\n      enumerable: false,\n\n      value(v) {\n        this[name] = v;\n        return this;\n      }\n\n    });\n  }\n\n  static defineProps(propTypes) {\n    var filter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => true;\n    var self = this;\n    Object.getOwnPropertyNames(propTypes).forEach(prop => {\n      if (!self.hasOwnProperty(prop) && filter(prop)) {\n        Builder.defineProp.call(self, prop);\n      }\n    });\n  }\n\n  getTheme() {\n    return getTheme();\n  }\n\n  withAccent(v) {\n    this.accent = v;\n    return this;\n  }\n\n  withBackgroundColor(color) {\n    this.backgroundColor = color;\n    return this;\n  }\n\n  withStyle(v) {\n    this.style = this.style ? [this.style, v] : v;\n    return this;\n  }\n\n  build() {}\n\n  toProps() {\n    this.mergeStyle();\n    return _extends({}, this);\n  }\n\n  getThemeColor() {\n    return this.accent ? getTheme().accentColor : getTheme().primaryColor;\n  }\n\n  mergeStyle() {\n    this.mergeStyleWith({\n      backgroundColor: this.backgroundColor\n    });\n  }\n\n  choseBackgroundColor() {\n    this.backgroundColor = this.backgroundColor || this.getThemeColor();\n  }\n\n  mergeStyleWith(base) {\n    this.style = [].concat(base, this.style);\n  }\n\n}\n\nclass TextViewBuilder extends Builder {\n  withText(text) {\n    this.text = text;\n    return this;\n  }\n\n  withTextStyle(style) {\n    this.textStyle = style;\n    return this;\n  }\n\n  mergeTextStyleWith(base) {\n    this.textStyle = [].concat(base, this.textStyle);\n  }\n\n  mergeStyle() {\n    super.mergeStyle();\n    this.mergeStyleWith({\n      padding: 8,\n      justifyContent: 'center',\n      alignItems: 'center'\n    });\n    this.mergeTextStyleWith({\n      fontSize: getTheme().fontSize\n    });\n  }\n\n}\n\nexports.Builder = Builder;\nexports.TextViewBuilder = TextViewBuilder;","map":{"version":3,"sources":["C:\\Users\\Ansari\\Documents\\Github\\Mercy-USA-App\\node_modules\\react-native-material-kit\\lib\\builder.js"],"names":["getTheme","capitalize","str","substring","toUpperCase","Builder","defineProp","name","methodName","prototype","Object","defineProperty","enumerable","value","v","defineProps","propTypes","filter","self","getOwnPropertyNames","forEach","prop","hasOwnProperty","call","withAccent","accent","withBackgroundColor","color","backgroundColor","withStyle","style","build","toProps","mergeStyle","getThemeColor","accentColor","primaryColor","mergeStyleWith","choseBackgroundColor","base","concat","TextViewBuilder","withText","text","withTextStyle","textStyle","mergeTextStyleWith","padding","justifyContent","alignItems","fontSize","exports"],"mappings":"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","sourcesContent":["//\n// Boilerplate for styling MK Components\n// - [Builder](#Builder)\n// - [TextViewBuilder](#TextViewBuilder)\n//\n// Created by ywu on 15/7/16.\n//\nimport { getTheme } from './theme';\n\nfunction capitalize(str) {\n  return str.substring(0, 1).toUpperCase() + str.substring(1);\n}\n\n\n//\n// ## <section id='Builder'>Builder</section>\n// Base class of MK Component builder\n//\nclass Builder {\n\n  // Define builder method `withXxx` for prop `xxx`\n  static defineProp(name) {\n    const methodName = `with${capitalize(name)}`;\n    if (this.prototype[methodName]) {\n      return;\n    }\n\n    Object.defineProperty(this.prototype, methodName, {\n      enumerable: false,\n      value(v) {\n        this[name] = v;\n        return this;\n      },\n    });\n  }\n\n  // Convenient util to define a builder method for each prop of the component\n  // - {`object`} `propTypes` propTypes of the given component\n  // - {`():boolean`} `filter` predictor to determine which prop would has a builder method\n  static defineProps(propTypes, filter = () => true) {\n    const self = this;\n    Object.getOwnPropertyNames(propTypes).forEach((prop) => {\n      if (!self.hasOwnProperty(prop) && filter(prop)) {\n        Builder.defineProp.call(self, prop);\n      }\n    });\n  }\n\n  getTheme() {\n    return getTheme();\n  }\n\n  withAccent(v) {\n    this.accent = v;\n    return this;\n  }\n\n  withBackgroundColor(color) {\n    this.backgroundColor = color;\n    return this;\n  }\n\n  withStyle(v) {\n    this.style = this.style ? [this.style, v] : v;\n    return this;\n  }\n\n  build() {\n  }\n\n  toProps() {\n    this.mergeStyle();\n    return Object.assign({}, this);\n  }\n\n  getThemeColor() {\n    return this.accent ? getTheme().accentColor : getTheme().primaryColor;\n  }\n\n  mergeStyle() {\n    this.mergeStyleWith({\n      backgroundColor: this.backgroundColor,\n    });\n  }\n\n  choseBackgroundColor() {\n    this.backgroundColor = this.backgroundColor || this.getThemeColor();\n  }\n\n  mergeStyleWith(base) {\n    this.style = [].concat(base, this.style);\n  }\n}\n\n\n//\n// ## <section id='TextViewBuilder'>TextViewBuilder</section>\n// Text-based component builder\n//\nclass TextViewBuilder extends Builder {\n  withText(text) {\n    this.text = text;\n    return this;\n  }\n\n  withTextStyle(style) {\n    this.textStyle = style;\n    return this;\n  }\n\n  mergeTextStyleWith(base) {\n    this.textStyle = [].concat(base, this.textStyle);\n  }\n\n  mergeStyle() {\n    super.mergeStyle();\n    this.mergeStyleWith({\n      padding: 8,\n      justifyContent: 'center',\n      alignItems: 'center',\n    });\n    this.mergeTextStyleWith({\n      fontSize: getTheme().fontSize,\n    });\n  }\n}\n\n\n// ## Public interface\nexports.Builder = Builder;\nexports.TextViewBuilder = TextViewBuilder;\n"]},"metadata":{},"sourceType":"module"}