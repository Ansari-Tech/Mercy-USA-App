{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ansari\\\\Documents\\\\Github\\\\Mercy-USA-App\\\\node_modules\\\\react-native-calendars\\\\src\\\\calendar-list\\\\index.js\";\n\nfunction _objectSpread2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { Component } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport View from \"react-native-web/dist/exports/View\";\nimport PropTypes from 'prop-types';\nimport XDate from 'xdate';\nimport { xdateToData, parseDate } from \"../interface\";\nimport styleConstructor from \"./style\";\nimport dateutils from \"../dateutils\";\nimport Calendar from \"../calendar\";\nimport CalendarListItem from \"./item\";\nimport CalendarHeader from \"../calendar/header/index\";\nimport { STATIC_HEADER } from \"../testIDs\";\nvar {\n  width\n} = Dimensions.get('window');\n\nclass CalendarList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.addMonth = count => {\n      this.updateMonth(this.state.currentMonth.clone().addMonths(count, true));\n    };\n\n    this.style = styleConstructor(props.theme);\n    this.viewabilityConfig = {\n      itemVisiblePercentThreshold: 20\n    };\n    var rows = [];\n    var texts = [];\n    var date = parseDate(props.current) || XDate();\n\n    for (var i = 0; i <= this.props.pastScrollRange + this.props.futureScrollRange; i++) {\n      var rangeDate = date.clone().addMonths(i - this.props.pastScrollRange, true);\n      var rangeDateStr = rangeDate.toString('MMM yyyy');\n      texts.push(rangeDateStr);\n\n      if (this.props.pastScrollRange - 1 <= i && i <= this.props.pastScrollRange + 1 || !this.props.pastScrollRange && i <= this.props.pastScrollRange + 2) {\n        rows.push(rangeDate);\n      } else {\n        rows.push(rangeDateStr);\n      }\n    }\n\n    this.state = {\n      rows,\n      texts,\n      openDate: date,\n      currentMonth: parseDate(props.current)\n    };\n    this.onViewableItemsChangedBound = this.onViewableItemsChanged.bind(this);\n    this.renderCalendarBound = this.renderCalendar.bind(this);\n    this.getItemLayout = this.getItemLayout.bind(this);\n    this.onLayout = this.onLayout.bind(this);\n  }\n\n  onLayout(event) {\n    if (this.props.onLayout) {\n      this.props.onLayout(event);\n    }\n  }\n\n  scrollToDay(d, offset, animated) {\n    var day = parseDate(d);\n    var diffMonths = Math.round(this.state.openDate.clone().setDate(1).diffMonths(day.clone().setDate(1)));\n    var size = this.props.horizontal ? this.props.calendarWidth : this.props.calendarHeight;\n    var scrollAmount = size * this.props.pastScrollRange + diffMonths * size + (offset || 0);\n\n    if (!this.props.horizontal) {\n      var week = 0;\n      var days = dateutils.page(day, this.props.firstDay);\n\n      for (var i = 0; i < days.length; i++) {\n        week = Math.floor(i / 7);\n\n        if (dateutils.sameDate(days[i], day)) {\n          scrollAmount += 46 * week;\n          break;\n        }\n      }\n    }\n\n    this.listView.scrollToOffset({\n      offset: scrollAmount,\n      animated\n    });\n  }\n\n  scrollToMonth(m) {\n    var month = parseDate(m);\n    var scrollTo = month || this.state.openDate;\n    var diffMonths = Math.round(this.state.openDate.clone().setDate(1).diffMonths(scrollTo.clone().setDate(1)));\n    var size = this.props.horizontal ? this.props.calendarWidth : this.props.calendarHeight;\n    var scrollAmount = size * this.props.pastScrollRange + diffMonths * size;\n    this.listView.scrollToOffset({\n      offset: scrollAmount,\n      animated: false\n    });\n  }\n\n  componentWillReceiveProps(props) {\n    var current = parseDate(this.props.current);\n    var nextCurrent = parseDate(props.current);\n\n    if (nextCurrent && current && nextCurrent.getTime() !== current.getTime()) {\n      this.scrollToMonth(nextCurrent);\n    }\n\n    var rowclone = this.state.rows;\n    var newrows = [];\n\n    for (var i = 0; i < rowclone.length; i++) {\n      var val = this.state.texts[i];\n\n      if (rowclone[i].getTime) {\n        val = rowclone[i].clone();\n        val.propbump = rowclone[i].propbump ? rowclone[i].propbump + 1 : 1;\n      }\n\n      newrows.push(val);\n    }\n\n    this.setState({\n      rows: newrows\n    });\n  }\n\n  onViewableItemsChanged(_ref) {\n    var {\n      viewableItems\n    } = _ref;\n\n    function rowIsCloseToViewable(index, distance) {\n      for (var i = 0; i < viewableItems.length; i++) {\n        if (Math.abs(index - parseInt(viewableItems[i].index)) <= distance) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    var rowclone = this.state.rows;\n    var newrows = [];\n    var visibleMonths = [];\n\n    for (var i = 0; i < rowclone.length; i++) {\n      var val = rowclone[i];\n      var rowShouldBeRendered = rowIsCloseToViewable(i, 1);\n\n      if (rowShouldBeRendered && !rowclone[i].getTime) {\n        val = this.state.openDate.clone().addMonths(i - this.props.pastScrollRange, true);\n      } else if (!rowShouldBeRendered) {\n        val = this.state.texts[i];\n      }\n\n      newrows.push(val);\n\n      if (rowIsCloseToViewable(i, 0)) {\n        visibleMonths.push(xdateToData(val));\n      }\n    }\n\n    if (this.props.onVisibleMonthsChange) {\n      this.props.onVisibleMonthsChange(visibleMonths);\n    }\n\n    this.setState({\n      rows: newrows,\n      currentMonth: parseDate(visibleMonths[0])\n    });\n  }\n\n  renderCalendar(_ref2) {\n    var {\n      item\n    } = _ref2;\n    return React.createElement(CalendarListItem, _extends({\n      scrollToMonth: this.scrollToMonth.bind(this),\n      item: item,\n      calendarHeight: this.props.calendarHeight,\n      calendarWidth: this.props.horizontal ? this.props.calendarWidth : undefined\n    }, this.props, {\n      style: this.props.calendarStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      }\n    }));\n  }\n\n  getItemLayout(data, index) {\n    return {\n      length: this.props.horizontal ? this.props.calendarWidth : this.props.calendarHeight,\n      offset: (this.props.horizontal ? this.props.calendarWidth : this.props.calendarHeight) * index,\n      index\n    };\n  }\n\n  getMonthIndex(month) {\n    var diffMonths = this.state.openDate.diffMonths(month) + this.props.pastScrollRange;\n    return diffMonths;\n  }\n\n  updateMonth(day, doNotTriggerListeners) {\n    if (day.toString('yyyy MM') === this.state.currentMonth.toString('yyyy MM')) {\n      return;\n    }\n\n    this.setState({\n      currentMonth: day.clone()\n    }, () => {\n      this.scrollToMonth(this.state.currentMonth);\n\n      if (!doNotTriggerListeners) {\n        var currMont = this.state.currentMonth.clone();\n\n        if (this.props.onMonthChange) {\n          this.props.onMonthChange(xdateToData(currMont));\n        }\n\n        if (this.props.onVisibleMonthsChange) {\n          this.props.onVisibleMonthsChange([xdateToData(currMont)]);\n        }\n      }\n    });\n  }\n\n  renderStaticHeader() {\n    var {\n      staticHeader,\n      horizontal\n    } = this.props;\n    var useStaticHeader = staticHeader && horizontal;\n\n    if (useStaticHeader) {\n      var indicator;\n\n      if (this.props.showIndicator) {\n        indicator = React.createElement(ActivityIndicator, {\n          color: this.props.theme && this.props.theme.indicatorColor,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 263\n          }\n        });\n      }\n\n      return React.createElement(CalendarHeader, {\n        style: [this.style.staticHeader, this.props.headerStyle],\n        month: this.state.currentMonth,\n        addMonth: this.addMonth,\n        showIndicator: indicator,\n        theme: this.props.theme,\n        hideArrows: this.props.hideArrows,\n        firstDay: this.props.firstDay,\n        renderArrow: this.props.renderArrow,\n        monthFormat: this.props.monthFormat,\n        hideDayNames: this.props.hideDayNames,\n        weekNumbers: this.props.showWeekNumbers,\n        onPressArrowLeft: this.props.onPressArrowLeft,\n        onPressArrowRight: this.props.onPressArrowRight,\n        testID: STATIC_HEADER,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267\n        }\n      });\n    }\n  }\n\n  render() {\n    return React.createElement(View, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      }\n    }, React.createElement(FlatList, {\n      onLayout: this.onLayout,\n      ref: c => this.listView = c,\n      style: [this.style.container, this.props.style],\n      initialListSize: this.props.pastScrollRange + this.props.futureScrollRange + 1,\n      data: this.state.rows,\n      removeClippedSubviews: this.props.removeClippedSubviews,\n      pageSize: 1,\n      horizontal: this.props.horizontal,\n      pagingEnabled: this.props.pagingEnabled,\n      onViewableItemsChanged: this.onViewableItemsChangedBound,\n      viewabilityConfig: this.viewabilityConfig,\n      renderItem: this.renderCalendarBound,\n      showsVerticalScrollIndicator: this.props.showScrollIndicator,\n      showsHorizontalScrollIndicator: this.props.showScrollIndicator,\n      scrollEnabled: this.props.scrollEnabled,\n      keyExtractor: (item, index) => String(index),\n      initialScrollIndex: this.state.openDate ? this.getMonthIndex(this.state.openDate) : false,\n      getItemLayout: this.getItemLayout,\n      scrollsToTop: this.props.scrollsToTop,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      }\n    }), this.renderStaticHeader());\n  }\n\n}\n\nCalendarList.displayName = 'CalendarList';\nCalendarList.propTypes = _objectSpread2({}, Calendar.propTypes, {\n  pastScrollRange: PropTypes.number,\n  futureScrollRange: PropTypes.number,\n  scrollEnabled: PropTypes.bool,\n  showScrollIndicator: PropTypes.bool,\n  scrollsToTop: PropTypes.bool,\n  pagingEnabled: PropTypes.bool,\n  horizontal: PropTypes.bool,\n  calendarWidth: PropTypes.number,\n  calendarHeight: PropTypes.number,\n  calendarStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array]),\n  staticHeader: PropTypes.bool\n});\nCalendarList.defaultProps = {\n  horizontal: false,\n  calendarWidth: width,\n  calendarHeight: 360,\n  pastScrollRange: 50,\n  futureScrollRange: 50,\n  showScrollIndicator: false,\n  scrollEnabled: true,\n  scrollsToTop: false,\n  removeClippedSubviews: Platform.OS === 'android' ? false : true\n};\nexport default CalendarList;","map":{"version":3,"sources":["C:\\Users\\Ansari\\Documents\\Github\\Mercy-USA-App\\node_modules\\react-native-calendars\\src\\calendar-list\\index.js"],"names":["React","Component","PropTypes","XDate","xdateToData","parseDate","styleConstructor","dateutils","Calendar","CalendarListItem","CalendarHeader","STATIC_HEADER","width","Dimensions","get","CalendarList","constructor","props","addMonth","count","updateMonth","state","currentMonth","clone","addMonths","style","theme","viewabilityConfig","itemVisiblePercentThreshold","rows","texts","date","current","i","pastScrollRange","futureScrollRange","rangeDate","rangeDateStr","toString","push","openDate","onViewableItemsChangedBound","onViewableItemsChanged","bind","renderCalendarBound","renderCalendar","getItemLayout","onLayout","event","scrollToDay","d","offset","animated","day","diffMonths","Math","round","setDate","size","horizontal","calendarWidth","calendarHeight","scrollAmount","week","days","page","firstDay","length","floor","sameDate","listView","scrollToOffset","scrollToMonth","m","month","scrollTo","componentWillReceiveProps","nextCurrent","getTime","rowclone","newrows","val","propbump","setState","viewableItems","rowIsCloseToViewable","index","distance","abs","parseInt","visibleMonths","rowShouldBeRendered","onVisibleMonthsChange","item","undefined","calendarStyle","data","getMonthIndex","doNotTriggerListeners","currMont","onMonthChange","renderStaticHeader","staticHeader","useStaticHeader","indicator","showIndicator","indicatorColor","headerStyle","hideArrows","renderArrow","monthFormat","hideDayNames","showWeekNumbers","onPressArrowLeft","onPressArrowRight","render","c","container","removeClippedSubviews","pagingEnabled","showScrollIndicator","scrollEnabled","String","scrollsToTop","displayName","propTypes","number","bool","oneOfType","object","array","defaultProps","Platform","OS"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport {FlatList, Platform, Dimensions, ActivityIndicator, View} from 'react-native';\r\nimport PropTypes from 'prop-types';\r\nimport XDate from 'xdate';\r\n\r\nimport {xdateToData, parseDate} from '../interface';\r\nimport styleConstructor from './style';\r\nimport dateutils from '../dateutils';\r\nimport Calendar from '../calendar';\r\nimport CalendarListItem from './item';\r\nimport CalendarHeader from '../calendar/header/index';\r\nimport {STATIC_HEADER} from '../testIDs';\r\n\r\n\r\nconst {width} = Dimensions.get('window');\r\n\r\n/**\r\n * @description: Calendar List component for both vertical and horizontal calendars\r\n * @extends: Calendar\r\n * @extendslink: docs/Calendar\r\n * @example: https://github.com/wix/react-native-calendars/blob/master/example/src/screens/calendarsList.js\r\n * @gif: https://github.com/wix/react-native-calendars/blob/master/demo/calendar-list.gif\r\n */\r\nclass CalendarList extends Component {\r\n  static displayName = 'CalendarList';\r\n\r\n  static propTypes = {\r\n    ...Calendar.propTypes,\r\n    /** Max amount of months allowed to scroll to the past. Default = 50 */\r\n    pastScrollRange: PropTypes.number,\r\n    /** Max amount of months allowed to scroll to the future. Default = 50 */\r\n    futureScrollRange: PropTypes.number,\r\n    /** Enable or disable scrolling of calendar list */\r\n    scrollEnabled: PropTypes.bool,\r\n    /** Enable or disable vertical scroll indicator. Default = false */\r\n    showScrollIndicator: PropTypes.bool,\r\n    /** When true, the calendar list scrolls to top when the status bar is tapped. Default = true */\r\n    scrollsToTop: PropTypes.bool,\r\n    /** Enable or disable paging on scroll */\r\n    pagingEnabled: PropTypes.bool,\r\n    /** Whether the scroll is horizontal */\r\n    horizontal: PropTypes.bool,\r\n    /** Used when calendar scroll is horizontal, default is device width, pagination should be disabled */\r\n    calendarWidth: PropTypes.number,\r\n    /** Dynamic calendar height */\r\n    calendarHeight: PropTypes.number,\r\n    /** Style for the List item (the calendar) */\r\n    calendarStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array]),\r\n    /** Whether to use static header that will not scroll with the list (horizontal only) */\r\n    staticHeader: PropTypes.bool\r\n  }\r\n\r\n  static defaultProps = {\r\n    horizontal: false,\r\n    calendarWidth: width,\r\n    calendarHeight: 360,\r\n    pastScrollRange: 50,\r\n    futureScrollRange: 50,\r\n    showScrollIndicator: false,\r\n    scrollEnabled: true,\r\n    scrollsToTop: false,\r\n    removeClippedSubviews: Platform.OS === 'android' ? false : true\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.style = styleConstructor(props.theme);\r\n    \r\n    this.viewabilityConfig = {\r\n      itemVisiblePercentThreshold: 20\r\n    };\r\n\r\n    const rows = [];\r\n    const texts = [];\r\n    const date = parseDate(props.current) || XDate();\r\n    \r\n    for (let i = 0; i <= this.props.pastScrollRange + this.props.futureScrollRange; i++) {\r\n      const rangeDate = date.clone().addMonths(i - this.props.pastScrollRange, true);\r\n      const rangeDateStr = rangeDate.toString('MMM yyyy');\r\n      texts.push(rangeDateStr);\r\n      /*\r\n       * This selects range around current shown month [-0, +2] or [-1, +1] month for detail calendar rendering.\r\n       * If `this.pastScrollRange` is `undefined` it's equal to `false` or 0 in next condition.\r\n       */\r\n      if (this.props.pastScrollRange - 1 <= i && i <= this.props.pastScrollRange + 1 || !this.props.pastScrollRange && i <= this.props.pastScrollRange + 2) {\r\n        rows.push(rangeDate);\r\n      } else {\r\n        rows.push(rangeDateStr);\r\n      }\r\n    }\r\n\r\n    this.state = {\r\n      rows,\r\n      texts,\r\n      openDate: date,\r\n      currentMonth: parseDate(props.current)\r\n    };\r\n\r\n    this.onViewableItemsChangedBound = this.onViewableItemsChanged.bind(this);\r\n    this.renderCalendarBound = this.renderCalendar.bind(this);\r\n    this.getItemLayout = this.getItemLayout.bind(this);\r\n    this.onLayout = this.onLayout.bind(this);\r\n  }\r\n\r\n  onLayout(event) {\r\n    if (this.props.onLayout) {\r\n      this.props.onLayout(event);\r\n    }\r\n  }\r\n\r\n  scrollToDay(d, offset, animated) {\r\n    const day = parseDate(d);\r\n    const diffMonths = Math.round(this.state.openDate.clone().setDate(1).diffMonths(day.clone().setDate(1)));\r\n    const size = this.props.horizontal ? this.props.calendarWidth : this.props.calendarHeight;\r\n    let scrollAmount = (size * this.props.pastScrollRange) + (diffMonths * size) + (offset || 0);\r\n    \r\n    if (!this.props.horizontal) {\r\n      let week = 0;\r\n      const days = dateutils.page(day, this.props.firstDay);\r\n      for (let i = 0; i < days.length; i++) {\r\n        week = Math.floor(i / 7);\r\n        if (dateutils.sameDate(days[i], day)) {\r\n          scrollAmount += 46 * week;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    this.listView.scrollToOffset({offset: scrollAmount, animated});\r\n  }\r\n\r\n  scrollToMonth(m) {\r\n    const month = parseDate(m);\r\n    const scrollTo = month || this.state.openDate;\r\n    let diffMonths = Math.round(this.state.openDate.clone().setDate(1).diffMonths(scrollTo.clone().setDate(1)));\r\n    const size = this.props.horizontal ? this.props.calendarWidth : this.props.calendarHeight;\r\n    const scrollAmount = (size * this.props.pastScrollRange) + (diffMonths * size);\r\n\r\n    this.listView.scrollToOffset({offset: scrollAmount, animated: false});\r\n  }\r\n\r\n  componentWillReceiveProps(props) {\r\n    const current = parseDate(this.props.current);\r\n    const nextCurrent = parseDate(props.current);\r\n    \r\n    if (nextCurrent && current && nextCurrent.getTime() !== current.getTime()) {\r\n      this.scrollToMonth(nextCurrent);\r\n    }\r\n\r\n    const rowclone = this.state.rows;\r\n    const newrows = [];\r\n    \r\n    for (let i = 0; i < rowclone.length; i++) {\r\n      let val = this.state.texts[i];\r\n      if (rowclone[i].getTime) {\r\n        val = rowclone[i].clone();\r\n        val.propbump = rowclone[i].propbump ? rowclone[i].propbump + 1 : 1;\r\n      }\r\n      newrows.push(val);\r\n    }\r\n    this.setState({\r\n      rows: newrows\r\n    });\r\n  }\r\n\r\n  onViewableItemsChanged({viewableItems}) {\r\n    function rowIsCloseToViewable(index, distance) {\r\n      for (let i = 0; i < viewableItems.length; i++) {\r\n        if (Math.abs(index - parseInt(viewableItems[i].index)) <= distance) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    }\r\n\r\n    const rowclone = this.state.rows;\r\n    const newrows = [];\r\n    const visibleMonths = [];\r\n    \r\n    for (let i = 0; i < rowclone.length; i++) {\r\n      let val = rowclone[i];\r\n      const rowShouldBeRendered = rowIsCloseToViewable(i, 1);\r\n      \r\n      if (rowShouldBeRendered && !rowclone[i].getTime) {\r\n        val = this.state.openDate.clone().addMonths(i - this.props.pastScrollRange, true);\r\n      } else if (!rowShouldBeRendered) {\r\n        val = this.state.texts[i];\r\n      }\r\n      newrows.push(val);\r\n      if (rowIsCloseToViewable(i, 0)) {\r\n        visibleMonths.push(xdateToData(val));\r\n      }\r\n    }\r\n    \r\n    if (this.props.onVisibleMonthsChange) {\r\n      this.props.onVisibleMonthsChange(visibleMonths);\r\n    }\r\n\r\n    this.setState({\r\n      rows: newrows,\r\n      currentMonth: parseDate(visibleMonths[0])\r\n    });\r\n  }\r\n\r\n  renderCalendar({item}) {\r\n    return (\r\n      <CalendarListItem\r\n        scrollToMonth={this.scrollToMonth.bind(this)}\r\n        item={item} \r\n        calendarHeight={this.props.calendarHeight} \r\n        calendarWidth={this.props.horizontal ? this.props.calendarWidth : undefined} \r\n        {...this.props} \r\n        style={this.props.calendarStyle}\r\n      />\r\n    );\r\n  }\r\n\r\n  getItemLayout(data, index) {\r\n    return {\r\n      length: this.props.horizontal ? this.props.calendarWidth : this.props.calendarHeight, \r\n      offset: (this.props.horizontal ? this.props.calendarWidth : this.props.calendarHeight) * index, index\r\n    };\r\n  }\r\n\r\n  getMonthIndex(month) {\r\n    let diffMonths = this.state.openDate.diffMonths(month) + this.props.pastScrollRange;\r\n    return diffMonths;\r\n  }\r\n\r\n  addMonth = (count) => {\r\n    this.updateMonth(this.state.currentMonth.clone().addMonths(count, true));\r\n  }\r\n\r\n  updateMonth(day, doNotTriggerListeners) {\r\n    if (day.toString('yyyy MM') === this.state.currentMonth.toString('yyyy MM')) {\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      currentMonth: day.clone()\r\n    }, () => {\r\n      this.scrollToMonth(this.state.currentMonth);\r\n      \r\n      if (!doNotTriggerListeners) {\r\n        const currMont = this.state.currentMonth.clone();\r\n        if (this.props.onMonthChange) {\r\n          this.props.onMonthChange(xdateToData(currMont));\r\n        }\r\n        if (this.props.onVisibleMonthsChange) {\r\n          this.props.onVisibleMonthsChange([xdateToData(currMont)]);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  renderStaticHeader() {\r\n    const {staticHeader, horizontal} = this.props;\r\n    const useStaticHeader = staticHeader && horizontal;\r\n    \r\n    if (useStaticHeader) {\r\n      let indicator;\r\n      if (this.props.showIndicator) {\r\n        indicator = <ActivityIndicator color={this.props.theme && this.props.theme.indicatorColor}/>;\r\n      }\r\n\r\n      return (\r\n        <CalendarHeader\r\n          style={[this.style.staticHeader, this.props.headerStyle]}\r\n          month={this.state.currentMonth}\r\n          addMonth={this.addMonth}\r\n          showIndicator={indicator}\r\n          theme={this.props.theme}\r\n          hideArrows={this.props.hideArrows}\r\n          firstDay={this.props.firstDay}\r\n          renderArrow={this.props.renderArrow}\r\n          monthFormat={this.props.monthFormat}\r\n          hideDayNames={this.props.hideDayNames}\r\n          weekNumbers={this.props.showWeekNumbers}\r\n          onPressArrowLeft={this.props.onPressArrowLeft}\r\n          onPressArrowRight={this.props.onPressArrowRight}\r\n          testID={STATIC_HEADER}\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <View>\r\n        <FlatList\r\n          onLayout={this.onLayout}\r\n          ref={(c) => this.listView = c}\r\n          //scrollEventThrottle={1000}\r\n          style={[this.style.container, this.props.style]}\r\n          initialListSize={this.props.pastScrollRange + this.props.futureScrollRange + 1}\r\n          data={this.state.rows}\r\n          //snapToAlignment='start'\r\n          //snapToInterval={this.calendarHeight}\r\n          removeClippedSubviews={this.props.removeClippedSubviews}\r\n          pageSize={1}\r\n          horizontal={this.props.horizontal}\r\n          pagingEnabled={this.props.pagingEnabled}\r\n          onViewableItemsChanged={this.onViewableItemsChangedBound}\r\n          viewabilityConfig={this.viewabilityConfig}\r\n          renderItem={this.renderCalendarBound}\r\n          showsVerticalScrollIndicator={this.props.showScrollIndicator}\r\n          showsHorizontalScrollIndicator={this.props.showScrollIndicator}\r\n          scrollEnabled={this.props.scrollEnabled}\r\n          keyExtractor={(item, index) => String(index)}\r\n          initialScrollIndex={this.state.openDate ? this.getMonthIndex(this.state.openDate) : false}\r\n          getItemLayout={this.getItemLayout}\r\n          scrollsToTop={this.props.scrollsToTop}\r\n        />\r\n        {this.renderStaticHeader()}\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CalendarList;\r\n"]},"metadata":{},"sourceType":"module"}