{"ast":null,"code":"function _objectSpread2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport processColor from \"react-native-web/dist/exports/processColor\";\nimport View from \"react-native-web/dist/exports/View\";\nimport RNViewPropTypes from \"react-native-web/dist/exports/ViewPropTypes\";\nimport PropTypes from 'prop-types';\nimport * as R from 'ramda';\n['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'].forEach(name => {\n  exports[\"is\".concat(name)] = obj => toString.call(obj) === \"[object \".concat(name, \"]\");\n});\nvar compact = R.reject(R.isNil);\nvar toPixels = PixelRatio.getPixelSizeForLayoutSize.bind(PixelRatio);\n\nfunction toDips(px) {\n  return px / PixelRatio.get();\n}\n\nfunction convertCoordinate(value) {\n  return Platform.OS === 'android' ? toDips(value) : value;\n}\n\nfunction getFontSize(sp) {\n  return sp * PixelRatio.getFontScale();\n}\n\nvar isNotNil = R.compose(R.not, R.isNil);\n\nfunction extractPropsBy(view, filter) {\n  return R.pickBy(filter, view.props);\n}\n\nfunction extractProps(view, propTypes) {\n  var propNames = Array.isArray(propTypes) ? propTypes : R.keys(propTypes);\n\n  var filter = (v, k) => R.indexOf(k, propNames) >= 0 && isNotNil(v);\n\n  return R.pickBy(filter, view.props);\n}\n\nfunction extractTouchableProps(view) {\n  return extractProps(view, _objectSpread2({}, TouchableWithoutFeedback.propTypes, {\n    testID: PropTypes.string\n  }));\n}\n\nvar ViewPropTypes = RNViewPropTypes || View.propTypes;\nexport { compact, toPixels, toDips, convertCoordinate, getFontSize, extractProps, extractPropsBy, extractTouchableProps, processColor as parseColor, ViewPropTypes };","map":{"version":3,"sources":["C:\\Users\\Ansari\\Documents\\Github\\Mercy-USA-App\\node_modules\\react-native-material-kit\\lib\\utils.js"],"names":["PropTypes","R","forEach","name","exports","obj","toString","call","compact","reject","isNil","toPixels","PixelRatio","getPixelSizeForLayoutSize","bind","toDips","px","get","convertCoordinate","value","Platform","OS","getFontSize","sp","getFontScale","isNotNil","compose","not","extractPropsBy","view","filter","pickBy","props","extractProps","propTypes","propNames","Array","isArray","keys","v","k","indexOf","extractTouchableProps","TouchableWithoutFeedback","testID","string","ViewPropTypes","RNViewPropTypes","View","processColor","parseColor"],"mappings":";;;;;;;;;;AAaA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAO,KAAKC,CAAZ,MAAmB,OAAnB;AAIA,CAAC,WAAD,EAAc,UAAd,EAA0B,QAA1B,EAAoC,QAApC,EAA8C,MAA9C,EAAsD,QAAtD,EAAgE,OAAhE,EAAyEC,OAAzE,CAAkFC,IAAD,IAAU;AACzFC,EAAAA,OAAO,aAAMD,IAAN,EAAP,GAAwBE,GAAD,IAASC,QAAQ,CAACC,IAAT,CAAcF,GAAd,wBAAkCF,IAAlC,MAAhC;AACD,CAFD;AAKA,IAAMK,OAAO,GAAGP,CAAC,CAACQ,MAAF,CAASR,CAAC,CAACS,KAAX,CAAhB;AAGA,IAAMC,QAAQ,GAAGC,UAAU,CAACC,yBAAX,CAAqCC,IAArC,CAA0CF,UAA1C,CAAjB;;AAGA,SAASG,MAAT,CAAgBC,EAAhB,EAAoB;AAClB,SAAOA,EAAE,GAAGJ,UAAU,CAACK,GAAX,EAAZ;AACD;;AAGD,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;AAChC,SAAOC,QAAQ,CAACC,EAAT,KAAgB,SAAhB,GAA4BN,MAAM,CAACI,KAAD,CAAlC,GAA4CA,KAAnD;AACD;;AAGD,SAASG,WAAT,CAAqBC,EAArB,EAAyB;AACvB,SAAOA,EAAE,GAAGX,UAAU,CAACY,YAAX,EAAZ;AACD;;AAED,IAAMC,QAAQ,GAAGxB,CAAC,CAACyB,OAAF,CAAUzB,CAAC,CAAC0B,GAAZ,EAAiB1B,CAAC,CAACS,KAAnB,CAAjB;;AAKA,SAASkB,cAAT,CAAwBC,IAAxB,EAA8BC,MAA9B,EAAsC;AACpC,SAAO7B,CAAC,CAAC8B,MAAF,CAASD,MAAT,EAAiBD,IAAI,CAACG,KAAtB,CAAP;AACD;;AAKD,SAASC,YAAT,CAAsBJ,IAAtB,EAA4BK,SAA5B,EAAuC;AACrC,MAAMC,SAAS,GAAGC,KAAK,CAACC,OAAN,CAAcH,SAAd,IAA2BA,SAA3B,GAAuCjC,CAAC,CAACqC,IAAF,CAAOJ,SAAP,CAAzD;;AACA,MAAMJ,MAAM,GAAG,CAACS,CAAD,EAAIC,CAAJ,KAAUvC,CAAC,CAACwC,OAAF,CAAUD,CAAV,EAAaL,SAAb,KAA2B,CAA3B,IAAgCV,QAAQ,CAACc,CAAD,CAAjE;;AACA,SAAOtC,CAAC,CAAC8B,MAAF,CAASD,MAAT,EAAiBD,IAAI,CAACG,KAAtB,CAAP;AACD;;AAID,SAASU,qBAAT,CAA+Bb,IAA/B,EAAqC;AACnC,SAAOI,YAAY,CAACJ,IAAD,qBACdc,wBAAwB,CAACT,SADX;AAEjBU,IAAAA,MAAM,EAAE5C,SAAS,CAAC6C;AAFD,KAAnB;AAID;;AAED,IAAMC,aAAa,GAAGC,eAAe,IAAIC,IAAI,CAACd,SAA9C;AAGA,SACE1B,OADF,EAEEG,QAFF,EAGEI,MAHF,EAIEG,iBAJF,EAKEI,WALF,EAMEW,YANF,EAOEL,cAPF,EAQEc,qBARF,EASEO,YAAY,IAAIC,UATlB,EAUEJ,aAVF","sourcesContent":["// Utilities\n//\n// Created by ywu on 15/7/18.\n//\n\nimport {\n  PixelRatio,\n  TouchableWithoutFeedback,\n  Platform,\n  processColor,\n  View,\n  ViewPropTypes as RNViewPropTypes,\n} from 'react-native';\nimport PropTypes from 'prop-types';\nimport * as R from 'ramda';\n\n// Add some is-Type methods:\n// `isArguments`, `isFunction`, `isString`, `isNumber`, `isDate`, `isRegExp`, `isError`.\n['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'].forEach((name) => {\n  exports[`is${name}`] = (obj) => toString.call(obj) === `[object ${name}]`;\n});\n\n// Remove keys with null value from the given object\nconst compact = R.reject(R.isNil);\n\n// Convert dips to pixels\nconst toPixels = PixelRatio.getPixelSizeForLayoutSize.bind(PixelRatio);\n\n// Convert pixels back to dips\nfunction toDips(px) {\n  return px / PixelRatio.get();\n}\n\n// Convert native coorindate value into unit used in JSX\nfunction convertCoordinate(value) {\n  return Platform.OS === 'android' ? toDips(value) : value;\n}\n\n// Get font size according to the screen density\nfunction getFontSize(sp) {\n  return sp * PixelRatio.getFontScale();\n}\n\nconst isNotNil = R.compose(R.not, R.isNil);\n\n// Extract the specified props from the given component instance.\n// - {`object`} `view` the component instance\n// - {`(v,k):boolean`} `filter` predictor to determine which prop should be extracted\nfunction extractPropsBy(view, filter) {\n  return R.pickBy(filter, view.props);\n}\n\n// Extract the specified props from the given component instance.\n// - {`object`} `view` the component instance\n// - {`array`|`object`} `propTypes` props definitions\nfunction extractProps(view, propTypes) {\n  const propNames = Array.isArray(propTypes) ? propTypes : R.keys(propTypes);\n  const filter = (v, k) => R.indexOf(k, propNames) >= 0 && isNotNil(v);\n  return R.pickBy(filter, view.props);\n}\n\n// Extract Touchable props from the given component instance.\n// - {`object`} `view` the component instance\nfunction extractTouchableProps(view) {\n  return extractProps(view, {\n    ...TouchableWithoutFeedback.propTypes,\n    testID: PropTypes.string,\n  });\n}\n\nconst ViewPropTypes = RNViewPropTypes || View.propTypes;\n\n// ## Public interface\nexport {\n  compact,\n  toPixels,\n  toDips,\n  convertCoordinate,\n  getFontSize,\n  extractProps,\n  extractPropsBy,\n  extractTouchableProps,\n  processColor as parseColor,  // parse stringified color as int\n  ViewPropTypes,\n};\n"]},"metadata":{},"sourceType":"module"}