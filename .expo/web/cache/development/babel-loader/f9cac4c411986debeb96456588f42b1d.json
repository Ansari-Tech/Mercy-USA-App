{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ansari\\\\Documents\\\\Github\\\\Mercy-USA-App\\\\node_modules\\\\react-native-material-kit\\\\lib\\\\mdl\\\\Switch.js\";\n\nfunction _objectSpread2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport MKColor from \"../MKColor\";\nimport * as utils from \"../utils\";\nimport { getTheme } from \"../theme\";\n\nclass Thumb extends Component {\n  constructor(props) {\n    super(props);\n    this._animatedRippleScale = new Animated.Value(0);\n    this._animatedRippleAlpha = new Animated.Value(0);\n    this.state = {\n      checked: false\n    };\n  }\n\n  componentWillMount() {\n    this.setState({\n      checked: this.props.checked\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.checked !== this.props.checked) {\n      this.setState({\n        checked: nextProps.checked\n      });\n    }\n  }\n\n  startToggle() {\n    this.showRipple();\n  }\n\n  confirmToggle(fromState) {\n    this.setState({\n      checked: !fromState\n    });\n  }\n\n  endToggle() {\n    this.hideRipple();\n  }\n\n  showRipple() {\n    this._rippleAni = Animated.parallel([Animated.timing(this._animatedRippleAlpha, {\n      toValue: 1,\n      duration: this.props.rippleAniDuration || 250\n    }), Animated.timing(this._animatedRippleScale, {\n      toValue: 1,\n      duration: this.props.rippleAniDuration || 250\n    })]);\n\n    this._rippleAni.start(() => {\n      this._rippleAni = undefined;\n\n      if (this._pendingRippleAni) {\n        this._pendingRippleAni();\n      }\n    });\n  }\n\n  hideRipple() {\n    this._pendingRippleAni = () => {\n      Animated.parallel([Animated.timing(this._animatedRippleScale, {\n        toValue: 0,\n        duration: this.props.rippleAniDuration || 250\n      }), Animated.timing(this._animatedRippleAlpha, {\n        toValue: 0,\n        duration: this.props.rippleAniDuration || 250\n      })]).start();\n      this._pendingRippleAni = undefined;\n    };\n\n    if (!this._rippleAni) {\n      this._pendingRippleAni();\n    }\n  }\n\n  _getBgColor() {\n    return this.state.checked ? this.props.onColor : this.props.offColor;\n  }\n\n  render() {\n    var rippleSize = this.props.rippleRadius * 2;\n    return React.createElement(View, {\n      ref: \"container\",\n      style: [this.props.style, {\n        position: 'absolute',\n        width: rippleSize,\n        height: rippleSize,\n        backgroundColor: MKColor.Transparent\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      }\n    }, React.createElement(View, {\n      style: [Thumb.defaultProps.style, this.props.thumbStyle, {\n        backgroundColor: this._getBgColor()\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      }\n    }), React.createElement(Animated.View, {\n      style: {\n        position: 'absolute',\n        opacity: this._animatedRippleAlpha,\n        backgroundColor: this.props.rippleColor,\n        width: rippleSize,\n        height: rippleSize,\n        borderRadius: this.props.rippleRadius,\n        top: 0,\n        left: 0,\n        transform: [{\n          scale: this._animatedRippleScale\n        }]\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      }\n    }));\n  }\n\n}\n\nThumb.propTypes = _objectSpread2({}, utils.ViewPropTypes, {\n  checked: PropTypes.bool,\n  onColor: PropTypes.string,\n  offColor: PropTypes.string,\n  rippleColor: PropTypes.string,\n  rippleAniDuration: PropTypes.number,\n  rippleRadius: PropTypes.number,\n  thumbStyle: PropTypes.any\n});\nThumb.defaultProps = {\n  pointerEvents: 'none',\n  style: {\n    shadowColor: 'black',\n    shadowRadius: 1,\n    shadowOpacity: 0.7,\n    shadowOffset: {\n      width: 0,\n      height: 1\n    },\n    elevation: 2\n  }\n};\nvar AnimatedThumb = Animated.createAnimatedComponent(Thumb);\n\nclass Switch extends Component {\n  constructor(props) {\n    super(props);\n\n    this._onPress = () => {\n      this.confirmToggle();\n\n      if (this.props.onPress) {\n        this.props.onPress();\n      }\n    };\n\n    this._onPressIn = () => {\n      this.startToggle();\n\n      if (this.props.onPressIn) {\n        this.props.onPressIn();\n      }\n    };\n\n    this._onPressOut = () => {\n      this.endToggle();\n\n      if (this.props.onPressOut) {\n        this.props.onPressOut();\n      }\n    };\n\n    this.theme = getTheme();\n    this._animatedThumbLeft = new Animated.Value(0);\n    this.state = {\n      trackSize: 0,\n      trackLength: 0,\n      trackRadii: 0,\n      trackMargin: 0,\n      thumbFrame: {\n        x: 0,\n        padding: 0,\n        r: 0,\n        rippleRadii: 0\n      },\n      checked: false\n    };\n  }\n\n  componentWillMount() {\n    var nextState = this._layoutThumb(this.props.checked, this.props.thumbRadius, this.props.trackLength, this.props.trackSize);\n\n    this.setState(_extends(nextState, {\n      checked: this.props.checked\n    }));\n  }\n\n  componentWillReceiveProps(nextProps) {\n    var nextState = this._layoutThumb(nextProps.checked, nextProps.thumbRadius, nextProps.trackLength, nextProps.trackSize);\n\n    this.setState(_extends(nextState, {\n      checked: nextProps.checked\n    }));\n  }\n\n  getThumb() {\n    if (typeof this.refs.thumb.refs.node !== 'undefined') {\n      return this.refs.thumb.refs.node;\n    }\n\n    return this.refs.thumb._component;\n  }\n\n  _layoutThumb(checked, thumbRadius, trackLength, trackSize) {\n    var trackRadii = trackSize / 2;\n    var thumbRadii = thumbRadius;\n    var rippleRadii = trackLength - trackSize;\n    var trackMargin = rippleRadii - trackRadii;\n    var thumbLeft = checked ? trackMargin + trackRadii : 0;\n\n    this._animatedThumbLeft.setValue(thumbLeft);\n\n    return {\n      trackSize,\n      trackLength,\n      trackRadii,\n      trackMargin,\n      thumbFrame: {\n        rippleRadii,\n        x: thumbLeft,\n        r: thumbRadii,\n        padding: rippleRadii - thumbRadii\n      }\n    };\n  }\n\n  _translateThumb() {\n    this._animatedThumbLeft.setValue(this.state.thumbFrame.x);\n\n    var newX = this._computeThumbX(this.state.checked);\n\n    Animated.timing(this._animatedThumbLeft, {\n      toValue: newX,\n      duration: this.props.thumbAniDuration || 300\n    }).start(() => {\n      this.state.thumbFrame.x = newX;\n    });\n  }\n\n  _computeThumbX(toChecked) {\n    if (!this.state.thumbFrame.r) {\n      return 0;\n    }\n\n    var {\n      trackLength,\n      trackSize\n    } = this.state;\n    var dx = (toChecked ? 1 : -1) * (trackLength - trackSize);\n    return this.state.thumbFrame.x + dx;\n  }\n\n  startToggle() {\n    this.getThumb().startToggle();\n  }\n\n  confirmToggle() {\n    var prevState = this.state.checked;\n    this.setState({\n      checked: !prevState\n    }, () => {\n      this.getThumb().confirmToggle(prevState);\n\n      this._translateThumb();\n\n      if (this.props.onCheckedChange) {\n        this.props.onCheckedChange({\n          checked: this.state.checked\n        });\n      }\n    });\n  }\n\n  endToggle() {\n    this.getThumb().endToggle();\n  }\n\n  _getBgColor(theme) {\n    var onColor = this.props.onColor || theme.onColor;\n    var offColor = this.props.offColor || theme.offColor;\n    return this.state.checked ? onColor : offColor;\n  }\n\n  render() {\n    var touchProps = {\n      delayPressIn: this.props.delayPressIn,\n      delayPressOut: this.props.delayPressOut,\n      delayLongPress: this.props.delayLongPress,\n      onLongPress: this.props.onLongPress\n    };\n\n    var mergedStyle = _extends({}, this.theme.switchStyle, utils.compact({\n      onColor: this.props.onColor,\n      offColor: this.props.offColor,\n      thumbOnColor: this.props.thumbOnColor,\n      thumbOffColor: this.props.thumbOffColor,\n      rippleColor: this.props.rippleColor\n    }));\n\n    var thumbFrame = this.state.thumbFrame;\n    var thumbProps = {\n      checked: this.state.checked,\n      onColor: mergedStyle.thumbOnColor,\n      offColor: mergedStyle.thumbOffColor,\n      rippleColor: mergedStyle.rippleColor,\n      rippleRadius: thumbFrame.rippleRadii,\n      rippleAniDuration: this.props.rippleAniDuration,\n      radius: this.props.thumbRadius,\n      style: {\n        left: this._animatedThumbLeft,\n        top: 0\n      },\n      thumbStyle: {\n        width: this.props.thumbRadius * 2,\n        height: this.props.thumbRadius * 2,\n        borderRadius: this.props.thumbRadius,\n        top: thumbFrame.padding,\n        left: thumbFrame.padding\n      }\n    };\n    return React.createElement(TouchableWithoutFeedback, _extends({}, touchProps, {\n      onPress: this._onPress,\n      onPressIn: this._onPressIn,\n      onPressOut: this._onPressOut,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      }\n    }), React.createElement(View, {\n      ref: \"container\",\n      pointerEvents: \"box-only\",\n      style: this.props.style,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      }\n    }, React.createElement(View, {\n      ref: \"track\",\n      style: {\n        width: this.props.trackLength,\n        height: this.props.trackSize,\n        backgroundColor: this._getBgColor(mergedStyle),\n        borderRadius: this.state.trackRadii,\n        margin: this.state.trackMargin\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      }\n    }), React.createElement(AnimatedThumb, _extends({\n      ref: \"thumb\"\n    }, thumbProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      }\n    }))));\n  }\n\n}\n\nSwitch.propTypes = _objectSpread2({}, TouchableWithoutFeedback.propTypes, {\n  checked: PropTypes.bool,\n  onCheckedChange: PropTypes.func,\n  onColor: PropTypes.string,\n  offColor: PropTypes.string,\n  trackSize: PropTypes.number,\n  trackLength: PropTypes.number,\n  thumbRadius: PropTypes.number,\n  thumbOnColor: PropTypes.string,\n  thumbOffColor: PropTypes.string,\n  thumbAniDuration: PropTypes.number,\n  rippleColor: PropTypes.string,\n  rippleAniDuration: PropTypes.number\n});\nSwitch.defaultProps = {\n  checked: false,\n  trackLength: 48,\n  trackSize: 20,\n  thumbRadius: 14\n};\nmodule.exports = Switch;","map":{"version":3,"sources":["C:\\Users\\Ansari\\Documents\\Github\\Mercy-USA-App\\node_modules\\react-native-material-kit\\lib\\mdl\\Switch.js"],"names":["React","Component","PropTypes","MKColor","utils","getTheme","Thumb","constructor","props","_animatedRippleScale","Animated","Value","_animatedRippleAlpha","state","checked","componentWillMount","setState","componentWillReceiveProps","nextProps","startToggle","showRipple","confirmToggle","fromState","endToggle","hideRipple","_rippleAni","parallel","timing","toValue","duration","rippleAniDuration","start","undefined","_pendingRippleAni","_getBgColor","onColor","offColor","render","rippleSize","rippleRadius","style","position","width","height","backgroundColor","Transparent","defaultProps","thumbStyle","opacity","rippleColor","borderRadius","top","left","transform","scale","propTypes","ViewPropTypes","bool","string","number","any","pointerEvents","shadowColor","shadowRadius","shadowOpacity","shadowOffset","elevation","AnimatedThumb","createAnimatedComponent","Switch","_onPress","onPress","_onPressIn","onPressIn","_onPressOut","onPressOut","theme","_animatedThumbLeft","trackSize","trackLength","trackRadii","trackMargin","thumbFrame","x","padding","r","rippleRadii","nextState","_layoutThumb","thumbRadius","getThumb","refs","thumb","node","_component","thumbRadii","thumbLeft","setValue","_translateThumb","newX","_computeThumbX","thumbAniDuration","toChecked","dx","prevState","onCheckedChange","touchProps","delayPressIn","delayPressOut","delayLongPress","onLongPress","mergedStyle","switchStyle","compact","thumbOnColor","thumbOffColor","thumbProps","radius","margin","TouchableWithoutFeedback","func","module","exports"],"mappings":"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","sourcesContent":["/* eslint react/no-multi-comp:0, react/prop-types:0 */\n//\n// MDL style switch component.\n//\n// <image src=\"http://bit.ly/1OF6Z96\" width=\"400\"/>\n//\n// - @see [MDL Switch](http://bit.ly/1IcHMPo)\n// - [Props](#props)\n// - [Defaults](#defaults)\n//\n// Created by ywu on 15/7/28.\n//\n\nimport React, {\n  Component,\n} from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Animated,\n  TouchableWithoutFeedback,\n  View\n} from 'react-native';\n\nimport MKColor from '../MKColor';\nimport * as utils from '../utils';\nimport { getTheme } from '../theme';\n\n// ## <section id='thumb'>Thumb</section>\n// `Thumb` component of the [`Switch`](#switch).\n// Which is displayed as a circle with shadow and ripple effect.\nclass Thumb extends Component {\n  static propTypes = {\n    // [View Props](https://facebook.github.io/react-native/docs/view.html#props)...\n    ...utils.ViewPropTypes,\n    checked: PropTypes.bool,\n    onColor: PropTypes.string,\n    offColor: PropTypes.string,\n    rippleColor: PropTypes.string,\n    rippleAniDuration: PropTypes.number,\n    rippleRadius: PropTypes.number,\n    thumbStyle: PropTypes.any,\n  };\n\n  // Default props of `Thumb`\n  static defaultProps = {\n    pointerEvents: 'none',\n    style: {\n      shadowColor: 'black',\n      shadowRadius: 1,\n      shadowOpacity: 0.7,\n      shadowOffset: { width: 0, height: 1 },\n      elevation: 2,\n    },\n  };\n\n  constructor(props) {\n    super(props);\n    this._animatedRippleScale = new Animated.Value(0);\n    this._animatedRippleAlpha = new Animated.Value(0);\n    this.state = {\n      checked: false,\n    };\n  }\n\n  componentWillMount() {\n    this.setState({ checked: this.props.checked });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.checked !== this.props.checked) {\n      this.setState({ checked: nextProps.checked });\n    }\n  }\n\n  // When a toggle action started.\n  startToggle() {\n    this.showRipple();\n  }\n\n  // When a toggle action (from the given state) is confirmed.\n  // - {`boolean`} `fromState` the previous state\n  confirmToggle(fromState) {\n    this.setState(\n      {\n        checked: !fromState,\n      }\n    );\n  }\n\n  // When a toggle action is finished (confirmed or canceled).\n  endToggle() {\n    this.hideRipple();\n  }\n\n  // Start the ripple effect\n  showRipple() {\n    // scaling up the ripple layer\n    this._rippleAni = Animated.parallel([\n      Animated.timing(this._animatedRippleAlpha, {\n        toValue: 1,\n        duration: this.props.rippleAniDuration || 250,\n      }),\n      Animated.timing(this._animatedRippleScale, {\n        toValue: 1,\n        duration: this.props.rippleAniDuration || 250,\n      }),\n    ]);\n\n    this._rippleAni.start(() => {\n      this._rippleAni = undefined;\n\n      // if any pending animation, do it\n      if (this._pendingRippleAni) {\n        this._pendingRippleAni();\n      }\n    });\n  }\n\n  // Stop the ripple effect\n  hideRipple() {\n    this._pendingRippleAni = () => {\n      Animated.parallel([\n        Animated.timing(this._animatedRippleScale, {\n          toValue: 0,\n          duration: this.props.rippleAniDuration || 250,\n        }),\n        Animated.timing(this._animatedRippleAlpha, {\n          toValue: 0,\n          duration: this.props.rippleAniDuration || 250,\n        }),\n      ]).start();\n\n      this._pendingRippleAni = undefined;\n    };\n\n    if (!this._rippleAni) {\n      // previous ripple animation is done, good to go\n      this._pendingRippleAni();\n    }\n  }\n\n  _getBgColor() {\n    return this.state.checked ? this.props.onColor : this.props.offColor;\n  }\n\n  // Rendering the `Thumb`\n  render() {\n    const rippleSize = this.props.rippleRadius * 2;\n\n    return (\n      <View ref=\"container\"\n        style={[this.props.style, {\n          position: 'absolute',\n          width: rippleSize,\n          height: rippleSize,\n          backgroundColor: MKColor.Transparent,\n        }]}\n      >\n        <View  // the circle\n          style={[\n            Thumb.defaultProps.style,\n            this.props.thumbStyle,\n            { backgroundColor: this._getBgColor() },\n          ]}\n        />\n        <Animated.View  // the ripple layer\n          style={{\n            position: 'absolute',\n            opacity: this._animatedRippleAlpha,\n            backgroundColor: this.props.rippleColor,\n            width: rippleSize,\n            height: rippleSize,\n            borderRadius: this.props.rippleRadius,\n            top: 0,\n            left: 0,\n            transform: [\n              { scale: this._animatedRippleScale },\n            ],\n          }}\n        />\n      </View>\n    );\n  }\n}\n\n// Enable animations on `Thumb`\nconst AnimatedThumb = Animated.createAnimatedComponent(Thumb);\n\n\n// ## <section id='switch'>Switch</section>\n// The `Switch` component. Which is made up of a `Track` and a [`Thumb`](#thumb).\nclass Switch extends Component {\n  constructor(props) {\n    super(props);\n    this.theme = getTheme();\n    this._animatedThumbLeft = new Animated.Value(0);\n    this.state = {\n      trackSize: 0,\n      trackLength: 0,\n      trackRadii: 0,\n      trackMargin: 0,\n      thumbFrame: { x: 0, padding: 0, r: 0, rippleRadii: 0 },\n      checked: false,\n    };\n  }\n\n  componentWillMount() {\n    const nextState = this._layoutThumb(this.props.checked,\n      this.props.thumbRadius,\n      this.props.trackLength,\n      this.props.trackSize);\n    this.setState(Object.assign(nextState, { checked: this.props.checked }));\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const nextState = this._layoutThumb(nextProps.checked,\n      nextProps.thumbRadius,\n      nextProps.trackLength,\n      nextProps.trackSize);\n    this.setState(Object.assign(nextState, { checked: nextProps.checked }));\n  }\n\n  // Un-boxing the `Thumb` node from `AnimatedComponent`,\n  // in order to access the component functions defined in `Thumb`\n  getThumb() {\n    if (typeof this.refs.thumb.refs.node !== 'undefined') {\n      return this.refs.thumb.refs.node;\n    }\n    return this.refs.thumb._component;\n  }\n\n  // property initializers begin\n  _onPress = () => {\n    this.confirmToggle();\n    if (this.props.onPress) {\n      this.props.onPress();\n    }\n  };\n\n  _onPressIn = () => {\n    this.startToggle();\n    if (this.props.onPressIn) {\n      this.props.onPressIn();\n    }\n  };\n\n  _onPressOut = () => {\n    this.endToggle();\n    if (this.props.onPressOut) {\n      this.props.onPressOut();\n    }\n  };\n  // property initializers end\n\n  // Layout the thumb according to the size of the track\n  _layoutThumb(checked, thumbRadius, trackLength, trackSize) {\n    const trackRadii = trackSize / 2;\n    const thumbRadii = thumbRadius;\n    const rippleRadii = trackLength - trackSize;\n    const trackMargin = rippleRadii - trackRadii;  // make room for ripple\n    const thumbLeft = checked ? trackMargin + trackRadii : 0;\n    this._animatedThumbLeft.setValue(thumbLeft);\n\n    return {\n      trackSize,\n      trackLength,\n      trackRadii,\n      trackMargin,\n      thumbFrame: {\n        rippleRadii,\n        x: thumbLeft,\n        r: thumbRadii,\n        padding: rippleRadii - thumbRadii,\n      },\n    };\n  }\n\n  // Move the thumb left or right according to the current state\n  _translateThumb() {\n    this._animatedThumbLeft.setValue(this.state.thumbFrame.x);\n    const newX = this._computeThumbX(this.state.checked);\n    Animated.timing(this._animatedThumbLeft, {\n      toValue: newX,\n      duration: this.props.thumbAniDuration || 300,\n    }).start(() => {\n      this.state.thumbFrame.x = newX;\n    });\n  }\n\n  // Calc the next position (x-axis) of the thumb\n  _computeThumbX(toChecked) {\n    if (!this.state.thumbFrame.r) {\n      return 0;\n    }\n\n    const { trackLength, trackSize } = this.state;\n    const dx = (toChecked ? 1 : -1) * (trackLength - trackSize);\n    return this.state.thumbFrame.x + dx;\n  }\n\n  // When a toggle action started.\n  startToggle() {\n    this.getThumb().startToggle();\n  }\n\n  // When a toggle action is confirmed.\n  confirmToggle() {\n    const prevState = this.state.checked;\n    this.setState({ checked: !prevState }, () => {\n      this.getThumb().confirmToggle(prevState);\n      this._translateThumb();\n\n      if (this.props.onCheckedChange) {\n        this.props.onCheckedChange({ checked: this.state.checked });\n      }\n    });\n  }\n\n  // When a toggle action is finished (confirmed or canceled).\n  endToggle() {\n    this.getThumb().endToggle();\n  }\n\n  _getBgColor(theme) {\n    const onColor = this.props.onColor || theme.onColor;\n    const offColor = this.props.offColor || theme.offColor;\n    return this.state.checked ? onColor : offColor;\n  }\n\n  // Rendering the `Switch`\n  render() {\n    const touchProps = {\n      delayPressIn: this.props.delayPressIn,\n      delayPressOut: this.props.delayPressOut,\n      delayLongPress: this.props.delayLongPress,\n      onLongPress: this.props.onLongPress,\n    };\n\n    const mergedStyle = Object.assign({}, this.theme.switchStyle, utils.compact({\n      onColor: this.props.onColor,\n      offColor: this.props.offColor,\n      thumbOnColor: this.props.thumbOnColor,\n      thumbOffColor: this.props.thumbOffColor,\n      rippleColor: this.props.rippleColor,\n    }));\n\n    const thumbFrame = this.state.thumbFrame;\n    const thumbProps = {\n      checked: this.state.checked,\n      onColor: mergedStyle.thumbOnColor,\n      offColor: mergedStyle.thumbOffColor,\n      rippleColor: mergedStyle.rippleColor,\n      rippleRadius: thumbFrame.rippleRadii,\n      rippleAniDuration: this.props.rippleAniDuration,\n      radius: this.props.thumbRadius,\n      style: {\n        left: this._animatedThumbLeft,\n        top: 0,\n      },\n      thumbStyle: {\n        width: this.props.thumbRadius * 2,\n        height: this.props.thumbRadius * 2,\n        borderRadius: this.props.thumbRadius,\n        top: thumbFrame.padding,\n        left: thumbFrame.padding,\n      },\n    };\n\n    return (\n      <TouchableWithoutFeedback\n        {...touchProps}\n        onPress={this._onPress}\n        onPressIn={this._onPressIn}\n        onPressOut={this._onPressOut}\n      >\n        <View ref=\"container\"\n          pointerEvents=\"box-only\"\n          style={this.props.style}\n        >\n          <View ref=\"track\"  // the 'track' part\n            style={{\n              width: this.props.trackLength,\n              height: this.props.trackSize,\n              backgroundColor: this._getBgColor(mergedStyle),\n              borderRadius: this.state.trackRadii,\n              margin: this.state.trackMargin,\n            }}\n          />\n          <AnimatedThumb ref=\"thumb\"  // the 'thumb' part\n            {...thumbProps}\n          />\n        </View>\n      </TouchableWithoutFeedback>\n    );\n  }\n}\n\n// ## <section id='props'>Props</section>\nSwitch.propTypes = {\n  // Touchable...\n  ...TouchableWithoutFeedback.propTypes,\n\n  // Toggle status of the `Switch`\n  checked: PropTypes.bool,\n\n  // Callback when the toggle status is changed.\n  onCheckedChange: PropTypes.func,\n\n  // Color of the track, when switch is checked\n  onColor: PropTypes.string,\n\n  // Color of the track, when switch is off\n  offColor: PropTypes.string,\n\n  // The thickness of the Switch track\n  trackSize: PropTypes.number,\n\n  // The length of the Switch track\n  trackLength: PropTypes.number,\n\n  // Radius of the thumb button\n  thumbRadius: PropTypes.number,\n\n  // Color of the thumb, when switch is checked\n  thumbOnColor: PropTypes.string,\n\n  // Color of the thumb, when switch is off\n  thumbOffColor: PropTypes.string,\n\n  // Duration of the thumb sliding animation, in milliseconds\n  thumbAniDuration: PropTypes.number,\n\n  // Color of the ripple layer\n  rippleColor: PropTypes.string,\n\n  // Duration of the ripple effect, in milliseconds\n  rippleAniDuration: PropTypes.number,\n};\n\n// ## <section id='defaults'>Defaults</section>\nSwitch.defaultProps = {\n  checked: false,\n  trackLength: 48,\n  trackSize: 20,\n  thumbRadius: 14,\n};\n\n\n// ## Public interface\nmodule.exports = Switch;\n"]},"metadata":{},"sourceType":"module"}