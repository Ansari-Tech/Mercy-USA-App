{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ansari\\\\Documents\\\\Github\\\\Mercy-USA-App\\\\screens\\\\WeatherDay.js\";\nimport React, { useCallback } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport NavigationService from \"../NavigationService\";\nimport { FlatGrid } from \"react-native-super-grid\";\nimport * as Permissions from \"expo-permissions\";\nimport * as Location from \"expo-location\";\nvar {\n  width,\n  height\n} = Dimensions.get(\"window\");\nexport default class Weather extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.formatTime = time => {\n      return time > 12 ? time - 12 + \" PM\" : time === 0 ? 12 + \" AM\" : time === 12 ? \"12 PM\" : time + \" AM\";\n    };\n\n    this.ctof = c => {\n      return Math.round(c * (9 / 5) + 32);\n    };\n\n    this.formatData = callback => {\n      var temperatures = this.trimEntriesToHours(this.params.temperature, this.params.date);\n      var chill = this.trimEntriesToHours(this.params.chill, this.params.date);\n      callback({\n        temperatures: temperatures,\n        chill: chill\n      });\n    };\n\n    this.setWeather = () => {\n      var forecast = [];\n      this.formatData(data => {\n        for (var i = 0; i < data.temperatures.length; i++) {\n          var hourEntry = {\n            hour: data.temperatures[i].formattedHour,\n            temperature: this.ctof(data.temperatures[i].value)\n          };\n          forecast.push(hourEntry);\n        }\n      });\n      this.setState({\n        forecast: forecast\n      });\n    };\n\n    this.params = this.props.navigation.state.params;\n    this.state = {};\n  }\n\n  trimEntriesToHours(list, date) {\n    var newList = [];\n    list.sort((a, b) => {\n      return parseInt(a.validTime.split(\"T\")[1].split(\":\")[0], 10) > parseInt(b.validTime.split(\"T\")[1].split(\":\")[0], 10) ? 1 : -1;\n    });\n    list.forEach(entry => {\n      if (date === entry.validTime.substring(0, 10)) {\n        var hour = parseInt(entry.validTime.split(\"T\")[1].split(\":\")[0], 10);\n        var formattedHour = formatTime(hour);\n\n        while (newList.length > 0 && newList[newList.length - 1].hour < 23 && newList[newList.length - 1].hour - hour < -1) {\n          var duplicate = JSON.parse(JSON.stringify(newList[newList.length - 1]));\n          duplicate.hour = duplicate.hour + 1;\n          duplicate.formattedHour = formatTime(duplicate.hour);\n          console.log(newList[newList.length - 1].hour + \" , \" + duplicate.hour);\n          newList.push(duplicate);\n        }\n\n        var correctedEntry = {\n          hour: hour,\n          formattedHour: formattedHour,\n          value: entry.value\n        };\n        newList.push(correctedEntry);\n      }\n    });\n    return newList.sort((a, b) => {\n      return a.hour > b.hour ? 1 : -1;\n    });\n  }\n\n  componentDidMount() {\n    if (this.params.temperature) {\n      this.setWeather();\n    }\n  }\n\n  render() {\n    return React.createElement(FlatGrid, {\n      itemDimension: width - 10,\n      items: this.state.forecast,\n      style: styles.gridView,\n      renderItem: (_ref) => {\n        var {\n          item,\n          index\n        } = _ref;\n        return React.createElement(View, {\n          style: [styles.itemContainer, {\n            backgroundColor: \"#045384\"\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          }\n        }, React.createElement(Text, {\n          style: styles.name,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          }\n        }, item.hour), React.createElement(View, {\n          style: {\n            flexDirection: \"row\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          }\n        }, React.createElement(Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          }\n        }, React.createElement(Text, {\n          style: styles.time,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          }\n        }, item.temperature, \"\\xB0 \"), React.createElement(Text, {\n          style: styles.amPM,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          }\n        }, item.chill, \"\\xB0\"))), React.createElement(Text, {\n          style: styles.weather,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          }\n        }, item.weather));\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      }\n    });\n  }\n\n}\nWeather.navigationOptions = {\n  title: \"Local Weather\"\n};\nvar styles = StyleSheet.create({\n  gridView: {\n    flex: 1\n  },\n  itemContainer: {\n    justifyContent: \"center\",\n    borderRadius: 5,\n    padding: 10,\n    height: 75\n  },\n  name: {\n    fontSize: 16,\n    color: \"#fff\",\n    fontWeight: \"600\"\n  },\n  weather: {\n    fontSize: 25,\n    fontStyle: \"italic\",\n    color: \"#fff\"\n  },\n  amPM: {\n    fontSize: 20,\n    color: \"#fff\",\n    fontWeight: \"600\"\n  },\n  time: {\n    fontWeight: \"600\",\n    fontSize: 50,\n    color: \"#fff\"\n  }\n});","map":{"version":3,"sources":["C:\\Users\\Ansari\\Documents\\Github\\Mercy-USA-App\\screens\\WeatherDay.js"],"names":["React","useCallback","NavigationService","FlatGrid","Permissions","Location","width","height","Dimensions","get","Weather","Component","constructor","props","formatTime","time","ctof","c","Math","round","formatData","callback","temperatures","trimEntriesToHours","params","temperature","date","chill","setWeather","forecast","data","i","length","hourEntry","hour","formattedHour","value","push","setState","navigation","state","list","newList","sort","a","b","parseInt","validTime","split","forEach","entry","substring","duplicate","JSON","parse","stringify","console","log","correctedEntry","componentDidMount","render","styles","gridView","item","index","itemContainer","backgroundColor","name","flexDirection","amPM","weather","navigationOptions","title","StyleSheet","create","flex","justifyContent","borderRadius","padding","fontSize","color","fontWeight","fontStyle"],"mappings":"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","sourcesContent":["import React, { useCallback } from \"react\";\r\nimport { StyleSheet, View, Dimensions, Text, TouchableOpacity } from \"react-native\";\r\nimport NavigationService from \"../NavigationService\";\r\nimport { FlatGrid } from \"react-native-super-grid\";\r\nimport * as Permissions from \"expo-permissions\";\r\nimport * as Location from \"expo-location\";\r\nconst { width, height } = Dimensions.get(\"window\");\r\n\r\nexport default class Weather extends React.Component {\r\n  static navigationOptions = {\r\n    title: \"Local Weather\"\r\n  };\r\n  constructor(props) {\r\n    super(props);\r\n    this.params = this.props.navigation.state.params;\r\n    this.state = {\r\n    };\r\n  }\r\n\r\n  formatTime = (time) => {\r\n    return time > 12 ? ((time - 12)) + \" PM\" : (time === 0 ? 12 + \" AM\" : (time === 12 ? \"12 PM\" : time + \" AM\"));\r\n  }\r\n  trimEntriesToHours(list, date) {\r\n    let newList = [];\r\n    list.sort((a,b)=>{\r\n      return parseInt(a.validTime.split(\"T\")[1].split(\":\")[0], 10) > parseInt(b.validTime.split(\"T\")[1].split(\":\")[0], 10) ? 1 : -1;\r\n    });\r\n    list.forEach(entry => {\r\n      if(date === entry.validTime.substring(0,10)) {\r\n        \r\n        const hour = parseInt(entry.validTime.split(\"T\")[1].split(\":\")[0], 10);\r\n        const formattedHour = formatTime(hour); \r\n\r\n        while(newList.length > 0 && newList[newList.length -1].hour < 23  && newList[newList.length -1].hour - hour <-1) {\r\n          let duplicate = JSON.parse(JSON.stringify(newList[newList.length -1]));\r\n          duplicate.hour = duplicate.hour + 1;\r\n          duplicate.formattedHour = formatTime(duplicate.hour); \r\n          console.log(newList[newList.length  -1].hour + \" , \" + duplicate.hour);\r\n          newList.push(duplicate);\r\n        }\r\n        const correctedEntry = {\r\n          hour: hour,\r\n          formattedHour: formattedHour,\r\n          value: entry.value\r\n        };\r\n        newList.push(correctedEntry);\r\n      }\r\n    });\r\n    return newList.sort((a, b)=> {\r\n      return a.hour > b.hour ? 1 : -1;\r\n    });\r\n  }\r\n\r\ncomponentDidMount() {\r\n  if(this.params.temperature){\r\n    this.setWeather();\r\n  }\r\n}\r\n\r\nctof = (c) => {\r\n  return Math.round(c * (9 / 5) + 32)\r\n}\r\n\r\nformatData = (callback)=> {\r\n  const temperatures = this.trimEntriesToHours(this.params.temperature, this.params.date);\r\n  const chill = this.trimEntriesToHours(this.params.chill, this.params.date);\r\n  callback( {\r\n    temperatures: temperatures, \r\n    chill: chill\r\n  });\r\n}\r\n  setWeather = () => {\r\n    let forecast = [];\r\n\r\n    this.formatData((data)=> {\r\n      for(let i = 0; i < data.temperatures.length; i++) {\r\n        let hourEntry = {\r\n          hour: data.temperatures[i].formattedHour,\r\n          temperature: this.ctof(data.temperatures[i].value),\r\n         // chill: this.ctof(data.chill[i].value)\r\n          //add other info here\r\n        }\r\n        forecast.push(hourEntry);\r\n      }\r\n    })\r\n    this.setState({forecast: forecast});\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <FlatGrid\r\n        itemDimension={width - 10}\r\n        items={this.state.forecast}\r\n        style={styles.gridView}\r\n        renderItem={({ item, index }) => (\r\n          <View style={[styles.itemContainer, { backgroundColor: \"#045384\" }]}>\r\n            <Text style={styles.name}>{item.hour}</Text>\r\n            <View style={{ flexDirection: \"row\" }}>\r\n              <Text>\r\n                <Text style={styles.time}>{item.temperature}° </Text>\r\n                <Text style={styles.amPM}>{item.chill}°</Text>\r\n              </Text>\r\n            </View>\r\n            <Text style={styles.weather}>{item.weather}</Text>\r\n          </View>\r\n        )}\r\n      />\r\n    );\r\n  }\r\n}\r\nconst styles = StyleSheet.create({\r\n  gridView: {\r\n    flex: 1\r\n  },\r\n  itemContainer: {\r\n    justifyContent: \"center\",\r\n    borderRadius: 5,\r\n    padding: 10,\r\n    height: 75\r\n  },\r\n  name: {\r\n    fontSize: 16,\r\n    color: \"#fff\",\r\n    fontWeight: \"600\"\r\n  },\r\n  weather: {\r\n    fontSize: 25,\r\n    fontStyle: \"italic\",\r\n    color: \"#fff\"\r\n  },\r\n  amPM: {\r\n    fontSize: 20,\r\n    color: \"#fff\",\r\n    fontWeight: \"600\"\r\n  },\r\n  time: {\r\n    fontWeight: \"600\",\r\n    fontSize: 50,\r\n    color: \"#fff\"\r\n  }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}