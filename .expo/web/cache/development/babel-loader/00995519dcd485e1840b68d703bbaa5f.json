{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ansari\\\\Documents\\\\Github\\\\Mercy-USA-App\\\\node_modules\\\\react-native-calendars\\\\src\\\\expandableCalendar\\\\agendaList.js\";\n\nfunction _objectSpread2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport _ from 'lodash';\nimport React, { Component } from 'react';\nimport SectionList from \"react-native-web/dist/exports/SectionList\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport PropTypes from 'prop-types';\nimport XDate from 'xdate';\nimport styleConstructor from \"./style\";\nimport asCalendarConsumer from \"./asCalendarConsumer\";\n\nvar commons = require(\"./commons\");\n\nvar UPDATE_SOURCES = commons.UPDATE_SOURCES;\n\nclass AgendaList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onViewableItemsChanged = (_ref) => {\n      var {\n        viewableItems\n      } = _ref;\n\n      if (viewableItems && !this.sectionScroll) {\n        var topSection = _.get(viewableItems[0], 'section.title');\n\n        if (topSection && topSection !== this._topSection) {\n          this._topSection = topSection;\n\n          if (this.didScroll) {\n            _.invoke(this.props.context, 'setDate', this._topSection, UPDATE_SOURCES.LIST_DRAG);\n          }\n        }\n      }\n    };\n\n    this.onScroll = event => {\n      if (!this.didScroll) {\n        this.didScroll = true;\n      }\n\n      _.invoke(this.props, 'onScroll', event);\n    };\n\n    this.onMomentumScrollBegin = event => {\n      _.invoke(this.props.context, 'setDisabled', true);\n\n      _.invoke(this.props, 'onMomentumScrollBegin', event);\n    };\n\n    this.onMomentumScrollEnd = event => {\n      this.sectionScroll = false;\n\n      _.invoke(this.props.context, 'setDisabled', false);\n\n      _.invoke(this.props, 'onMomentumScrollEnd', event);\n    };\n\n    this.onHeaderLayout = (_ref2) => {\n      var {\n        nativeEvent\n      } = _ref2;\n      this.sectionHeight = nativeEvent.layout.height;\n    };\n\n    this.renderSectionHeader = (_ref3) => {\n      var {\n        section: {\n          title\n        }\n      } = _ref3;\n      var today = XDate().toString(this.props.dayFormat).toUpperCase();\n      var date = XDate(title).toString(this.props.dayFormat).toUpperCase();\n      var todayString = XDate.locales[XDate.defaultLocale].today || commons.todayString;\n      var sectionTitle = date === today ? \"\".concat(todayString.toUpperCase(), \", \").concat(date) : date;\n      return React.createElement(Text, {\n        allowFontScaling: false,\n        style: [this.style.sectionText, this.props.sectionStyle],\n        onLayout: this.onHeaderLayout,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        }\n      }, sectionTitle);\n    };\n\n    this.keyExtractor = (item, index) => String(index);\n\n    this.style = styleConstructor(props.theme);\n    this._topSection = _.get(props, 'sections[0].title');\n    this.didScroll = false;\n    this.sectionScroll = false;\n    this.viewabilityConfig = {\n      itemVisiblePercentThreshold: 20\n    };\n    this.list = React.createRef();\n  }\n\n  getSectionIndex(date) {\n    var i;\n\n    _.map(this.props.sections, (section, index) => {\n      if (section.title === date) {\n        i = index;\n        return;\n      }\n    });\n\n    return i;\n  }\n\n  componentDidUpdate(prevProps) {\n    var {\n      updateSource,\n      date\n    } = this.props.context;\n\n    if (date !== prevProps.context.date) {\n      if (updateSource !== UPDATE_SOURCES.LIST_DRAG && updateSource !== UPDATE_SOURCES.CALENDAR_INIT) {\n        var sectionIndex = this.getSectionIndex(date);\n        this.scrollToSection(sectionIndex);\n      }\n    }\n  }\n\n  scrollToSection(sectionIndex) {\n    if (this.list.current && sectionIndex !== undefined) {\n      this.sectionScroll = true;\n      this._topSection = this.props.sections[sectionIndex].title;\n      this.list.current.scrollToLocation({\n        animated: true,\n        sectionIndex: sectionIndex,\n        itemIndex: 0,\n        viewPosition: 0,\n        viewOffset: commons.isAndroid ? this.sectionHeight : 0\n      });\n    }\n  }\n\n  render() {\n    return React.createElement(SectionList, _extends({}, this.props, {\n      ref: this.list,\n      keyExtractor: this.keyExtractor,\n      showsVerticalScrollIndicator: false,\n      stickySectionHeadersEnabled: true,\n      onViewableItemsChanged: this.onViewableItemsChanged,\n      viewabilityConfig: this.viewabilityConfig,\n      renderSectionHeader: this.renderSectionHeader,\n      onScroll: this.onScroll,\n      onMomentumScrollBegin: this.onMomentumScrollBegin,\n      onMomentumScrollEnd: this.onMomentumScrollEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      }\n    }));\n  }\n\n}\n\nAgendaList.displayName = 'AgendaList';\nAgendaList.propTypes = _objectSpread2({}, SectionList.propTypes, {\n  dayFormat: PropTypes.string,\n  sectionStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array])\n});\nAgendaList.defaultProps = {\n  dayFormat: 'dddd, MMM d'\n};\nexport default asCalendarConsumer(AgendaList);","map":{"version":3,"sources":["C:\\Users\\Ansari\\Documents\\Github\\Mercy-USA-App\\node_modules\\react-native-calendars\\src\\expandableCalendar\\agendaList.js"],"names":["_","React","Component","PropTypes","XDate","styleConstructor","asCalendarConsumer","commons","require","UPDATE_SOURCES","AgendaList","constructor","props","onViewableItemsChanged","viewableItems","sectionScroll","topSection","get","_topSection","didScroll","invoke","context","LIST_DRAG","onScroll","event","onMomentumScrollBegin","onMomentumScrollEnd","onHeaderLayout","nativeEvent","sectionHeight","layout","height","renderSectionHeader","section","title","today","toString","dayFormat","toUpperCase","date","todayString","locales","defaultLocale","sectionTitle","style","sectionText","sectionStyle","keyExtractor","item","index","String","theme","viewabilityConfig","itemVisiblePercentThreshold","list","createRef","getSectionIndex","i","map","sections","componentDidUpdate","prevProps","updateSource","CALENDAR_INIT","sectionIndex","scrollToSection","current","undefined","scrollToLocation","animated","itemIndex","viewPosition","viewOffset","isAndroid","render","displayName","propTypes","SectionList","string","oneOfType","object","number","array","defaultProps"],"mappings":"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","sourcesContent":["import _ from 'lodash';\r\nimport React, {Component} from 'react';\r\nimport {SectionList, Text} from 'react-native';\r\nimport PropTypes from 'prop-types';\r\nimport XDate from 'xdate';\r\n\r\nimport styleConstructor from './style';\r\nimport asCalendarConsumer from './asCalendarConsumer';\r\n\r\n\r\nconst commons = require('./commons');\r\nconst UPDATE_SOURCES = commons.UPDATE_SOURCES;\r\n\r\n/**\r\n * @description: AgendaList component\r\n * @extends: SectionList\r\n * @notes: Should be wraped in CalendarProvider component\r\n * @example: https://github.com/wix/react-native-calendars/blob/master/example/src/screens/expandableCalendar.js\r\n */\r\nclass AgendaList extends Component {\r\n  static displayName = 'AgendaList';\r\n\r\n  static propTypes = {\r\n    ...SectionList.propTypes,\r\n    /** day format in section title. Formatting values: http://arshaw.com/xdate/#Formatting */\r\n    dayFormat: PropTypes.string,\r\n    /** style passed to the section view */\r\n    sectionStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array])\r\n  }\r\n\r\n  static defaultProps = {\r\n    dayFormat: 'dddd, MMM d'\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.style = styleConstructor(props.theme);\r\n\r\n    this._topSection = _.get(props, 'sections[0].title');\r\n    this.didScroll = false;\r\n    this.sectionScroll = false;\r\n\r\n    this.viewabilityConfig = {\r\n      itemVisiblePercentThreshold: 20 // 50 means if 50% of the item is visible\r\n    };\r\n    this.list = React.createRef();\r\n  }\r\n\r\n  getSectionIndex(date) {\r\n    let i;\r\n    _.map(this.props.sections, (section, index) => {\r\n      // NOTE: sections titles should match current date format!!!\r\n      if (section.title === date) {\r\n        i = index;\r\n        return;\r\n      }\r\n    });\r\n    return i;\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const {updateSource, date} = this.props.context;\r\n    if (date !== prevProps.context.date) {\r\n      // NOTE: on first init data should set first section to the current date!!!\r\n      if (updateSource !== UPDATE_SOURCES.LIST_DRAG && updateSource !== UPDATE_SOURCES.CALENDAR_INIT) {\r\n        const sectionIndex = this.getSectionIndex(date);\r\n        this.scrollToSection(sectionIndex);\r\n      }\r\n    }\r\n  }\r\n\r\n  scrollToSection(sectionIndex) {\r\n    if (this.list.current && sectionIndex !== undefined) {\r\n      this.sectionScroll = true; // to avoid setDate() in onViewableItemsChanged\r\n      this._topSection = this.props.sections[sectionIndex].title;\r\n\r\n      this.list.current.scrollToLocation({\r\n        animated: true,\r\n        sectionIndex: sectionIndex,\r\n        itemIndex: 0,\r\n        viewPosition: 0, // position at the top\r\n        viewOffset: commons.isAndroid ? this.sectionHeight : 0\r\n      });\r\n    }\r\n  }\r\n\r\n  onViewableItemsChanged = ({viewableItems}) => {\r\n    if (viewableItems && !this.sectionScroll) {\r\n      const topSection = _.get(viewableItems[0], 'section.title');\r\n      if (topSection && topSection !== this._topSection) {\r\n        this._topSection = topSection;\r\n        if (this.didScroll) { // to avoid setDate() on first load (while setting the initial context.date value)\r\n          _.invoke(this.props.context, 'setDate', this._topSection, UPDATE_SOURCES.LIST_DRAG);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  onScroll = (event) => {\r\n    if (!this.didScroll) {\r\n      this.didScroll = true;\r\n    }\r\n    _.invoke(this.props, 'onScroll', event);\r\n  }\r\n\r\n  onMomentumScrollBegin = (event) => {\r\n    _.invoke(this.props.context, 'setDisabled', true);\r\n    _.invoke(this.props, 'onMomentumScrollBegin', event);\r\n  }\r\n\r\n  onMomentumScrollEnd = (event) => {\r\n    // when list momentum ends AND when scrollToSection scroll ends\r\n    this.sectionScroll = false;\r\n    _.invoke(this.props.context, 'setDisabled', false);\r\n    _.invoke(this.props, 'onMomentumScrollEnd', event);\r\n  }\r\n\r\n  onHeaderLayout = ({nativeEvent}) => {\r\n    this.sectionHeight = nativeEvent.layout.height;\r\n  }\r\n\r\n  renderSectionHeader = ({section: {title}}) => {\r\n    const today = XDate().toString(this.props.dayFormat).toUpperCase();\r\n    const date = XDate(title).toString(this.props.dayFormat).toUpperCase();\r\n    const todayString = XDate.locales[XDate.defaultLocale].today || commons.todayString;\r\n    const sectionTitle = date === today ? `${todayString.toUpperCase()}, ${date}` : date;\r\n    \r\n    return (\r\n      <Text allowFontScaling={false} style={[this.style.sectionText, this.props.sectionStyle]} onLayout={this.onHeaderLayout}>{sectionTitle}</Text>\r\n    );\r\n  }\r\n\r\n  keyExtractor = (item, index) => String(index);\r\n\r\n  render() {\r\n    return (\r\n      <SectionList\r\n        {...this.props}\r\n        ref={this.list}\r\n        keyExtractor={this.keyExtractor}\r\n        showsVerticalScrollIndicator={false}\r\n        stickySectionHeadersEnabled\r\n        onViewableItemsChanged={this.onViewableItemsChanged}\r\n        viewabilityConfig={this.viewabilityConfig}\r\n        renderSectionHeader={this.renderSectionHeader}\r\n        onScroll={this.onScroll}\r\n        onMomentumScrollBegin={this.onMomentumScrollBegin}\r\n        onMomentumScrollEnd={this.onMomentumScrollEnd}\r\n        // onScrollToIndexFailed={(info) => { console.warn('onScrollToIndexFailed info: ', info); }}\r\n        // getItemLayout={this.getItemLayout} // onViewableItemsChanged is not updated when list scrolls!!!\r\n      />\r\n    );\r\n  }\r\n\r\n  // getItemLayout = (data, index) => {\r\n  //   return {length: commons.screenWidth, offset: commons.screenWidth  * index, index};\r\n  // }\r\n}\r\n\r\nexport default asCalendarConsumer(AgendaList);\r\n"]},"metadata":{},"sourceType":"module"}