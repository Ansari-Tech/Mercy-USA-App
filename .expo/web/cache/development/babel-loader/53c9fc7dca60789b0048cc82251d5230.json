{"ast":null,"code":"import { parseDate } from \"../interface\";\nexport default function shouldComponentUpdate(nextProps, nextState) {\n  var shouldUpdate = (nextProps.selected || []).reduce((prev, next, i) => {\n    var currentSelected = (this.props.selected || [])[i];\n\n    if (!currentSelected || !next || parseDate(currentSelected).getTime() !== parseDate(next).getTime()) {\n      return {\n        update: true,\n        field: 'selected'\n      };\n    }\n\n    return prev;\n  }, {\n    update: false\n  });\n  shouldUpdate = ['markedDates', 'hideExtraDays'].reduce((prev, next) => {\n    if (!prev.update && nextProps[next] !== this.props[next]) {\n      return {\n        update: true,\n        field: next\n      };\n    }\n\n    return prev;\n  }, shouldUpdate);\n  shouldUpdate = ['minDate', 'maxDate', 'current'].reduce((prev, next) => {\n    var prevDate = parseDate(this.props[next]);\n    var nextDate = parseDate(nextProps[next]);\n\n    if (prev.update) {\n      return prev;\n    } else if (prevDate !== nextDate) {\n      if (prevDate && nextDate && prevDate.getTime() === nextDate.getTime()) {\n        return prev;\n      } else {\n        return {\n          update: true,\n          field: next\n        };\n      }\n    }\n\n    return prev;\n  }, shouldUpdate);\n\n  if (nextState.currentMonth !== this.state.currentMonth) {\n    shouldUpdate = {\n      update: true,\n      field: 'current'\n    };\n  }\n\n  return shouldUpdate.update;\n}","map":{"version":3,"sources":["C:\\Users\\Ansari\\Documents\\Github\\Mercy-USA-App\\node_modules\\react-native-calendars\\src\\calendar\\updater.js"],"names":["parseDate","shouldComponentUpdate","nextProps","nextState","shouldUpdate","selected","reduce","prev","next","i","currentSelected","props","getTime","update","field","prevDate","nextDate","currentMonth","state"],"mappings":"AAAA,SAAQA,SAAR;AAEA,eAAe,SAASC,qBAAT,CAA+BC,SAA/B,EAA0CC,SAA1C,EAAqD;AAClE,MAAIC,YAAY,GAAG,CAACF,SAAS,CAACG,QAAV,IAAsB,EAAvB,EAA2BC,MAA3B,CAAkC,CAACC,IAAD,EAAOC,IAAP,EAAaC,CAAb,KAAmB;AACtE,QAAMC,eAAe,GAAG,CAAC,KAAKC,KAAL,CAAWN,QAAX,IAAuB,EAAxB,EAA4BI,CAA5B,CAAxB;;AACA,QAAI,CAACC,eAAD,IAAoB,CAACF,IAArB,IAA6BR,SAAS,CAACU,eAAD,CAAT,CAA2BE,OAA3B,OAAyCZ,SAAS,CAACQ,IAAD,CAAT,CAAgBI,OAAhB,EAA1E,EAAqG;AACnG,aAAO;AACLC,QAAAA,MAAM,EAAE,IADH;AAELC,QAAAA,KAAK,EAAE;AAFF,OAAP;AAID;;AACD,WAAOP,IAAP;AACD,GATkB,EAShB;AAACM,IAAAA,MAAM,EAAE;AAAT,GATgB,CAAnB;AAWAT,EAAAA,YAAY,GAAG,CAAC,aAAD,EAAgB,eAAhB,EAAiCE,MAAjC,CAAwC,CAACC,IAAD,EAAOC,IAAP,KAAgB;AACrE,QAAI,CAACD,IAAI,CAACM,MAAN,IAAgBX,SAAS,CAACM,IAAD,CAAT,KAAoB,KAAKG,KAAL,CAAWH,IAAX,CAAxC,EAA0D;AACxD,aAAO;AACLK,QAAAA,MAAM,EAAE,IADH;AAELC,QAAAA,KAAK,EAAEN;AAFF,OAAP;AAID;;AACD,WAAOD,IAAP;AACD,GARc,EAQZH,YARY,CAAf;AAUAA,EAAAA,YAAY,GAAG,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkCE,MAAlC,CAAyC,CAACC,IAAD,EAAOC,IAAP,KAAgB;AACtE,QAAMO,QAAQ,GAAGf,SAAS,CAAC,KAAKW,KAAL,CAAWH,IAAX,CAAD,CAA1B;AACA,QAAMQ,QAAQ,GAAGhB,SAAS,CAACE,SAAS,CAACM,IAAD,CAAV,CAA1B;;AACA,QAAID,IAAI,CAACM,MAAT,EAAiB;AACf,aAAON,IAAP;AACD,KAFD,MAEO,IAAIQ,QAAQ,KAAKC,QAAjB,EAA2B;AAChC,UAAID,QAAQ,IAAIC,QAAZ,IAAwBD,QAAQ,CAACH,OAAT,OAAuBI,QAAQ,CAACJ,OAAT,EAAnD,EAAuE;AACrE,eAAOL,IAAP;AACD,OAFD,MAEO;AACL,eAAO;AACLM,UAAAA,MAAM,EAAE,IADH;AAELC,UAAAA,KAAK,EAAEN;AAFF,SAAP;AAID;AACF;;AACD,WAAOD,IAAP;AACD,GAhBc,EAgBZH,YAhBY,CAAf;;AAkBA,MAAID,SAAS,CAACc,YAAV,KAA2B,KAAKC,KAAL,CAAWD,YAA1C,EAAwD;AACtDb,IAAAA,YAAY,GAAG;AACbS,MAAAA,MAAM,EAAE,IADK;AAEbC,MAAAA,KAAK,EAAE;AAFM,KAAf;AAID;;AAED,SAAOV,YAAY,CAACS,MAApB;AACD","sourcesContent":["import {parseDate} from '../interface';\r\n\r\nexport default function shouldComponentUpdate(nextProps, nextState) {\r\n  let shouldUpdate = (nextProps.selected || []).reduce((prev, next, i) => {\r\n    const currentSelected = (this.props.selected || [])[i];\r\n    if (!currentSelected || !next || parseDate(currentSelected).getTime() !== parseDate(next).getTime()) {\r\n      return {\r\n        update: true,\r\n        field: 'selected'\r\n      };\r\n    }\r\n    return prev;\r\n  }, {update: false});\r\n\r\n  shouldUpdate = ['markedDates', 'hideExtraDays'].reduce((prev, next) => {\r\n    if (!prev.update && nextProps[next] !== this.props[next]) {\r\n      return {\r\n        update: true,\r\n        field: next\r\n      };\r\n    }\r\n    return prev;\r\n  }, shouldUpdate);\r\n\r\n  shouldUpdate = ['minDate', 'maxDate', 'current'].reduce((prev, next) => {\r\n    const prevDate = parseDate(this.props[next]);\r\n    const nextDate = parseDate(nextProps[next]);\r\n    if (prev.update) {\r\n      return prev;\r\n    } else if (prevDate !== nextDate) {\r\n      if (prevDate && nextDate && prevDate.getTime() === nextDate.getTime()) {\r\n        return prev;\r\n      } else {\r\n        return {\r\n          update: true,\r\n          field: next\r\n        };\r\n      }\r\n    }\r\n    return prev;\r\n  }, shouldUpdate);\r\n\r\n  if (nextState.currentMonth !== this.state.currentMonth) {\r\n    shouldUpdate = {\r\n      update: true,\r\n      field: 'current'\r\n    };\r\n  }\r\n  //console.log(shouldUpdate.field, shouldUpdate.update);\r\n  return shouldUpdate.update;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}