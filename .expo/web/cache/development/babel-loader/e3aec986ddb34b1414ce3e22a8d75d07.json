{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ansari\\\\Documents\\\\Github\\\\Mercy-USA-App\\\\node_modules\\\\react-native-material-kit\\\\lib\\\\mdl\\\\IconToggle.js\";\n\nfunction _objectSpread2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { Children, Component } from 'react';\nimport PropTypes from 'prop-types';\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport MKColor from \"../MKColor\";\nimport Ripple from \"./Ripple\";\nimport * as utils from \"../utils\";\nimport { getTheme } from \"../theme\";\n\nfunction isViewForState(view, state) {\n  return view.props.state_checked && state || !(view.props.state_checked || state);\n}\n\nclass IconToggle extends Component {\n  constructor(props) {\n    super(props);\n\n    this._onTouch = evt => {\n      if (evt.type === 'TOUCH_UP') {\n        this.confirmToggle();\n      }\n    };\n\n    this.theme = getTheme();\n    this.state = {\n      checked: false\n    };\n  }\n\n  componentWillMount() {\n    this.setState({\n      checked: this.props.checked\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.checked !== this.props.checked) {\n      this.setState({\n        checked: nextProps.checked\n      });\n    }\n  }\n\n  confirmToggle() {\n    var prevState = this.state.checked;\n    this.setState({\n      checked: !prevState\n    }, () => {\n      if (this.props.onCheckedChange) {\n        this.props.onCheckedChange({\n          checked: this.state.checked\n        });\n      }\n    });\n  }\n\n  _renderChildren() {\n    return Children.map(this.props.children, child => isViewForState(child, this.state.checked) && child);\n  }\n\n  render() {\n    var mergedStyle = _extends({}, this.theme.iconToggleStyle, utils.compact({\n      rippleColor: this.props.rippleColor\n    }));\n\n    return React.createElement(TouchableWithoutFeedback, _extends({}, utils.extractTouchableProps(this), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      }\n    }), React.createElement(Ripple, _extends({}, this.props, {\n      rippleColor: mergedStyle.rippleColor,\n      style: [IconToggle.defaultProps.style, this.props.style],\n      maskBorderRadiusInPercent: 50,\n      rippleLocation: \"center\",\n      onTouch: this._onTouch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      }\n    }), this._renderChildren()));\n  }\n\n}\n\nIconToggle.propTypes = _objectSpread2({}, Ripple.propTypes, {}, TouchableWithoutFeedback.propTypes, {\n  checked: PropTypes.bool,\n  onCheckedChange: PropTypes.func,\n  children: PropTypes.node\n});\nIconToggle.defaultProps = {\n  pointerEvents: 'box-only',\n  enabled: true,\n  maskColor: MKColor.Transparent,\n  style: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderColor: 'rgba(0,0,0,.54)',\n    width: 56,\n    height: 56\n  }\n};\nmodule.exports = IconToggle;","map":{"version":3,"sources":["C:\\Users\\Ansari\\Documents\\Github\\Mercy-USA-App\\node_modules\\react-native-material-kit\\lib\\mdl\\IconToggle.js"],"names":["React","Children","Component","PropTypes","MKColor","Ripple","utils","getTheme","isViewForState","view","state","props","state_checked","IconToggle","constructor","_onTouch","evt","type","confirmToggle","theme","checked","componentWillMount","setState","componentWillReceiveProps","nextProps","prevState","onCheckedChange","_renderChildren","map","children","child","render","mergedStyle","iconToggleStyle","compact","rippleColor","extractTouchableProps","defaultProps","style","propTypes","TouchableWithoutFeedback","bool","func","node","pointerEvents","enabled","maskColor","Transparent","justifyContent","alignItems","borderColor","width","height","module","exports"],"mappings":";;;;;;;;AAUA,OAAOA,KAAP,IACEC,QADF,EAEEC,SAFF,QAGO,OAHP;AAIA,OAAOC,SAAP,MAAsB,YAAtB;;AAMA,OAAOC,OAAP;AACA,OAAOC,MAAP;AACA,OAAO,KAAKC,KAAZ;AACA,SAASC,QAAT;;AAEA,SAASC,cAAT,CAAwBC,IAAxB,EAA8BC,KAA9B,EAAqC;AACnC,SAAQD,IAAI,CAACE,KAAL,CAAWC,aAAX,IAA4BF,KAA7B,IACL,EAAED,IAAI,CAACE,KAAL,CAAWC,aAAX,IAA4BF,KAA9B,CADF;AAED;;AAKD,MAAMG,UAAN,SAAyBX,SAAzB,CAAmC;AAgCjCY,EAAAA,WAAW,CAACH,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAkBnBI,QAlBmB,GAkBPC,GAAD,IAAS;AAClB,UAAIA,GAAG,CAACC,IAAJ,KAAa,UAAjB,EAA6B;AAC3B,aAAKC,aAAL;AACD;AACF,KAtBkB;;AAEjB,SAAKC,KAAL,GAAaZ,QAAQ,EAArB;AACA,SAAKG,KAAL,GAAa;AAAEU,MAAAA,OAAO,EAAE;AAAX,KAAb;AACD;;AAEDC,EAAAA,kBAAkB,GAAG;AACnB,SAAKC,QAAL,CAAc;AAAEF,MAAAA,OAAO,EAAE,KAAKT,KAAL,CAAWS;AAAtB,KAAd;AACD;;AAEDG,EAAAA,yBAAyB,CAACC,SAAD,EAAY;AACnC,QAAIA,SAAS,CAACJ,OAAV,KAAsB,KAAKT,KAAL,CAAWS,OAArC,EAA8C;AAC5C,WAAKE,QAAL,CAAc;AAAEF,QAAAA,OAAO,EAAEI,SAAS,CAACJ;AAArB,OAAd;AACD;AACF;;AAYDF,EAAAA,aAAa,GAAG;AACd,QAAMO,SAAS,GAAG,KAAKf,KAAL,CAAWU,OAA7B;AACA,SAAKE,QAAL,CAAc;AAAEF,MAAAA,OAAO,EAAE,CAACK;AAAZ,KAAd,EAAuC,MAAM;AAC3C,UAAI,KAAKd,KAAL,CAAWe,eAAf,EAAgC;AAC9B,aAAKf,KAAL,CAAWe,eAAX,CAA2B;AAAEN,UAAAA,OAAO,EAAE,KAAKV,KAAL,CAAWU;AAAtB,SAA3B;AACD;AACF,KAJD;AAKD;;AAKDO,EAAAA,eAAe,GAAG;AAChB,WAAO1B,QAAQ,CAAC2B,GAAT,CAAa,KAAKjB,KAAL,CAAWkB,QAAxB,EACJC,KAAD,IAAWtB,cAAc,CAACsB,KAAD,EAAQ,KAAKpB,KAAL,CAAWU,OAAnB,CAAd,IAA6CU,KADnD,CAAP;AAGD;;AAEDC,EAAAA,MAAM,GAAG;AACP,QAAMC,WAAW,GAAG,SAAc,EAAd,EAAkB,KAAKb,KAAL,CAAWc,eAA7B,EAA8C3B,KAAK,CAAC4B,OAAN,CAAc;AAC9EC,MAAAA,WAAW,EAAE,KAAKxB,KAAL,CAAWwB;AADsD,KAAd,CAA9C,CAApB;;AAIA,WACE,oBAAC,wBAAD,eAA8B7B,KAAK,CAAC8B,qBAAN,CAA4B,IAA5B,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA,QACE,oBAAC,MAAD,eACM,KAAKzB,KADX;AAEE,MAAA,WAAW,EAAEqB,WAAW,CAACG,WAF3B;AAGE,MAAA,KAAK,EAAE,CAACtB,UAAU,CAACwB,YAAX,CAAwBC,KAAzB,EAAgC,KAAK3B,KAAL,CAAW2B,KAA3C,CAHT;AAIE,MAAA,yBAAyB,EAAE,EAJ7B;AAKE,MAAA,cAAc,EAAC,QALjB;AAME,MAAA,OAAO,EAAE,KAAKvB,QANhB;AAAA;AAAA;AAAA;AAAA;AAAA,QAQG,KAAKY,eAAL,EARH,CADF,CADF;AAcD;;AA/FgC;;AAA7Bd,U,CAEG0B,S,sBAEFlC,MAAM,CAACkC,S,MAGPC,wBAAwB,CAACD,S;AAG5BnB,EAAAA,OAAO,EAAEjB,SAAS,CAACsC,I;AAGnBf,EAAAA,eAAe,EAAEvB,SAAS,CAACuC,I;AAE3Bb,EAAAA,QAAQ,EAAE1B,SAAS,CAACwC;;AAflB9B,U,CAmBGwB,Y,GAAe;AACpBO,EAAAA,aAAa,EAAE,UADK;AAEpBC,EAAAA,OAAO,EAAE,IAFW;AAGpBC,EAAAA,SAAS,EAAE1C,OAAO,CAAC2C,WAHC;AAIpBT,EAAAA,KAAK,EAAE;AACLU,IAAAA,cAAc,EAAE,QADX;AAELC,IAAAA,UAAU,EAAE,QAFP;AAGLC,IAAAA,WAAW,EAAE,iBAHR;AAILC,IAAAA,KAAK,EAAE,EAJF;AAKLC,IAAAA,MAAM,EAAE;AALH;AAJa,C;AAiFxBC,MAAM,CAACC,OAAP,GAAiBzC,UAAjB","sourcesContent":["//\n// MDL-style Icon Toggle component.\n//\n// - @see [MDL Icon Toggle](http://bit.ly/1OUYzem)\n// - [Props](#props)\n// - [Defaults](#defaults)\n//\n// Created by ywu on 15/10/07.\n//\n\nimport React, {\n  Children,\n  Component,\n} from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  TouchableWithoutFeedback,\n} from 'react-native';\n\nimport MKColor from '../MKColor';\nimport Ripple from './Ripple';\nimport * as utils from '../utils';\nimport { getTheme } from '../theme';\n\nfunction isViewForState(view, state) {\n  return (view.props.state_checked && state) ||\n    !(view.props.state_checked || state);\n}\n\n//\n// ## <section id='IconToggle'>IconToggle</section>\n// The `IconToggle` component.\nclass IconToggle extends Component {\n  // ## <section id='props'>Props</section>\n  static propTypes = {\n    // [Ripple Props](Ripple.html#props)...\n    ...Ripple.propTypes,\n\n    // Touchable...\n    ...TouchableWithoutFeedback.propTypes,\n\n    // Toggle status\n    checked: PropTypes.bool,\n\n    // Callback when the toggle status is changed\n    onCheckedChange: PropTypes.func,\n\n    children: PropTypes.node,\n  };\n\n  // ## <section id='defaults'>Defaults</section>\n  static defaultProps = {\n    pointerEvents: 'box-only',\n    enabled: true,\n    maskColor: MKColor.Transparent,\n    style: {\n      justifyContent: 'center',\n      alignItems: 'center',\n      borderColor: 'rgba(0,0,0,.54)',\n      width: 56,\n      height: 56,\n    },\n  };\n\n  constructor(props) {\n    super(props);\n    this.theme = getTheme();\n    this.state = { checked: false };\n  }\n\n  componentWillMount() {\n    this.setState({ checked: this.props.checked });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.checked !== this.props.checked) {\n      this.setState({ checked: nextProps.checked });\n    }\n  }\n\n  // property initializers begin\n  // Touch events handling\n  _onTouch = (evt) => {\n    if (evt.type === 'TOUCH_UP') {\n      this.confirmToggle();\n    }\n  };\n  // property initializers end\n\n  // When a toggle action (from the given state) is confirmed.\n  confirmToggle() {\n    const prevState = this.state.checked;\n    this.setState({ checked: !prevState }, () => {\n      if (this.props.onCheckedChange) {\n        this.props.onCheckedChange({ checked: this.state.checked });\n      }\n    });\n  }\n\n  // Select a child element to show for the current toggle status.\n  //\n  // @see [State List](http://developer.android.com/guide/topics/resources/drawable-resource.html#StateList) in Android development\n  _renderChildren() {\n    return Children.map(this.props.children,\n      (child) => isViewForState(child, this.state.checked) && child\n    );\n  }\n\n  render() {\n    const mergedStyle = Object.assign({}, this.theme.iconToggleStyle, utils.compact({\n      rippleColor: this.props.rippleColor,\n    }));\n\n    return (\n      <TouchableWithoutFeedback {...utils.extractTouchableProps(this)}>\n        <Ripple\n          {...this.props}\n          rippleColor={mergedStyle.rippleColor}\n          style={[IconToggle.defaultProps.style, this.props.style]}\n          maskBorderRadiusInPercent={50}\n          rippleLocation=\"center\"\n          onTouch={this._onTouch}\n        >\n          {this._renderChildren()}\n        </Ripple>\n      </TouchableWithoutFeedback>\n    );\n  }\n}\n\n\n// ## Public interface\nmodule.exports = IconToggle;\n"]},"metadata":{},"sourceType":"module"}