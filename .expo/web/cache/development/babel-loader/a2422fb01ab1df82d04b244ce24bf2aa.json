{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ansari\\\\Documents\\\\Github\\\\Mercy-USA-App\\\\node_modules\\\\react-native-maps\\\\lib\\\\components\\\\MapPolygon.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectSpread2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ColorPropType from \"react-native-web/dist/exports/ColorPropType\";\nimport ViewPropTypes from \"react-native-web/dist/exports/ViewPropTypes\";\nimport View from \"react-native-web/dist/exports/View\";\nimport decorateMapComponent, { USES_DEFAULT_IMPLEMENTATION, SUPPORTED } from \"./decorateMapComponent\";\nimport * as ProviderConstants from \"./ProviderConstants\";\nvar viewPropTypes = ViewPropTypes || View.propTypes;\n\nvar propTypes = _objectSpread2({}, viewPropTypes, {\n  coordinates: PropTypes.arrayOf(PropTypes.shape({\n    latitude: PropTypes.number.isRequired,\n    longitude: PropTypes.number.isRequired\n  })),\n  holes: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.shape({\n    latitude: PropTypes.number.isRequired,\n    longitude: PropTypes.number.isRequired\n  }))),\n  onPress: PropTypes.func,\n  tappable: PropTypes.bool,\n  strokeWidth: PropTypes.number,\n  strokeColor: ColorPropType,\n  fillColor: ColorPropType,\n  zIndex: PropTypes.number,\n  lineCap: PropTypes.oneOf(['butt', 'round', 'square']),\n  lineJoin: PropTypes.oneOf(['miter', 'round', 'bevel']),\n  miterLimit: PropTypes.number,\n  geodesic: PropTypes.bool,\n  lineDashPhase: PropTypes.number,\n  lineDashPattern: PropTypes.arrayOf(PropTypes.number)\n});\n\nvar defaultProps = {\n  strokeColor: '#000',\n  strokeWidth: 1\n};\n\nclass MapPolygon extends React.Component {\n  setNativeProps(props) {\n    this.polygon.setNativeProps(props);\n  }\n\n  updateNativeProps() {\n    return () => {\n      var {\n        fillColor,\n        strokeColor,\n        strokeWidth\n      } = this.props;\n      var polygonNativeProps = {};\n\n      if (fillColor) {\n        polygonNativeProps.fillColor = fillColor;\n      }\n\n      if (strokeColor) {\n        polygonNativeProps.strokeColor = strokeColor;\n      }\n\n      if (strokeWidth) {\n        polygonNativeProps.strokeWidth = strokeWidth;\n      }\n\n      if (polygonNativeProps) {\n        this.setNativeProps(polygonNativeProps);\n      }\n    };\n  }\n\n  render() {\n    var AIRMapPolygon = this.getAirComponent();\n    return React.createElement(AIRMapPolygon, _extends({}, this.props, {\n      ref: _ref => {\n        this.polygon = _ref;\n      },\n      onLayout: this.context.provider === ProviderConstants.PROVIDER_GOOGLE ? this.updateNativeProps() : undefined,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      }\n    }));\n  }\n\n}\n\nMapPolygon.propTypes = propTypes;\nMapPolygon.defaultProps = defaultProps;\nexport default decorateMapComponent(MapPolygon, {\n  componentType: 'Polygon',\n  providers: {\n    google: {\n      ios: SUPPORTED,\n      android: USES_DEFAULT_IMPLEMENTATION\n    }\n  }\n});","map":{"version":3,"sources":["C:\\Users\\Ansari\\Documents\\Github\\Mercy-USA-App\\node_modules\\react-native-maps\\lib\\components\\MapPolygon.js"],"names":["PropTypes","React","decorateMapComponent","USES_DEFAULT_IMPLEMENTATION","SUPPORTED","ProviderConstants","viewPropTypes","ViewPropTypes","View","propTypes","coordinates","arrayOf","shape","latitude","number","isRequired","longitude","holes","onPress","func","tappable","bool","strokeWidth","strokeColor","ColorPropType","fillColor","zIndex","lineCap","oneOf","lineJoin","miterLimit","geodesic","lineDashPhase","lineDashPattern","defaultProps","MapPolygon","Component","setNativeProps","props","polygon","updateNativeProps","polygonNativeProps","render","AIRMapPolygon","getAirComponent","ref","context","provider","PROVIDER_GOOGLE","undefined","componentType","providers","google","ios","android"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { ColorPropType, ViewPropTypes, View } from 'react-native';\r\nimport decorateMapComponent, {\r\n  USES_DEFAULT_IMPLEMENTATION,\r\n  SUPPORTED,\r\n} from './decorateMapComponent';\r\nimport * as ProviderConstants from './ProviderConstants';\r\n\r\n// if ViewPropTypes is not defined fall back to View.propType (to support RN < 0.44)\r\nconst viewPropTypes = ViewPropTypes || View.propTypes;\r\n\r\nconst propTypes = {\r\n  ...viewPropTypes,\r\n\r\n  /**\r\n   * An array of coordinates to describe the polygon\r\n   */\r\n  coordinates: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      /**\r\n       * Latitude/Longitude coordinates\r\n       */\r\n      latitude: PropTypes.number.isRequired,\r\n      longitude: PropTypes.number.isRequired,\r\n    })\r\n  ),\r\n\r\n  /**\r\n   * An array of array of coordinates to describe the polygon holes\r\n   */\r\n  holes: PropTypes.arrayOf(\r\n    PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        /**\r\n         * Latitude/Longitude coordinates\r\n         */\r\n        latitude: PropTypes.number.isRequired,\r\n        longitude: PropTypes.number.isRequired,\r\n      })\r\n    )\r\n  ),\r\n\r\n  /**\r\n   * Callback that is called when the user presses on the polygon\r\n   */\r\n  onPress: PropTypes.func,\r\n\r\n  /**\r\n   * Boolean to allow a polygon to be tappable and use the\r\n   * onPress function\r\n   */\r\n  tappable: PropTypes.bool,\r\n\r\n  /**\r\n   * The stroke width to use for the path.\r\n   */\r\n  strokeWidth: PropTypes.number,\r\n\r\n  /**\r\n   * The stroke color to use for the path.\r\n   */\r\n  strokeColor: ColorPropType,\r\n\r\n  /**\r\n   * The fill color to use for the path.\r\n   */\r\n  fillColor: ColorPropType,\r\n\r\n  /**\r\n   * The order in which this tile overlay is drawn with respect to other overlays. An overlay\r\n   * with a larger z-index is drawn over overlays with smaller z-indices. The order of overlays\r\n   * with the same z-index is arbitrary. The default zIndex is 0.\r\n   *\r\n   * @platform android\r\n   */\r\n  zIndex: PropTypes.number,\r\n\r\n  /**\r\n   * The line cap style to apply to the open ends of the path.\r\n   * The default style is `round`.\r\n   *\r\n   * @platform ios\r\n   */\r\n  lineCap: PropTypes.oneOf(['butt', 'round', 'square']),\r\n\r\n  /**\r\n   * The line join style to apply to corners of the path.\r\n   * The default style is `round`.\r\n   *\r\n   * @platform ios\r\n   */\r\n  lineJoin: PropTypes.oneOf(['miter', 'round', 'bevel']),\r\n\r\n  /**\r\n   * The limiting value that helps avoid spikes at junctions between connected line segments.\r\n   * The miter limit helps you avoid spikes in paths that use the `miter` `lineJoin` style. If\r\n   * the ratio of the miter length—that is, the diagonal length of the miter join—to the line\r\n   * thickness exceeds the miter limit, the joint is converted to a bevel join. The default\r\n   * miter limit is 10, which results in the conversion of miters whose angle at the joint\r\n   * is less than 11 degrees.\r\n   *\r\n   * @platform ios\r\n   */\r\n  miterLimit: PropTypes.number,\r\n\r\n  /**\r\n   * Boolean to indicate whether to draw each segment of the line as a geodesic as opposed to\r\n   * straight lines on the Mercator projection. A geodesic is the shortest path between two\r\n   * points on the Earth's surface. The geodesic curve is constructed assuming the Earth is\r\n   * a sphere.\r\n   *\r\n   */\r\n  geodesic: PropTypes.bool,\r\n\r\n  /**\r\n   * The offset (in points) at which to start drawing the dash pattern.\r\n   *\r\n   * Use this property to start drawing a dashed line partway through a segment or gap. For\r\n   * example, a phase value of 6 for the patter 5-2-3-2 would cause drawing to begin in the\r\n   * middle of the first gap.\r\n   *\r\n   * The default value of this property is 0.\r\n   *\r\n   * @platform ios\r\n   */\r\n  lineDashPhase: PropTypes.number,\r\n\r\n  /**\r\n   * An array of numbers specifying the dash pattern to use for the path.\r\n   *\r\n   * The array contains one or more numbers that indicate the lengths (measured in points) of the\r\n   * line segments and gaps in the pattern. The values in the array alternate, starting with the\r\n   * first line segment length, followed by the first gap length, followed by the second line\r\n   * segment length, and so on.\r\n   *\r\n   * This property is set to `null` by default, which indicates no line dash pattern.\r\n   *\r\n   * @platform ios\r\n   */\r\n  lineDashPattern: PropTypes.arrayOf(PropTypes.number),\r\n};\r\n\r\nconst defaultProps = {\r\n  strokeColor: '#000',\r\n  strokeWidth: 1,\r\n};\r\n\r\nclass MapPolygon extends React.Component {\r\n  setNativeProps(props) {\r\n    this.polygon.setNativeProps(props);\r\n  }\r\n\r\n  updateNativeProps() {\r\n    return () => {\r\n      const { fillColor, strokeColor, strokeWidth } = this.props;\r\n      let polygonNativeProps = {};\r\n      if (fillColor) {\r\n        polygonNativeProps.fillColor = fillColor;\r\n      }\r\n      if (strokeColor) {\r\n        polygonNativeProps.strokeColor = strokeColor;\r\n      }\r\n      if (strokeWidth) {\r\n        polygonNativeProps.strokeWidth = strokeWidth;\r\n      }\r\n      if (polygonNativeProps) {\r\n        this.setNativeProps(polygonNativeProps);\r\n      }\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const AIRMapPolygon = this.getAirComponent();\r\n    return (\r\n      <AIRMapPolygon\r\n        {...this.props}\r\n        ref={ref => {\r\n          this.polygon = ref;\r\n        }}\r\n        onLayout={\r\n          this.context.provider === ProviderConstants.PROVIDER_GOOGLE\r\n            ? this.updateNativeProps()\r\n            : undefined\r\n        }\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nMapPolygon.propTypes = propTypes;\r\nMapPolygon.defaultProps = defaultProps;\r\n\r\nexport default decorateMapComponent(MapPolygon, {\r\n  componentType: 'Polygon',\r\n  providers: {\r\n    google: {\r\n      ios: SUPPORTED,\r\n      android: USES_DEFAULT_IMPLEMENTATION,\r\n    },\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}